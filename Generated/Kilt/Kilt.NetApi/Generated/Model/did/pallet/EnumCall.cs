//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Kilt.NetApi.Generated.Model.did.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create
        /// Store a new DID on chain, after verifying that the creation
        /// operation has been signed by the KILT account associated with the
        /// identifier of the DID being created and that a DID with the same
        /// identifier has not previously existed on (and then deleted from) the
        /// chain.
        /// 
        /// There must be no DID information stored on chain under the same DID
        /// identifier.
        /// 
        /// The new keys added with this operation are stored under the DID
        /// identifier along with the block number in which the operation was
        /// executed.
        /// 
        /// The dispatch origin can be any KILT account with enough funds to
        /// execute the extrinsic and it does not have to be tied in any way to
        /// the KILT account identifying the DID subject.
        /// 
        /// Emits `DidCreated`.
        /// 
        /// # <weight>
        /// - The transaction's complexity is mainly dependent on the number of
        ///   new key agreement keys and the number of new service endpoints
        ///   included in the operation.
        /// ---------
        /// Weight: O(K) + O(N) where K is the number of new key agreement
        /// keys bounded by `MaxNewKeyAgreementKeys`, while N is the number of
        /// new service endpoints bounded by `MaxNumberOfServicesPerDid`.
        /// - Reads: [Origin Account], Did, DidBlacklist
        /// - Writes: Did (with K new key agreement keys), ServiceEndpoints
        ///   (with N new service endpoints), DidEndpointsCount
        /// # </weight>
        /// </summary>
        create = 0,
        
        /// <summary>
        /// >> set_authentication_key
        /// Update the DID authentication key.
        /// 
        /// The old key is deleted from the set of public keys if it is
        /// not used in any other part of the DID. The new key is added to the
        /// set of public keys.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        set_authentication_key = 1,
        
        /// <summary>
        /// >> set_delegation_key
        /// Set or update the DID delegation key.
        /// 
        /// If an old key existed, it is deleted from the set of public keys if
        /// it is not used in any other part of the DID. The new key is added to
        /// the set of public keys.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        set_delegation_key = 2,
        
        /// <summary>
        /// >> remove_delegation_key
        /// Remove the DID delegation key.
        /// 
        /// The old key is deleted from the set of public keys if
        /// it is not used in any other part of the DID.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        remove_delegation_key = 3,
        
        /// <summary>
        /// >> set_attestation_key
        /// Set or update the DID attestation key.
        /// 
        /// If an old key existed, it is deleted from the set of public keys if
        /// it is not used in any other part of the DID. The new key is added to
        /// the set of public keys.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        set_attestation_key = 4,
        
        /// <summary>
        /// >> remove_attestation_key
        /// Remove the DID attestation key.
        /// 
        /// The old key is deleted from the set of public keys if
        /// it is not used in any other part of the DID.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        remove_attestation_key = 5,
        
        /// <summary>
        /// >> add_key_agreement_key
        /// Add a single new key agreement key to the DID.
        /// 
        /// The new key is added to the set of public keys.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        add_key_agreement_key = 6,
        
        /// <summary>
        /// >> remove_key_agreement_key
        /// Remove a DID key agreement key from both its set of key agreement
        /// keys and as well as its public keys.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        remove_key_agreement_key = 7,
        
        /// <summary>
        /// >> add_service_endpoint
        /// Add a new service endpoint under the given DID.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did, ServiceEndpoints, DidEndpointsCount
        /// - Writes: Did, ServiceEndpoints, DidEndpointsCount
        /// # </weight>
        /// </summary>
        add_service_endpoint = 8,
        
        /// <summary>
        /// >> remove_service_endpoint
        /// Remove the service with the provided ID from the DID.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidUpdated`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], ServiceEndpoints, DidEndpointsCount
        /// - Writes: Did, ServiceEndpoints, DidEndpointsCount
        /// # </weight>
        /// </summary>
        remove_service_endpoint = 9,
        
        /// <summary>
        /// >> delete
        /// Delete a DID from the chain and all information associated with it,
        /// after verifying that the delete operation has been signed by the DID
        /// subject using the authentication key currently stored on chain.
        /// 
        /// The referenced DID identifier must be present on chain before the
        /// delete operation is evaluated.
        /// 
        /// After it is deleted, a DID with the same identifier cannot be
        /// re-created ever again.
        /// 
        /// As the result of the deletion, all traces of the DID are removed
        /// from the storage, which results in the invalidation of all
        /// attestations issued by the DID subject.
        /// 
        /// The dispatch origin must be a DID origin proxied via the
        /// `submit_did_call` extrinsic.
        /// 
        /// Emits `DidDeleted`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Kills: Did entry associated to the DID identifier
        /// # </weight>
        /// </summary>
        delete = 10,
        
        /// <summary>
        /// >> reclaim_deposit
        /// Reclaim a deposit for a DID. This will delete the DID and all
        /// information associated with it, after verifying that the caller is
        /// the owner of the deposit.
        /// 
        /// The referenced DID identifier must be present on chain before the
        /// delete operation is evaluated.
        /// 
        /// After it is deleted, a DID with the same identifier cannot be
        /// re-created ever again.
        /// 
        /// As the result of the deletion, all traces of the DID are removed
        /// from the storage, which results in the invalidation of all
        /// attestations issued by the DID subject.
        /// 
        /// Emits `DidDeleted`.
        /// 
        /// # <weight>
        /// Weight: O(1)
        /// - Reads: [Origin Account], Did
        /// - Kills: Did entry associated to the DID identifier
        /// # </weight>
        /// </summary>
        reclaim_deposit = 11,
        
        /// <summary>
        /// >> submit_did_call
        /// Proxy a dispatchable call of another runtime extrinsic that
        /// supports a DID origin.
        /// 
        /// The referenced DID identifier must be present on chain before the
        /// operation is dispatched.
        /// 
        /// A call submitted through this extrinsic must be signed with the
        /// right DID key, depending on the call. This information is provided
        /// by the `DidAuthorizedCallOperation` parameter, which specifies the
        /// DID subject acting as the origin of the call, the DID's tx counter
        /// (nonce), the dispatchable to call in case signature verification
        /// succeeds, the type of DID key to use to verify the operation
        /// signature, and the block number the operation was targeting for
        /// inclusion, when it was created and signed.
        /// 
        /// In case the signature is incorrect, the nonce is not valid, the
        /// required key is not present for the specified DID, or the block
        /// specified is too old the verification fails and the call is not
        /// dispatched. Otherwise, the call is properly dispatched with a
        /// `DidOrigin` origin indicating the DID subject.
        /// 
        /// A successful dispatch operation results in the tx counter associated
        /// with the given DID to be incremented, to mitigate replay attacks.
        /// 
        /// The dispatch origin can be any KILT account with enough funds to
        /// execute the extrinsic and it does not have to be tied in any way to
        /// the KILT account identifying the DID subject.
        /// 
        /// Emits `DidCallDispatched`.
        /// 
        /// # <weight>
        /// Weight: O(1) + weight of the dispatched call
        /// - Reads: [Origin Account], Did
        /// - Writes: Did
        /// # </weight>
        /// </summary>
        submit_did_call = 12,
        
        /// <summary>
        /// >> change_deposit_owner
        /// Changes the deposit owner.
        /// 
        /// The balance that is reserved by the current deposit owner will be
        /// freed and balance of the new deposit owner will get reserved.
        /// 
        /// The subject of the call must be the did owner.
        /// The sender of the call will be the new deposit owner.
        /// </summary>
        change_deposit_owner = 13,
        
        /// <summary>
        /// >> update_deposit
        /// Updates the deposit amount to the current deposit rate.
        /// 
        /// The sender must be the deposit owner.
        /// </summary>
        update_deposit = 14,
        
        /// <summary>
        /// >> dispatch_as
        /// Proxy a dispatchable call of another runtime extrinsic that
        /// supports a DID origin.
        /// 
        /// The referenced DID identifier must be present on chain before the
        /// operation is dispatched.
        /// 
        /// A call submitted through this extrinsic must be signed with the
        /// right DID key, depending on the call. In contrast to the
        /// `submit_did_call` extrinsic, this call doesn't separate the sender
        /// from the DID subject. The key that must be used for this DID call
        /// is required to also be a valid account with enough balance to pay
        /// for fees.
        /// 
        /// The dispatch origin must be a KILT account with enough funds to
        /// execute the extrinsic and must correspond to the required DID
        /// Verification Key.
        /// 
        /// Emits `DidCallDispatched`.
        /// </summary>
        dispatch_as = 15,
        
        /// <summary>
        /// >> create_from_account
        /// Store a new DID on chain.
        /// 
        /// The DID identifier is derived from the account ID that submits this
        /// call. The authentication key must correspond to the account ID that
        /// submitted this call. For accounts that use the ed25519 and sr25519
        /// schema, the authentication key must be of the
        /// `DidVerificationKey::Ed25519` or `DidVerificationKey::Sr25519`
        /// variant and contains the public key. For Ecdsa accounts, the
        /// `DidVerificationKey::Ecdsa` variant is calculated by hashing the
        /// Ecdsa public key.
        /// 
        /// If this call is dispatched by an account id that doesn't correspond
        /// to a public private key pair, the `DidVerificationKey::Account`
        /// variant shall be used (Multisig, Pure Proxy, Governance origins).
        /// The resulting DID can NOT be used for signing data and is therefore
        /// limited to onchain activities.
        /// 
        /// There must be no DID information stored on chain under the same DID
        /// identifier. This call will fail if there exists a DID with the same
        /// identifier or if a DID with the same identifier existed and was
        /// deleted.
        /// 
        /// The origin for this account must be funded and provide the required
        /// deposit and fee.
        /// 
        /// Emits `DidCreated`.
        /// </summary>
        create_from_account = 16,
    }
    
    /// <summary>
    /// >> 366 - Variant[did.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.did.did_details.DidCreationDetails, Kilt.NetApi.Generated.Model.did.did_details.EnumDidSignature>>(Call.create);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.did_details.EnumDidVerificationKey>(Call.set_authentication_key);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.did_details.EnumDidVerificationKey>(Call.set_delegation_key);
				AddTypeDecoder<BaseVoid>(Call.remove_delegation_key);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.did_details.EnumDidVerificationKey>(Call.set_attestation_key);
				AddTypeDecoder<BaseVoid>(Call.remove_attestation_key);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.did_details.EnumDidEncryptionKey>(Call.add_key_agreement_key);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.primitive_types.H256>(Call.remove_key_agreement_key);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.service_endpoints.DidEndpoint>(Call.add_service_endpoint);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23>(Call.remove_service_endpoint);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.delete);
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.reclaim_deposit);
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.did.did_details.DidAuthorizedCallOperation, Kilt.NetApi.Generated.Model.did.did_details.EnumDidSignature>>(Call.submit_did_call);
				AddTypeDecoder<BaseVoid>(Call.change_deposit_owner);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.update_deposit);
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.sp_core.crypto.AccountId32, Kilt.NetApi.Generated.Model.spiritnet_runtime.EnumRuntimeCall>>(Call.dispatch_as);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.did.did_details.EnumDidVerificationKey>(Call.create_from_account);
        }
    }
}
