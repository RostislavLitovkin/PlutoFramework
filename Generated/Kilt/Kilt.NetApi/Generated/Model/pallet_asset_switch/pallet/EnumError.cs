//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Kilt.NetApi.Generated.Model.pallet_asset_switch.pallet
{
    
    
    /// <summary>
    /// >> Error
    /// The `Error` enum of this pallet.
    /// </summary>
    public enum Error
    {
        
        /// <summary>
        /// >> InvalidInput
        /// Provided switch pair info is not valid.
        /// </summary>
        InvalidInput = 0,
        
        /// <summary>
        /// >> Hook
        /// The runtime-injected logic returned an error with a specific code.
        /// </summary>
        Hook = 1,
        
        /// <summary>
        /// >> Liquidity
        /// There are not enough remote assets to cover the specified amount of
        /// local tokens to switch.
        /// </summary>
        Liquidity = 2,
        
        /// <summary>
        /// >> LocalPoolBalance
        /// Failure in transferring the local tokens from the user's balance to
        /// the switch pair pool account.
        /// </summary>
        LocalPoolBalance = 3,
        
        /// <summary>
        /// >> PoolInitialLiquidityRequirement
        /// The calculated switch pair pool account does not have enough local
        /// tokens to cover the specified `circulating_supply`.
        /// </summary>
        PoolInitialLiquidityRequirement = 4,
        
        /// <summary>
        /// >> SwitchPairAlreadyExisting
        /// A switch pair has already been set.
        /// </summary>
        SwitchPairAlreadyExisting = 5,
        
        /// <summary>
        /// >> SwitchPairNotEnabled
        /// The switch pair did not enable switches.
        /// </summary>
        SwitchPairNotEnabled = 6,
        
        /// <summary>
        /// >> SwitchPairNotFound
        /// No switch pair found.
        /// </summary>
        SwitchPairNotFound = 7,
        
        /// <summary>
        /// >> UserSwitchBalance
        /// The user does not have enough local tokens to cover the requested
        /// switch.
        /// </summary>
        UserSwitchBalance = 8,
        
        /// <summary>
        /// >> UserXcmBalance
        /// The user does not have enough assets to pay for the remote XCM fees.
        /// </summary>
        UserXcmBalance = 9,
        
        /// <summary>
        /// >> Xcm
        /// Something regarding XCM went wrong.
        /// </summary>
        Xcm = 10,
        
        /// <summary>
        /// >> Internal
        /// Internal error.
        /// </summary>
        Internal = 11,
        
        /// <summary>
        /// >> AmountTooLow
        /// Attempt to switch less than the local ED tokens.
        /// </summary>
        AmountTooLow = 12,
        
        /// <summary>
        /// >> PendingSwitches
        /// Some switches have not yet been processed.
        /// </summary>
        PendingSwitches = 13,
    }
    
    /// <summary>
    /// >> 611 - Variant[pallet_asset_switch.pallet.Error]
    /// The `Error` enum of this pallet.
    /// </summary>
    public sealed class EnumError : BaseEnumRust<Error>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumError()
        {
				AddTypeDecoder<BaseVoid>(Error.InvalidInput);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U8>(Error.Hook);
				AddTypeDecoder<BaseVoid>(Error.Liquidity);
				AddTypeDecoder<BaseVoid>(Error.LocalPoolBalance);
				AddTypeDecoder<BaseVoid>(Error.PoolInitialLiquidityRequirement);
				AddTypeDecoder<BaseVoid>(Error.SwitchPairAlreadyExisting);
				AddTypeDecoder<BaseVoid>(Error.SwitchPairNotEnabled);
				AddTypeDecoder<BaseVoid>(Error.SwitchPairNotFound);
				AddTypeDecoder<BaseVoid>(Error.UserSwitchBalance);
				AddTypeDecoder<BaseVoid>(Error.UserXcmBalance);
				AddTypeDecoder<BaseVoid>(Error.Xcm);
				AddTypeDecoder<BaseVoid>(Error.Internal);
				AddTypeDecoder<BaseVoid>(Error.AmountTooLow);
				AddTypeDecoder<BaseVoid>(Error.PendingSwitches);
        }
    }
}
