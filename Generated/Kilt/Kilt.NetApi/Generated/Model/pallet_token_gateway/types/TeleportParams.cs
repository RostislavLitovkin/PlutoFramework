//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace Kilt.NetApi.Generated.Model.pallet_token_gateway.types
{
    
    
    /// <summary>
    /// >> 491 - Composite[pallet_token_gateway.types.TeleportParams]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class TeleportParams : BaseType
    {
        
        /// <summary>
        /// >> asset_id
        /// </summary>
        public Kilt.NetApi.Generated.Model.staging_xcm.v4.location.Location AssetId { get; set; }
        /// <summary>
        /// >> destination
        /// </summary>
        public Kilt.NetApi.Generated.Model.ismp.host.EnumStateMachine Destination { get; set; }
        /// <summary>
        /// >> recepient
        /// </summary>
        public Kilt.NetApi.Generated.Model.primitive_types.H256 Recepient { get; set; }
        /// <summary>
        /// >> amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Amount { get; set; }
        /// <summary>
        /// >> timeout
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 Timeout { get; set; }
        /// <summary>
        /// >> token_gateway
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> TokenGateway { get; set; }
        /// <summary>
        /// >> relayer_fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RelayerFee { get; set; }
        /// <summary>
        /// >> call_data
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> CallData { get; set; }
        /// <summary>
        /// >> redeem
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool Redeem { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "TeleportParams";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(AssetId.Encode());
            result.AddRange(Destination.Encode());
            result.AddRange(Recepient.Encode());
            result.AddRange(Amount.Encode());
            result.AddRange(Timeout.Encode());
            result.AddRange(TokenGateway.Encode());
            result.AddRange(RelayerFee.Encode());
            result.AddRange(CallData.Encode());
            result.AddRange(Redeem.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            AssetId = new Kilt.NetApi.Generated.Model.staging_xcm.v4.location.Location();
            AssetId.Decode(byteArray, ref p);
            Destination = new Kilt.NetApi.Generated.Model.ismp.host.EnumStateMachine();
            Destination.Decode(byteArray, ref p);
            Recepient = new Kilt.NetApi.Generated.Model.primitive_types.H256();
            Recepient.Decode(byteArray, ref p);
            Amount = new Substrate.NetApi.Model.Types.Primitive.U128();
            Amount.Decode(byteArray, ref p);
            Timeout = new Substrate.NetApi.Model.Types.Primitive.U64();
            Timeout.Decode(byteArray, ref p);
            TokenGateway = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
            TokenGateway.Decode(byteArray, ref p);
            RelayerFee = new Substrate.NetApi.Model.Types.Primitive.U128();
            RelayerFee.Decode(byteArray, ref p);
            CallData = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>();
            CallData.Decode(byteArray, ref p);
            Redeem = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Redeem.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
