//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Kilt.NetApi.Generated.Model.attestation.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> add
        /// Create a new attestation.
        /// 
        /// The attester can optionally provide a reference to an existing
        /// delegation that will be saved along with the attestation itself in
        /// the form of an attested delegation.
        /// 
        /// The referenced CType hash must already be present on chain.
        /// 
        /// If an optional delegation id is provided, the dispatch origin must
        /// be the owner of the delegation. Otherwise, it could be any
        /// `DelegationEntityId`.
        /// 
        /// Emits `AttestationCreated`.
        /// </summary>
        add = 0,
        
        /// <summary>
        /// >> revoke
        /// Revoke an existing attestation.
        /// 
        /// The revoker must be either the creator of the attestation being
        /// revoked or an entity that in the delegation tree is an ancestor of
        /// the attester, i.e., it was either the delegator of the attester or
        /// an ancestor thereof.
        /// 
        /// Emits `AttestationRevoked`.
        /// </summary>
        revoke = 1,
        
        /// <summary>
        /// >> remove
        /// Remove an attestation.
        /// 
        /// The origin must be either the creator of the attestation or an
        /// entity which is an ancestor of the attester in the delegation tree,
        /// i.e., it was either the delegator of the attester or an ancestor
        /// thereof.
        /// 
        /// Always emits `AttestationRemoved` and emits `AttestationRevoked`
        /// only if the attestation was not revoked yet.
        /// </summary>
        remove = 2,
        
        /// <summary>
        /// >> reclaim_deposit
        /// Reclaim a storage deposit by removing an attestation
        /// 
        /// Always emits `AttestationRemoved` and emits `AttestationRevoked`
        /// only if the attestation was not revoked yet.
        /// </summary>
        reclaim_deposit = 3,
        
        /// <summary>
        /// >> change_deposit_owner
        /// Changes the deposit owner.
        /// 
        /// The balance that is reserved by the current deposit owner will be
        /// freed and balance of the new deposit owner will get reserved.
        /// 
        /// The subject of the call must be the attester who issues the
        /// attestation. The sender of the call will be the new deposit owner.
        /// </summary>
        change_deposit_owner = 4,
        
        /// <summary>
        /// >> update_deposit
        /// Updates the deposit amount to the current deposit rate.
        /// 
        /// The sender must be the deposit owner.
        /// </summary>
        update_deposit = 5,
    }
    
    /// <summary>
    /// >> 358 - Variant[attestation.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.primitive_types.H256, Kilt.NetApi.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Kilt.NetApi.Generated.Model.runtime_common.authorization.EnumPalletAuthorize>>>(Call.add);
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Kilt.NetApi.Generated.Model.runtime_common.authorization.EnumPalletAuthorize>>>(Call.revoke);
				AddTypeDecoder<BaseTuple<Kilt.NetApi.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Kilt.NetApi.Generated.Model.runtime_common.authorization.EnumPalletAuthorize>>>(Call.remove);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.primitive_types.H256>(Call.reclaim_deposit);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.primitive_types.H256>(Call.change_deposit_owner);
				AddTypeDecoder<Kilt.NetApi.Generated.Model.primitive_types.H256>(Call.update_deposit);
        }
    }
}
