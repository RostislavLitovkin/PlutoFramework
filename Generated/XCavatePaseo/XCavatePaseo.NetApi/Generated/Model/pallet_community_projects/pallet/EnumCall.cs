//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace XcavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> list_project
        /// Creates a new project and list the nfts for the project on the marketplace.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `nft_types`: The different nft types that the project creator wants to offer for the project.
        /// - `metadata`: Different metadatas for the different nft types.
        /// - `duration`: Amount of months that the project will need.
        /// - `price`: Amount of funds that needs to be raised.
        /// - `data`: Metadata of the project collection.
        /// 
        /// Emits `ProjectListed` event when succesfful
        /// </summary>
        list_project = 0,
        
        /// <summary>
        /// >> buy_nft
        /// Buy listed nft from the marketplace.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `collection_id`: The collection that the investor wants to buy from.
        /// - `item_id`: The item the investor wants to buy.
        /// 
        /// Emits `NftBought` event when succesfful
        /// </summary>
        buy_nft = 1,
        
        /// <summary>
        /// >> vote_on_milestone
        /// Nft holder vote on milestone during voting period.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `collection_id`: The collection for a project that the user wants to vote for.
        /// - `vote`: Must be either a Yes vote or a No vote.
        /// 
        /// Emits `VotedOnMilestone` event when succesfful
        /// </summary>
        vote_on_milestone = 2,
        
        /// <summary>
        /// >> bond_token
        /// A user can lock token to a project to raise funds.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `collection_id`: The collection for a project that the user wants to vote for.
        /// - `amount`: Amount of Xcav token to bond.
        /// 
        /// Emits `TokenBonded` event when succesfful
        /// </summary>
        bond_token = 3,
        
        /// <summary>
        /// >> claim_refunded_token
        /// A user can claim his token back after a project failed.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `collection_id`: The collection for a project that the user wants to claim from.
        /// 
        /// Emits `TokenRefunded` event when succesfful
        /// </summary>
        claim_refunded_token = 4,
        
        /// <summary>
        /// >> claim_bonding
        /// A user can unlock his bonded XCAV token once a project ended.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `collection_id`: The collection for a project that the user wants to claim from.
        /// 
        /// Emits `TokenUnbonded` event when succesfful
        /// </summary>
        claim_bonding = 5,
    }
    
    /// <summary>
    /// >> 350 - Variant[pallet_community_projects.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5>>(Call.list_project);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U64>>(Call.buy_nft);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.EnumVote>>(Call.vote_on_milestone);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.bond_token);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.claim_refunded_token);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.claim_bonding);
        }
    }
}
