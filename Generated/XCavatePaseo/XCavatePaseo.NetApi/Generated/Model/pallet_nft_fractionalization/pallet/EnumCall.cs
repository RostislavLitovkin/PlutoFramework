//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace XCavatePaseo.NetApi.Generated.Model.pallet_nft_fractionalization.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> fractionalize
        /// Lock the NFT and mint a new fungible asset.
        /// 
        /// The dispatch origin for this call must be Signed.
        /// The origin must be the owner of the NFT they are trying to lock.
        /// 
        /// `Deposit` funds of sender are reserved.
        /// 
        /// - `nft_collection_id`: The ID used to identify the collection of the NFT.
        /// Is used within the context of `pallet_nfts`.
        /// - `nft_id`: The ID used to identify the NFT within the given collection.
        /// Is used within the context of `pallet_nfts`.
        /// - `asset_id`: The ID of the new asset. It must not exist.
        /// Is used within the context of `pallet_assets`.
        /// - `beneficiary`: The account that will receive the newly created asset.
        /// - `fractions`: The total issuance of the newly created asset class.
        /// 
        /// Emits `NftFractionalized` event when successful.
        /// </summary>
        fractionalize = 0,
        
        /// <summary>
        /// >> unify
        /// Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
        /// 
        /// The dispatch origin for this call must be Signed.
        /// 
        /// `Deposit` funds will be returned to `asset_creator`.
        /// 
        /// - `nft_collection_id`: The ID used to identify the collection of the NFT.
        /// Is used within the context of `pallet_nfts`.
        /// - `nft_id`: The ID used to identify the NFT within the given collection.
        /// Is used within the context of `pallet_nfts`.
        /// - `asset_id`: The ID of the asset being returned and destroyed. Must match
        /// the original ID of the created asset, corresponding to the NFT.
        /// Is used within the context of `pallet_assets`.
        /// - `beneficiary`: The account that will receive the unified NFT.
        /// 
        /// Emits `NftUnified` event when successful.
        /// </summary>
        unify = 1,
    }
    
    /// <summary>
    /// >> 339 - Variant[pallet_nft_fractionalization.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.fractionalize);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>(Call.unify);
        }
    }
}
