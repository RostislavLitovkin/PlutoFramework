//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XCavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> GameModuleStorage
    /// </summary>
    public sealed class GameModuleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> GameModuleStorage Constructor
        /// </summary>
        public GameModuleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "CurrentRound"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "RoundActive"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "RoundChampion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "NextColorId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "CollectionColor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.EnumNftColor)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "NextListingId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "NextOfferId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "GameId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "Leaderboard"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "Users"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.User)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "GameInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.GameData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "Listings"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.ListingInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "Offers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.OfferInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "GameProperties"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameModule", "Admins"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT43)));
        }
        
        /// <summary>
        /// >> CurrentRoundParams
        ///  The id of the current round.
        /// </summary>
        public static string CurrentRoundParams()
        {
            return RequestGenerator.GetStorage("GameModule", "CurrentRound", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentRoundDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentRoundDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentRound
        ///  The id of the current round.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentRound(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.CurrentRoundParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RoundActiveParams
        ///  Bool if there is a round currently ongoing.
        /// </summary>
        public static string RoundActiveParams()
        {
            return RequestGenerator.GetStorage("GameModule", "RoundActive", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RoundActiveDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundActiveDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RoundActive
        ///  Bool if there is a round currently ongoing.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> RoundActive(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.RoundActiveParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RoundChampionParams
        ///  A mapping of a round to the winner of the round.
        /// </summary>
        public static string RoundChampionParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "RoundChampion", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RoundChampionDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundChampionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RoundChampion
        ///  A mapping of a round to the winner of the round.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> RoundChampion(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.RoundChampionParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextColorIdParams
        ///  The next item id in a collection.
        /// </summary>
        public static string NextColorIdParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "NextColorId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextColorIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextColorIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextColorId
        ///  The next item id in a collection.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextColorId(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.NextColorIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionColorParams
        ///  Mapping of a collection to the correlated color.
        /// </summary>
        public static string CollectionColorParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "CollectionColor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionColorDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionColorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionColor
        ///  Mapping of a collection to the correlated color.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.EnumNftColor> CollectionColor(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.CollectionColorParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.EnumNftColor>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextListingIdParams
        ///  The next id of listings.
        /// </summary>
        public static string NextListingIdParams()
        {
            return RequestGenerator.GetStorage("GameModule", "NextListingId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextListingIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextListingIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextListingId
        ///  The next id of listings.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextListingId(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.NextListingIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextOfferIdParams
        ///  The next id of offers.
        /// </summary>
        public static string NextOfferIdParams()
        {
            return RequestGenerator.GetStorage("GameModule", "NextOfferId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextOfferIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextOfferIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextOfferId
        ///  The next id of offers.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextOfferId(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.NextOfferIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GameIdParams
        ///  The next id of game.
        /// </summary>
        public static string GameIdParams()
        {
            return RequestGenerator.GetStorage("GameModule", "GameId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GameIdDefault
        /// Default value as hex string
        /// </summary>
        public static string GameIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> GameId
        ///  The next id of game.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> GameId(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.GameIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LeaderboardParams
        ///  The leaderboard of the game.
        /// </summary>
        public static string LeaderboardParams()
        {
            return RequestGenerator.GetStorage("GameModule", "Leaderboard", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LeaderboardDefault
        /// Default value as hex string
        /// </summary>
        public static string LeaderboardDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Leaderboard
        ///  The leaderboard of the game.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41> Leaderboard(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.LeaderboardParams();
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UsersParams
        ///  Mapping of an account id to the user data of the account.
        /// </summary>
        public static string UsersParams(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "Users", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UsersDefault
        /// Default value as hex string
        /// </summary>
        public static string UsersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Users
        ///  Mapping of an account id to the user data of the account.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.User> Users(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.UsersParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.User>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GameInfoParams
        ///  Mapping of game id to the game info.
        /// </summary>
        public static string GameInfoParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "GameInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GameInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string GameInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GameInfo
        ///  Mapping of game id to the game info.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.GameData> GameInfo(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.GameInfoParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.GameData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ListingsParams
        ///  Mapping of listing id to the listing data.
        /// </summary>
        public static string ListingsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "Listings", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListingsDefault
        /// Default value as hex string
        /// </summary>
        public static string ListingsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Listings
        ///  Mapping of listing id to the listing data.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.ListingInfo> Listings(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.ListingsParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.ListingInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OffersParams
        ///  Mapping of offer id to the offer data.
        /// </summary>
        public static string OffersParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("GameModule", "Offers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OffersDefault
        /// Default value as hex string
        /// </summary>
        public static string OffersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Offers
        ///  Mapping of offer id to the offer data.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.OfferInfo> Offers(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.OffersParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_game.types.OfferInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GamePropertiesParams
        ///  A List of test properties
        /// </summary>
        public static string GamePropertiesParams()
        {
            return RequestGenerator.GetStorage("GameModule", "GameProperties", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GamePropertiesDefault
        /// Default value as hex string
        /// </summary>
        public static string GamePropertiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GameProperties
        ///  A List of test properties
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42> GameProperties(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.GamePropertiesParams();
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AdminsParams
        ///  Vector of admins who can register users.
        /// </summary>
        public static string AdminsParams()
        {
            return RequestGenerator.GetStorage("GameModule", "Admins", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AdminsDefault
        /// Default value as hex string
        /// </summary>
        public static string AdminsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Admins
        ///  Vector of admins who can register users.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT43> Admins(string blockhash, CancellationToken token)
        {
            string parameters = GameModuleStorage.AdminsParams();
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT43>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> GameModuleCalls
    /// </summary>
    public sealed class GameModuleCalls
    {
        
        /// <summary>
        /// >> setup_game
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetupGame()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(54, "GameModule", 0, "setup_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_user
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterUser(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 player)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(player.Encode());
            return new Method(54, "GameModule", 1, "register_user", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> give_points
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method GivePoints(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 receiver, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(receiver.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(54, "GameModule", 2, "give_points", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> play_game
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PlayGame(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.EnumDifficultyLevel game_type)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_type.Encode());
            return new Method(54, "GameModule", 3, "play_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_answer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitAnswer(Substrate.NetApi.Model.Types.Primitive.U32 guess, Substrate.NetApi.Model.Types.Primitive.U32 game_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(guess.Encode());
            byteArray.AddRange(game_id.Encode());
            return new Method(54, "GameModule", 4, "submit_answer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> check_result
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CheckResult(Substrate.NetApi.Model.Types.Primitive.U64 guess, Substrate.NetApi.Model.Types.Primitive.U32 game_id, Substrate.NetApi.Model.Types.Primitive.U64 price, XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12 secret)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(guess.Encode());
            byteArray.AddRange(game_id.Encode());
            byteArray.AddRange(price.Encode());
            byteArray.AddRange(secret.Encode());
            return new Method(54, "GameModule", 5, "check_result", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> list_nft
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ListNft(Substrate.NetApi.Model.Types.Primitive.U32 collection_id, Substrate.NetApi.Model.Types.Primitive.U32 item_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            byteArray.AddRange(item_id.Encode());
            return new Method(54, "GameModule", 6, "list_nft", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delist_nft
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DelistNft(Substrate.NetApi.Model.Types.Primitive.U32 listing_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            return new Method(54, "GameModule", 7, "delist_nft", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> make_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MakeOffer(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U32 collection_id, Substrate.NetApi.Model.Types.Primitive.U32 item_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(collection_id.Encode());
            byteArray.AddRange(item_id.Encode());
            return new Method(54, "GameModule", 8, "make_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawOffer(Substrate.NetApi.Model.Types.Primitive.U32 offer_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            return new Method(54, "GameModule", 9, "withdraw_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> handle_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HandleOffer(Substrate.NetApi.Model.Types.Primitive.U32 offer_id, XCavatePaseo.NetApi.Generated.Model.pallet_game.types.EnumOffer offer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            byteArray.AddRange(offer.Encode());
            return new Method(54, "GameModule", 10, "handle_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_property
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddProperty(XCavatePaseo.NetApi.Generated.Model.pallet_game.types.PropertyInfoData property)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(property.Encode());
            return new Method(54, "GameModule", 11, "add_property", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_property
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveProperty(Substrate.NetApi.Model.Types.Primitive.U32 id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(54, "GameModule", 12, "remove_property", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_to_admins
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddToAdmins(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 new_admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_admin.Encode());
            return new Method(54, "GameModule", 13, "add_to_admins", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_from_admins
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveFromAdmins(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(admin.Encode());
            return new Method(54, "GameModule", 14, "remove_from_admins", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> request_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RequestToken()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(54, "GameModule", 15, "request_token", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> GameModuleConstants
    /// </summary>
    public sealed class GameModuleConstants
    {
        
        /// <summary>
        /// >> MaxProperty
        ///  The maximum amount of properties.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxProperty()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  The marketplace's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XCavatePaseo.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new XCavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F726C78646C");
            return result;
        }
        
        /// <summary>
        /// >> MaxOngoingGames
        ///  The maximum amount of games that can be played at the same time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxOngoingGames()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC8000000");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of data stored in string.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x10270000");
            return result;
        }
        
        /// <summary>
        /// >> LeaderboardLimit
        ///  The maximum length of leaderboard.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeaderboardLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxAdmins
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxAdmins()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> GameModuleErrors
    /// </summary>
    public enum GameModuleErrors
    {
        
        /// <summary>
        /// >> NotEnoughPoints
        /// A player has not enough points to play.
        /// </summary>
        NotEnoughPoints,
        
        /// <summary>
        /// >> ConversionError
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> ArithmeticOverflow
        /// </summary>
        ArithmeticOverflow,
        
        /// <summary>
        /// >> ArithmeticUnderflow
        /// </summary>
        ArithmeticUnderflow,
        
        /// <summary>
        /// >> MultiplyError
        /// </summary>
        MultiplyError,
        
        /// <summary>
        /// >> DivisionError
        /// </summary>
        DivisionError,
        
        /// <summary>
        /// >> TooManyGames
        /// There are too many games active.
        /// </summary>
        TooManyGames,
        
        /// <summary>
        /// >> NoThePlayer
        /// The caller has no permission.
        /// </summary>
        NoThePlayer,
        
        /// <summary>
        /// >> NoActiveGame
        /// This is not an active game.
        /// </summary>
        NoActiveGame,
        
        /// <summary>
        /// >> NoPermission
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> ListingDoesNotExist
        /// This listing is not listed.
        /// </summary>
        ListingDoesNotExist,
        
        /// <summary>
        /// >> OfferDoesNotExist
        /// This offer does not exist.
        /// </summary>
        OfferDoesNotExist,
        
        /// <summary>
        /// >> TooManyTest
        /// There are too many test properties.
        /// </summary>
        TooManyTest,
        
        /// <summary>
        /// >> NoProperty
        /// No property could be found.
        /// </summary>
        NoProperty,
        
        /// <summary>
        /// >> UserNotRegistered
        /// The user has not yet been registered.
        /// </summary>
        UserNotRegistered,
        
        /// <summary>
        /// >> TooManyPractise
        /// The user has already made 5 practise rounds.
        /// </summary>
        TooManyPractise,
        
        /// <summary>
        /// >> NoPractise
        /// The user has not yet made a practise round.
        /// </summary>
        NoPractise,
        
        /// <summary>
        /// >> InvalidIndex
        /// </summary>
        InvalidIndex,
        
        /// <summary>
        /// >> CollectionUnknown
        /// The color for this collection is not known.
        /// </summary>
        CollectionUnknown,
        
        /// <summary>
        /// >> NoActiveRound
        /// There is no active round at the moment.
        /// </summary>
        NoActiveRound,
        
        /// <summary>
        /// >> PlayerAlreadyRegistered
        /// The player is already registered.
        /// </summary>
        PlayerAlreadyRegistered,
        
        /// <summary>
        /// >> AccountAlreadyAdmin
        /// The account is already an admin.
        /// </summary>
        AccountAlreadyAdmin,
        
        /// <summary>
        /// >> NotAdmin
        /// This account is not an admin.
        /// </summary>
        NotAdmin,
        
        /// <summary>
        /// >> TooManyAdmins
        /// There are already enough admins.
        /// </summary>
        TooManyAdmins,
        
        /// <summary>
        /// >> CantRequestToken
        /// The user has to wait to request token.
        /// </summary>
        CantRequestToken,
        
        /// <summary>
        /// >> NoGuess
        /// There has been no guess from the player.
        /// </summary>
        NoGuess,
        
        /// <summary>
        /// >> NoPropertiesAvailable
        /// There are no properties available.
        /// </summary>
        NoPropertiesAvailable,
    }
}
