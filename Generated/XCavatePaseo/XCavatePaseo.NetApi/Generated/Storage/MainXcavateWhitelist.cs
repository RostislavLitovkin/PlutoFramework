//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> XcavateWhitelistStorage
    /// </summary>
    public sealed class XcavateWhitelistStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XcavateWhitelistStorage Constructor
        /// </summary>
        public XcavateWhitelistStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateWhitelist", "WhitelistedAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> WhitelistedAccountsParams
        ///  Mapping of an account to a bool.
        /// </summary>
        public static string WhitelistedAccountsParams(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XcavateWhitelist", "WhitelistedAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WhitelistedAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistedAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistedAccounts
        ///  Mapping of an account to a bool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> WhitelistedAccounts(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateWhitelistStorage.WhitelistedAccountsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XcavateWhitelistCalls
    /// </summary>
    public sealed class XcavateWhitelistCalls
    {
        
        /// <summary>
        /// >> add_to_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddToWhitelist(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 user)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(user.Encode());
            return new Method(111, "XcavateWhitelist", 0, "add_to_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_from_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveFromWhitelist(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 user)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(user.Encode());
            return new Method(111, "XcavateWhitelist", 1, "remove_from_whitelist", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> XcavateWhitelistConstants
    /// </summary>
    public sealed class XcavateWhitelistConstants
    {
    }
    
    /// <summary>
    /// >> XcavateWhitelistErrors
    /// </summary>
    public enum XcavateWhitelistErrors
    {
        
        /// <summary>
        /// >> AccountAlreadyWhitelisted
        /// The user is already registered in the whitelist.
        /// </summary>
        AccountAlreadyWhitelisted,
        
        /// <summary>
        /// >> UserNotInWhitelist
        /// The user has not been registered in the whitelist.
        /// </summary>
        UserNotInWhitelist,
        
        /// <summary>
        /// >> TooManyUsers
        /// Too many users are already in the whitelist.
        /// </summary>
        TooManyUsers,
    }
}
