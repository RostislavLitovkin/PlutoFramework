//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XCavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CommunityProjectStorage
    /// </summary>
    public sealed class CommunityProjectStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CommunityProjectStorage Constructor
        /// </summary>
        public CommunityProjectStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "OngoingNftDetails"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.NftDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "OngoingProjects"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.ProjectDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "EndedProjects"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.EndedProjectDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "ListedNftTypes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8>), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT40)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "MilestonePeriodExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "VotingPeriodExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "OngoingVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "VotedUser"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "NftHolder"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "ProjectBonding"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "UserBondedAmount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "TotalBonded"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommunityProject", "VotingPower"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> OngoingNftDetailsParams
        ///  Mapping from the nft to the nft details.
        /// </summary>
        public static string OngoingNftDetailsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "OngoingNftDetails", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> OngoingNftDetailsDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingNftDetailsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingNftDetails
        ///  Mapping from the nft to the nft details.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.NftDetails> OngoingNftDetails(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.OngoingNftDetailsParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.NftDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingProjectsParams
        ///  Mapping from collection id to the project.
        /// </summary>
        public static string OngoingProjectsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "OngoingProjects", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingProjectsDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingProjectsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingProjects
        ///  Mapping from collection id to the project.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.ProjectDetails> OngoingProjects(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.OngoingProjectsParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.ProjectDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EndedProjectsParams
        ///  Mapping from collection id to ended project.
        /// </summary>
        public static string EndedProjectsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "EndedProjects", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> EndedProjectsDefault
        /// Default value as hex string
        /// </summary>
        public static string EndedProjectsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EndedProjects
        ///  Mapping from collection id to ended project.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.EndedProjectDetails> EndedProjects(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.EndedProjectsParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.EndedProjectDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ListedNftTypesParams
        ///  Mapping from the collection and nft type to the listed nfts.
        /// </summary>
        public static string ListedNftTypesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "ListedNftTypes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ListedNftTypesDefault
        /// Default value as hex string
        /// </summary>
        public static string ListedNftTypesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListedNftTypes
        ///  Mapping from the collection and nft type to the listed nfts.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT40> ListedNftTypes(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.ListedNftTypesParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT40>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MilestonePeriodExpiringParams
        ///  Stores the project keys and round types ending on a given block for milestone period.
        /// </summary>
        public static string MilestonePeriodExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "MilestonePeriodExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MilestonePeriodExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string MilestonePeriodExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MilestonePeriodExpiring
        ///  Stores the project keys and round types ending on a given block for milestone period.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41> MilestonePeriodExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.MilestonePeriodExpiringParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotingPeriodExpiringParams
        ///  Stores the project keys and round types ending on a given block for milestone period.
        /// </summary>
        public static string VotingPeriodExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "VotingPeriodExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VotingPeriodExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingPeriodExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VotingPeriodExpiring
        ///  Stores the project keys and round types ending on a given block for milestone period.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41> VotingPeriodExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.VotingPeriodExpiringParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT41>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingVotesParams
        ///  Mapping of ongoing votes.
        /// </summary>
        public static string OngoingVotesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "OngoingVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingVotes
        ///  Mapping of ongoing votes.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.VoteStats> OngoingVotes(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.OngoingVotesParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotedUserParams
        ///  Mapping of collection to the users.
        /// </summary>
        public static string VotedUserParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "VotedUser", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> VotedUserDefault
        /// Default value as hex string
        /// </summary>
        public static string VotedUserDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VotedUser
        ///  Mapping of collection to the users.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> VotedUser(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.VotedUserParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NftHolderParams
        ///  Mapping of a collection to the nft holder.
        /// </summary>
        public static string NftHolderParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "NftHolder", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> NftHolderDefault
        /// Default value as hex string
        /// </summary>
        public static string NftHolderDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NftHolder
        ///  Mapping of a collection to the nft holder.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> NftHolder(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.NftHolderParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProjectBondingParams
        ///  Mapping of a collection to the token bonder.
        /// </summary>
        public static string ProjectBondingParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "ProjectBonding", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ProjectBondingDefault
        /// Default value as hex string
        /// </summary>
        public static string ProjectBondingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProjectBonding
        ///  Mapping of a collection to the token bonder.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ProjectBonding(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.ProjectBondingParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserBondedAmountParams
        ///  Mapping of a accountid to the total bonded amount of a user.
        /// </summary>
        public static string UserBondedAmountParams(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "UserBondedAmount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserBondedAmountDefault
        /// Default value as hex string
        /// </summary>
        public static string UserBondedAmountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserBondedAmount
        ///  Mapping of a accountid to the total bonded amount of a user.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> UserBondedAmount(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.UserBondedAmountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalBondedParams
        ///  Total Bonded amount.
        /// </summary>
        public static string TotalBondedParams()
        {
            return RequestGenerator.GetStorage("CommunityProject", "TotalBonded", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalBondedDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalBondedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalBonded
        ///  Total Bonded amount.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalBonded(string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.TotalBondedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotingPowerParams
        ///  Mapping of collection id and account id to the voting power.
        /// </summary>
        public static string VotingPowerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("CommunityProject", "VotingPower", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> VotingPowerDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingPowerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VotingPower
        ///  Mapping of collection id and account id to the voting power.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> VotingPower(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = CommunityProjectStorage.VotingPowerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CommunityProjectCalls
    /// </summary>
    public sealed class CommunityProjectCalls
    {
        
        /// <summary>
        /// >> list_project
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ListProject(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14 nft_types, XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15 metadata, Substrate.NetApi.Model.Types.Primitive.U32 duration, Substrate.NetApi.Model.Types.Primitive.U128 price, XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(nft_types.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(duration.Encode());
            byteArray.AddRange(price.Encode());
            byteArray.AddRange(data.Encode());
            return new Method(123, "CommunityProject", 0, "list_project", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_nft
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuyNft(Substrate.NetApi.Model.Types.Primitive.U32 collection_id, Substrate.NetApi.Model.Types.Primitive.U8 nft_type, Substrate.NetApi.Model.Types.Primitive.U64 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            byteArray.AddRange(nft_type.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(123, "CommunityProject", 1, "buy_nft", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_milestone
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnMilestone(Substrate.NetApi.Model.Types.Primitive.U32 collection_id, XCavatePaseo.NetApi.Generated.Model.pallet_community_projects.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(123, "CommunityProject", 2, "vote_on_milestone", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BondToken(Substrate.NetApi.Model.Types.Primitive.U32 collection_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(123, "CommunityProject", 3, "bond_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_refunded_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRefundedToken(Substrate.NetApi.Model.Types.Primitive.U32 collection_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            return new Method(123, "CommunityProject", 4, "claim_refunded_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_bonding
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimBonding(Substrate.NetApi.Model.Types.Primitive.U32 collection_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            return new Method(123, "CommunityProject", 5, "claim_bonding", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CommunityProjectConstants
    /// </summary>
    public sealed class CommunityProjectConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The marketplace's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XCavatePaseo.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new XCavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F636D70726A");
            return result;
        }
        
        /// <summary>
        /// >> MaxOngoingProjects
        ///  The maximum amount of projects that can run at the same time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxOngoingProjects()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFA000000");
            return result;
        }
        
        /// <summary>
        /// >> MinimumRemainingAmount
        ///  Serves as a safeguard to prevent users from locking their entire free balance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumRemainingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00407A10F35A00000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CommunityProjectErrors
    /// </summary>
    public enum CommunityProjectErrors
    {
        
        /// <summary>
        /// >> TooManyListedNfts
        /// Max amount of listed nfts reached.
        /// </summary>
        TooManyListedNfts,
        
        /// <summary>
        /// >> TooManyNfts
        /// Too many nfts for this collection.
        /// </summary>
        TooManyNfts,
        
        /// <summary>
        /// >> NftNotFound
        /// The Nft has not been found.
        /// </summary>
        NftNotFound,
        
        /// <summary>
        /// >> InvalidIndex
        /// This index is not taken.
        /// </summary>
        InvalidIndex,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// The buyer doesn't have enough funds.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> UnknownCollection
        /// A collection is unknown.
        /// </summary>
        UnknownCollection,
        
        /// <summary>
        /// >> ConversionError
        /// Error during type conversion.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> TooManyProjects
        /// Maximum amount of projects already exist.
        /// </summary>
        TooManyProjects,
        
        /// <summary>
        /// >> AlreadyVoted
        /// A user has already voted during a voting period.
        /// </summary>
        AlreadyVoted,
        
        /// <summary>
        /// >> TooManyVoters
        /// Maximum amount of voters has been reached.
        /// </summary>
        TooManyVoters,
        
        /// <summary>
        /// >> InsufficientPermission
        /// No permission.
        /// </summary>
        InsufficientPermission,
        
        /// <summary>
        /// >> NoOngoingVotingPeriod
        /// No voting period ongoing.
        /// </summary>
        NoOngoingVotingPeriod,
        
        /// <summary>
        /// >> NoFundsRemaining
        /// This account has no voting power.
        /// </summary>
        NoFundsRemaining,
        
        /// <summary>
        /// >> WrongAmountOfMetadata
        /// Metadata is not the same amount as nft types.
        /// </summary>
        WrongAmountOfMetadata,
        
        /// <summary>
        /// >> DurationMustBeHigherThanZero
        /// The Duration must be at least one.
        /// </summary>
        DurationMustBeHigherThanZero,
        
        /// <summary>
        /// >> PriceCannotBeReached
        /// The target price is impossible to reach.
        /// </summary>
        PriceCannotBeReached,
        
        /// <summary>
        /// >> UserNotWhitelisted
        /// User has not passed the kyc.
        /// </summary>
        UserNotWhitelisted,
        
        /// <summary>
        /// >> ProjectOngoing
        /// Bonding not possible since project is ongoing.
        /// </summary>
        ProjectOngoing,
        
        /// <summary>
        /// >> NotEnoughBondingFundsAvailable
        /// There are not enough funds available in the bonding pool.
        /// </summary>
        NotEnoughBondingFundsAvailable,
        
        /// <summary>
        /// >> ProjectCanOnlyHave10PercentBonding
        /// A Project can only be financed by 10 percent bonding.
        /// </summary>
        ProjectCanOnlyHave10PercentBonding,
        
        /// <summary>
        /// >> NftTypeNotFound
        /// The nft type does not exist.
        /// </summary>
        NftTypeNotFound,
        
        /// <summary>
        /// >> NotEnoughNftsAvailable
        /// There are not enough nfts of this type available.
        /// </summary>
        NotEnoughNftsAvailable,
        
        /// <summary>
        /// >> NoBondingYet
        /// The user did not bond any token yet.
        /// </summary>
        NoBondingYet,
    }
}
