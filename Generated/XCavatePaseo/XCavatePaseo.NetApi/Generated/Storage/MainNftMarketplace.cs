//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> NftMarketplaceStorage
    /// </summary>
    public sealed class NftMarketplaceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> NftMarketplaceStorage Constructor
        /// </summary>
        public NftMarketplaceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "NextNftId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "NextAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "NextRegionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "NextOfferId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "LocationRegistration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "NextListingId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "RegionCollections"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "RegisteredNftDetails"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "OngoingObjectListing"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftListingDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "ListedToken"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "TokenBuyer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "TokenOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "TokenListings"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.TokenListingDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "PropertyOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "PropertyOwnerToken"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "AssetIdDetails"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.AssetDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftMarketplace", "OngoingOffer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.OfferDetails)));
        }
        
        /// <summary>
        /// >> NextNftIdParams
        ///  Id for the next nft in a collection.
        /// </summary>
        public static string NextNftIdParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "NextNftId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextNftIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextNftIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextNftId
        ///  Id for the next nft in a collection.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextNftId(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.NextNftIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextAssetIdParams
        ///  Id of the possible next asset that would be used for
        ///  Nft fractionalization.
        /// </summary>
        public static string NextAssetIdParams()
        {
            return RequestGenerator.GetStorage("NftMarketplace", "NextAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextAssetIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextAssetId
        ///  Id of the possible next asset that would be used for
        ///  Nft fractionalization.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextAssetId(string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.NextAssetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextRegionIdParams
        ///  Id of the next region.
        /// </summary>
        public static string NextRegionIdParams()
        {
            return RequestGenerator.GetStorage("NftMarketplace", "NextRegionId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextRegionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextRegionIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextRegionId
        ///  Id of the next region.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextRegionId(string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.NextRegionIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextOfferIdParams
        ///  Id for the next offer for a listing.
        /// </summary>
        public static string NextOfferIdParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "NextOfferId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextOfferIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextOfferIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextOfferId
        ///  Id for the next offer for a listing.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextOfferId(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.NextOfferIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LocationRegistrationParams
        ///  True if a location is registered.
        /// </summary>
        public static string LocationRegistrationParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8> key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "LocationRegistration", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LocationRegistrationDefault
        /// Default value as hex string
        /// </summary>
        public static string LocationRegistrationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocationRegistration
        ///  True if a location is registered.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> LocationRegistration(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8> key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.LocationRegistrationParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextListingIdParams
        ///  The Id for the next token listing.
        /// </summary>
        public static string NextListingIdParams()
        {
            return RequestGenerator.GetStorage("NftMarketplace", "NextListingId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextListingIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextListingIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextListingId
        ///  The Id for the next token listing.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextListingId(string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.NextListingIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionCollectionsParams
        ///  Mapping of a collection id to the region.
        /// </summary>
        public static string RegionCollectionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "RegionCollections", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionCollectionsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionCollectionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionCollections
        ///  Mapping of a collection id to the region.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> RegionCollections(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.RegionCollectionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegisteredNftDetailsParams
        ///  Mapping from the Nft to the Nft details.
        /// </summary>
        public static string RegisteredNftDetailsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "RegisteredNftDetails", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> RegisteredNftDetailsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegisteredNftDetailsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegisteredNftDetails
        ///  Mapping from the Nft to the Nft details.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftDetails> RegisteredNftDetails(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.RegisteredNftDetailsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingObjectListingParams
        ///  Mapping from the nft to the ongoing nft listing details.
        /// </summary>
        public static string OngoingObjectListingParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "OngoingObjectListing", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingObjectListingDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingObjectListingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingObjectListing
        ///  Mapping from the nft to the ongoing nft listing details.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftListingDetails> OngoingObjectListing(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.OngoingObjectListingParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.NftListingDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ListedTokenParams
        ///  Mapping of the nft to the amount of listed token.
        /// </summary>
        public static string ListedTokenParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "ListedToken", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListedTokenDefault
        /// Default value as hex string
        /// </summary>
        public static string ListedTokenDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListedToken
        ///  Mapping of the nft to the amount of listed token.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ListedToken(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.ListedTokenParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenBuyerParams
        ///  Mapping of the listing to the buyer of the sold token.
        /// </summary>
        public static string TokenBuyerParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "TokenBuyer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenBuyerDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenBuyerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenBuyer
        ///  Mapping of the listing to the buyer of the sold token.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> TokenBuyer(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.TokenBuyerParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenOwnerParams
        ///  Double mapping of the account id of the token owner
        ///  and the listing to the amount of token.
        /// </summary>
        public static string TokenOwnerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "TokenOwner", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TokenOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenOwnerDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TokenOwner
        ///  Double mapping of the account id of the token owner
        ///  and the listing to the amount of token.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TokenOwner(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.TokenOwnerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenListingsParams
        ///  Mapping of the listing id to the listing details of a token listing.
        /// </summary>
        public static string TokenListingsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "TokenListings", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenListingsDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenListingsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenListings
        ///  Mapping of the listing id to the listing details of a token listing.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.TokenListingDetails> TokenListings(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.TokenListingsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.TokenListingDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertyOwnerParams
        ///  Mapping of the assetid to the vector of token holder.
        /// </summary>
        public static string PropertyOwnerParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "PropertyOwner", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PropertyOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertyOwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PropertyOwner
        ///  Mapping of the assetid to the vector of token holder.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> PropertyOwner(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.PropertyOwnerParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertyOwnerTokenParams
        ///  Mapping of assetid and accountid to the amount of token an account is holding of the asset.
        /// </summary>
        public static string PropertyOwnerTokenParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "PropertyOwnerToken", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PropertyOwnerTokenDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertyOwnerTokenDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PropertyOwnerToken
        ///  Mapping of assetid and accountid to the amount of token an account is holding of the asset.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PropertyOwnerToken(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.PropertyOwnerTokenParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetIdDetailsParams
        ///  Mapping of the assetid to the collectionid and nftid.
        /// </summary>
        public static string AssetIdDetailsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "AssetIdDetails", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetIdDetailsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetIdDetailsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetIdDetails
        ///  Mapping of the assetid to the collectionid and nftid.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.AssetDetails> AssetIdDetails(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.AssetIdDetailsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.AssetDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingOfferParams
        ///  Mapping from listing to offer details.
        /// </summary>
        public static string OngoingOfferParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("NftMarketplace", "OngoingOffer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> OngoingOfferDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingOfferDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingOffer
        ///  Mapping from listing to offer details.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.OfferDetails> OngoingOffer(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = NftMarketplaceStorage.OngoingOfferParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.OfferDetails>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> NftMarketplaceCalls
    /// </summary>
    public sealed class NftMarketplaceCalls
    {
        
        /// <summary>
        /// >> create_new_region
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateNewRegion()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(118, "NftMarketplace", 0, "create_new_region", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_new_location
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateNewLocation(Substrate.NetApi.Model.Types.Primitive.U32 region, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            byteArray.AddRange(location.Encode());
            return new Method(118, "NftMarketplace", 1, "create_new_location", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> list_object
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ListObject(Substrate.NetApi.Model.Types.Primitive.U32 region, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 location, Substrate.NetApi.Model.Types.Primitive.U128 token_price, Substrate.NetApi.Model.Types.Primitive.U32 token_amount, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(token_price.Encode());
            byteArray.AddRange(token_amount.Encode());
            byteArray.AddRange(data.Encode());
            return new Method(118, "NftMarketplace", 2, "list_object", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuyToken(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(118, "NftMarketplace", 3, "buy_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> relist_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RelistToken(Substrate.NetApi.Model.Types.Primitive.U32 region, Substrate.NetApi.Model.Types.Primitive.U32 item_id, Substrate.NetApi.Model.Types.Primitive.U128 token_price, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            byteArray.AddRange(item_id.Encode());
            byteArray.AddRange(token_price.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(118, "NftMarketplace", 4, "relist_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_relisted_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuyRelistedToken(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(118, "NftMarketplace", 5, "buy_relisted_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> make_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MakeOffer(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U128 offer_price, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(offer_price.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(118, "NftMarketplace", 6, "make_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> handle_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HandleOffer(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U32 offer_id, XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet.EnumOffer offer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(offer_id.Encode());
            byteArray.AddRange(offer.Encode());
            return new Method(118, "NftMarketplace", 7, "handle_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_offer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelOffer(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U32 offer_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(offer_id.Encode());
            return new Method(118, "NftMarketplace", 8, "cancel_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upgrade_listing
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpgradeListing(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U128 new_price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(new_price.Encode());
            return new Method(118, "NftMarketplace", 9, "upgrade_listing", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upgrade_object
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpgradeObject(Substrate.NetApi.Model.Types.Primitive.U32 listing_id, Substrate.NetApi.Model.Types.Primitive.U128 new_price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            byteArray.AddRange(new_price.Encode());
            return new Method(118, "NftMarketplace", 10, "upgrade_object", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delist_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DelistToken(Substrate.NetApi.Model.Types.Primitive.U32 listing_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(listing_id.Encode());
            return new Method(118, "NftMarketplace", 11, "delist_token", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NftMarketplaceConstants
    /// </summary>
    public sealed class NftMarketplaceConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The marketplace's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E66747863");
            return result;
        }
        
        /// <summary>
        /// >> MaxNftToken
        ///  The maximum amount of token of a nft.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNftToken()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFA000000");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryId
        ///  The Trasury's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId TreasuryId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F7472737279");
            return result;
        }
        
        /// <summary>
        /// >> CommunityProjectsId
        ///  The CommunityProjects's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId CommunityProjectsId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F636D70726A");
            return result;
        }
        
        /// <summary>
        /// >> PostcodeLimit
        ///  The maximum length of data stored in for post codes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PostcodeLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> NftMarketplaceErrors
    /// </summary>
    public enum NftMarketplaceErrors
    {
        
        /// <summary>
        /// >> InvalidIndex
        /// This index is not taken.
        /// </summary>
        InvalidIndex,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// The buyer doesn't have enough funds.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> NotEnoughTokenAvailable
        /// Not enough token available to buy.
        /// </summary>
        NotEnoughTokenAvailable,
        
        /// <summary>
        /// >> ConversionError
        /// Error by converting a type.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> DivisionError
        /// Error by dividing a number.
        /// </summary>
        DivisionError,
        
        /// <summary>
        /// >> MultiplyError
        /// Error by multiplying a number.
        /// </summary>
        MultiplyError,
        
        /// <summary>
        /// >> NoPermission
        /// No sufficient permission.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> SpvAlreadyCreated
        /// The SPV has already been created.
        /// </summary>
        SpvAlreadyCreated,
        
        /// <summary>
        /// >> UserNotWhitelisted
        /// User did not pass the kyc.
        /// </summary>
        UserNotWhitelisted,
        
        /// <summary>
        /// >> ArithmeticUnderflow
        /// </summary>
        ArithmeticUnderflow,
        
        /// <summary>
        /// >> ArithmeticOverflow
        /// </summary>
        ArithmeticOverflow,
        
        /// <summary>
        /// >> TokenNotForSale
        /// The token is not for sale.
        /// </summary>
        TokenNotForSale,
        
        /// <summary>
        /// >> NftNotFound
        /// The nft has not been registered on the marketplace.
        /// </summary>
        NftNotFound,
        
        /// <summary>
        /// >> TooManyTokenBuyer
        /// There are already too many token buyer.
        /// </summary>
        TooManyTokenBuyer,
        
        /// <summary>
        /// >> RegionUnknown
        /// This Region is not known.
        /// </summary>
        RegionUnknown,
        
        /// <summary>
        /// >> LocationRegistered
        /// The location is already registered.
        /// </summary>
        LocationRegistered,
        
        /// <summary>
        /// >> LocationUnknown
        /// The location is not registered.
        /// </summary>
        LocationUnknown,
        
        /// <summary>
        /// >> TooManyToken
        /// The object can not be divided in so many token.
        /// </summary>
        TooManyToken,
    }
}
