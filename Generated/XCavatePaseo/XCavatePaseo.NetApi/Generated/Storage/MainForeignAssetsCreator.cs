//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ForeignAssetsCreatorStorage
    /// </summary>
    public sealed class ForeignAssetsCreatorStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ForeignAssetsCreatorStorage Constructor
        /// </summary>
        public ForeignAssetsCreatorStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssetsCreator", "AssetIdToForeignAsset"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssetsCreator", "ForeignAssetToAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> AssetIdToForeignAssetParams
        ///  Mapping from an asset id to a Foreign asset type.
        ///  This is mostly used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public static string AssetIdToForeignAssetParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ForeignAssetsCreator", "AssetIdToForeignAsset", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetIdToForeignAssetDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetIdToForeignAssetDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetIdToForeignAsset
        ///  Mapping from an asset id to a Foreign asset type.
        ///  This is mostly used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location> AssetIdToForeignAsset(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ForeignAssetsCreatorStorage.AssetIdToForeignAssetParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ForeignAssetToAssetIdParams
        ///  Reverse mapping of AssetIdToForeignAsset. Mapping from a foreign asset to an asset id.
        ///  This is mostly used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public static string ForeignAssetToAssetIdParams(XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location key)
        {
            return RequestGenerator.GetStorage("ForeignAssetsCreator", "ForeignAssetToAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ForeignAssetToAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignAssetToAssetIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForeignAssetToAssetId
        ///  Reverse mapping of AssetIdToForeignAsset. Mapping from a foreign asset to an asset id.
        ///  This is mostly used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ForeignAssetToAssetId(XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location key, string blockhash, CancellationToken token)
        {
            string parameters = ForeignAssetsCreatorStorage.ForeignAssetToAssetIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ForeignAssetsCreatorCalls
    /// </summary>
    public sealed class ForeignAssetsCreatorCalls
    {
        
        /// <summary>
        /// >> create_foreign_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateForeignAsset(XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location foreign_asset, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin, Substrate.NetApi.Model.Types.Primitive.Bool is_sufficient, Substrate.NetApi.Model.Types.Primitive.U128 min_balance)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(foreign_asset.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(is_sufficient.Encode());
            byteArray.AddRange(min_balance.Encode());
            return new Method(76, "ForeignAssetsCreator", 0, "create_foreign_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_existing_asset_type
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ChangeExistingAssetType(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, XcavatePaseo.NetApi.Generated.Model.staging_xcm.v4.location.Location new_foreign_asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(new_foreign_asset.Encode());
            return new Method(76, "ForeignAssetsCreator", 1, "change_existing_asset_type", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_existing_asset_type
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveExistingAssetType(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(76, "ForeignAssetsCreator", 2, "remove_existing_asset_type", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> destroy_foreign_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DestroyForeignAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(76, "ForeignAssetsCreator", 3, "destroy_foreign_asset", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ForeignAssetsCreatorConstants
    /// </summary>
    public sealed class ForeignAssetsCreatorConstants
    {
    }
    
    /// <summary>
    /// >> ForeignAssetsCreatorErrors
    /// </summary>
    public enum ForeignAssetsCreatorErrors
    {
        
        /// <summary>
        /// >> AssetAlreadyExists
        /// </summary>
        AssetAlreadyExists,
        
        /// <summary>
        /// >> AssetDoesNotExist
        /// </summary>
        AssetDoesNotExist,
    }
}
