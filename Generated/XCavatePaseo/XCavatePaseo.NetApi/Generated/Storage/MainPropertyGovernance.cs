//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XCavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> PropertyGovernanceStorage
    /// </summary>
    public sealed class PropertyGovernanceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> PropertyGovernanceStorage Constructor
        /// </summary>
        public PropertyGovernanceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ProposalCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "InqueryCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "Proposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "Inqueries"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Inquery)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "OngoingVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ProposalVoter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "OngoingInqueryVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "InqueryVoter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "RoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "InqueryRoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36)));
        }
        
        /// <summary>
        /// >> ProposalCountParams
        ///  Number of proposals that have been made.
        /// </summary>
        public static string ProposalCountParams()
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ProposalCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ProposalCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ProposalCount
        ///  Number of proposals that have been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ProposalCount(string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InqueryCountParams
        ///  Number of inqueries that have been made.
        /// </summary>
        public static string InqueryCountParams()
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "InqueryCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> InqueryCountDefault
        /// Default value as hex string
        /// </summary>
        public static string InqueryCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> InqueryCount
        ///  Number of inqueries that have been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> InqueryCount(string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.InqueryCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalsParams
        ///  Proposals that have been made.
        /// </summary>
        public static string ProposalsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "Proposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Proposals
        ///  Proposals that have been made.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal> Proposals(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalsParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InqueriesParams
        ///  Inqueries that have been made.
        /// </summary>
        public static string InqueriesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "Inqueries", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InqueriesDefault
        /// Default value as hex string
        /// </summary>
        public static string InqueriesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Inqueries
        ///  Inqueries that have been made.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Inquery> Inqueries(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.InqueriesParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Inquery>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingVotesParams
        ///  Mapping of ongoing votes.
        /// </summary>
        public static string OngoingVotesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "OngoingVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingVotes
        ///  Mapping of ongoing votes.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats> OngoingVotes(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.OngoingVotesParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalVoterParams
        ///  Mapping from proposal to vector of users who voted.
        /// </summary>
        public static string ProposalVoterParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ProposalVoter", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalVoterDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalVoterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalVoter
        ///  Mapping from proposal to vector of users who voted.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35> ProposalVoter(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalVoterParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingInqueryVotesParams
        ///  Mapping of ongoing votes about inqueries.
        /// </summary>
        public static string OngoingInqueryVotesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "OngoingInqueryVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingInqueryVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingInqueryVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingInqueryVotes
        ///  Mapping of ongoing votes about inqueries.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats> OngoingInqueryVotes(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.OngoingInqueryVotesParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InqueryVoterParams
        ///  Mapping from inquery to vector of users who voted.
        /// </summary>
        public static string InqueryVoterParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "InqueryVoter", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InqueryVoterDefault
        /// Default value as hex string
        /// </summary>
        public static string InqueryVoterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> InqueryVoter
        ///  Mapping from inquery to vector of users who voted.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35> InqueryVoter(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.InqueryVoterParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for proposal votings.
        /// </summary>
        public static string RoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "RoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RoundsExpiring
        ///  Stores the project keys and round types ending on a given block for proposal votings.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36> RoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.RoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InqueryRoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for inquery votings.
        /// </summary>
        public static string InqueryRoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "InqueryRoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InqueryRoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string InqueryRoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> InqueryRoundsExpiring
        ///  Stores the project keys and round types ending on a given block for inquery votings.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36> InqueryRoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.InqueryRoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> PropertyGovernanceCalls
    /// </summary>
    public sealed class PropertyGovernanceCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Propose(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(120, "PropertyGovernance", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> inquery_against_letting_agent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InqueryAgainstLettingAgent(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(120, "PropertyGovernance", 1, "inquery_against_letting_agent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnProposal(Substrate.NetApi.Model.Types.Primitive.U32 proposal_id, XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(120, "PropertyGovernance", 2, "vote_on_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_letting_agent_inquery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnLettingAgentInquery(Substrate.NetApi.Model.Types.Primitive.U32 inquery_id, XCavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(inquery_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(120, "PropertyGovernance", 3, "vote_on_letting_agent_inquery", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PropertyGovernanceConstants
    /// </summary>
    public sealed class PropertyGovernanceConstants
    {
    }
    
    /// <summary>
    /// >> PropertyGovernanceErrors
    /// </summary>
    public enum PropertyGovernanceErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// The user is not a property owner and has no permission to propose.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> TooManyProposals
        /// There are already too many proposals in the ending block.
        /// </summary>
        TooManyProposals,
        
        /// <summary>
        /// >> NotOngoing
        /// The proposal is not ongoing.
        /// </summary>
        NotOngoing,
        
        /// <summary>
        /// >> TooManyVotes
        /// Too many user voted already.
        /// </summary>
        TooManyVotes,
        
        /// <summary>
        /// >> AlreadyVoted
        /// The user already voted.
        /// </summary>
        AlreadyVoted,
        
        /// <summary>
        /// >> NoAssetFound
        /// The assets details could not be found.
        /// </summary>
        NoAssetFound,
    }
}
