//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XCavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> AsyncBackingStorage
    /// </summary>
    public sealed class AsyncBackingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AsyncBackingStorage Constructor
        /// </summary>
        public AsyncBackingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AsyncBacking", "SlotInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<XCavatePaseo.NetApi.Generated.Model.sp_consensus_slots.Slot, Substrate.NetApi.Model.Types.Primitive.U32>)));
        }
        
        /// <summary>
        /// >> SlotInfoParams
        ///  First tuple element is the highest slot that has been seen in the history of this chain.
        ///  Second tuple element is the number of authored blocks so far.
        ///  This is a strictly-increasing value if T::AllowMultipleBlocksPerSlot = false.
        /// </summary>
        public static string SlotInfoParams()
        {
            return RequestGenerator.GetStorage("AsyncBacking", "SlotInfo", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SlotInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string SlotInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SlotInfo
        ///  First tuple element is the highest slot that has been seen in the history of this chain.
        ///  Second tuple element is the number of authored blocks so far.
        ///  This is a strictly-increasing value if T::AllowMultipleBlocksPerSlot = false.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<XCavatePaseo.NetApi.Generated.Model.sp_consensus_slots.Slot, Substrate.NetApi.Model.Types.Primitive.U32>> SlotInfo(string blockhash, CancellationToken token)
        {
            string parameters = AsyncBackingStorage.SlotInfoParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<XCavatePaseo.NetApi.Generated.Model.sp_consensus_slots.Slot, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AsyncBackingCalls
    /// </summary>
    public sealed class AsyncBackingCalls
    {
    }
    
    /// <summary>
    /// >> AsyncBackingConstants
    /// </summary>
    public sealed class AsyncBackingConstants
    {
        
        /// <summary>
        /// >> ExpectedBlockTime
        ///  Purely informative, but used by mocking tools like chospticks to allow knowing how to mock
        ///  blocks
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 ExpectedBlockTime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x7017000000000000");
            return result;
        }
    }
}
