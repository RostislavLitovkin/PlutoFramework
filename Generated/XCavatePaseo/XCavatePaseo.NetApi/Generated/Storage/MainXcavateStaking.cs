//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XCavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> XcavateStakingStorage
    /// </summary>
    public sealed class XcavateStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XcavateStakingStorage Constructor
        /// </summary>
        public XcavateStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "StakingCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "QueueCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "Ledger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.LedgerAccount)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "QueueLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.QueueLedgerAccount)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "ActiveStakings"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "QueueStaking"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "TotalStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateStaking", "AmountLocked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> StakingCountParams
        ///  Number of stakings that has been made.
        /// </summary>
        public static string StakingCountParams()
        {
            return RequestGenerator.GetStorage("XcavateStaking", "StakingCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StakingCountDefault
        /// Default value as hex string
        /// </summary>
        public static string StakingCountDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> StakingCount
        ///  Number of stakings that has been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> StakingCount(string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.StakingCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> QueueCountParams
        ///  Number of queues.
        /// </summary>
        public static string QueueCountParams()
        {
            return RequestGenerator.GetStorage("XcavateStaking", "QueueCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> QueueCountDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueCountDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> QueueCount
        ///  Number of queues.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> QueueCount(string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.QueueCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LedgerParams
        ///  Mapping of the account to the staking info.
        /// </summary>
        public static string LedgerParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("XcavateStaking", "Ledger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string LedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Ledger
        ///  Mapping of the account to the staking info.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.LedgerAccount> Ledger(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.LedgerParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.LedgerAccount>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> QueueLedgerParams
        ///  Mapping of the account to the queue info.
        /// </summary>
        public static string QueueLedgerParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("XcavateStaking", "QueueLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> QueueLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> QueueLedger
        ///  Mapping of the account to the queue info.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.QueueLedgerAccount> QueueLedger(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.QueueLedgerParams(key);
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.pallet_xcavate_staking.pallet.QueueLedgerAccount>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ActiveStakingsParams
        ///  All current stakers.
        /// </summary>
        public static string ActiveStakingsParams()
        {
            return RequestGenerator.GetStorage("XcavateStaking", "ActiveStakings", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ActiveStakingsDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveStakingsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ActiveStakings
        ///  All current stakers.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> ActiveStakings(string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.ActiveStakingsParams();
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> QueueStakingParams
        ///  All current users waiting in the queue.
        /// </summary>
        public static string QueueStakingParams()
        {
            return RequestGenerator.GetStorage("XcavateStaking", "QueueStaking", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> QueueStakingDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueStakingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> QueueStaking
        ///  All current users waiting in the queue.
        /// </summary>
        public async Task<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> QueueStaking(string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.QueueStakingParams();
            var result = await _client.GetStorageAsync<XCavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalStakeParams
        ///  The total staked amount.
        /// </summary>
        public static string TotalStakeParams()
        {
            return RequestGenerator.GetStorage("XcavateStaking", "TotalStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalStakeDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalStake
        ///  The total staked amount.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalStake(string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.TotalStakeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AmountLockedParams
        ///  Mapping of account id to the amount locked
        /// </summary>
        public static string AmountLockedParams(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XcavateStaking", "AmountLocked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AmountLockedDefault
        /// Default value as hex string
        /// </summary>
        public static string AmountLockedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AmountLocked
        ///  Mapping of account id to the amount locked
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> AmountLocked(XCavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateStakingStorage.AmountLockedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XcavateStakingCalls
    /// </summary>
    public sealed class XcavateStakingCalls
    {
        
        /// <summary>
        /// >> stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Stake(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(121, "XcavateStaking", 0, "stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unstake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unstake(Substrate.NetApi.Model.Types.Primitive.U64 staking_index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_index.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(121, "XcavateStaking", 1, "unstake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_from_queue
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawFromQueue(Substrate.NetApi.Model.Types.Primitive.U64 queue_index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(queue_index.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(121, "XcavateStaking", 2, "withdraw_from_queue", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> XcavateStakingConstants
    /// </summary>
    public sealed class XcavateStakingConstants
    {
        
        /// <summary>
        /// >> MinimumRemainingAmount
        ///  Minimum amount that should be left on staker account after staking.
        ///  Serves as a safeguard to prevent users from locking their entire free balance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumRemainingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00407A10F35A00000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStakers
        ///  The maximum amount of loans that can run at the same time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStakers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x88130000");
            return result;
        }
    }
    
    /// <summary>
    /// >> XcavateStakingErrors
    /// </summary>
    public enum XcavateStakingErrors
    {
        
        /// <summary>
        /// >> StakingWithNoValue
        /// Can not stake with zero value.
        /// </summary>
        StakingWithNoValue,
        
        /// <summary>
        /// >> UnstakingWithNoValue
        /// Unstaking a contract with zero value
        /// </summary>
        UnstakingWithNoValue,
        
        /// <summary>
        /// >> UnlockPeriodNotReached
        /// The locked period didn't end yet
        /// </summary>
        UnlockPeriodNotReached,
        
        /// <summary>
        /// >> NoStakedAmount
        /// No staked amount
        /// </summary>
        NoStakedAmount,
        
        /// <summary>
        /// >> TooManyStakers
        /// Too many stakers
        /// </summary>
        TooManyStakers,
        
        /// <summary>
        /// >> NoStaker
        /// The staker does not exist.
        /// </summary>
        NoStaker,
        
        /// <summary>
        /// >> LedgerNotFound
        /// The Ledger does not exist.
        /// </summary>
        LedgerNotFound,
        
        /// <summary>
        /// >> ConversionError
        /// Error by convertion to balance type.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> NoLoanFound
        /// The loan does not exist.
        /// </summary>
        NoLoanFound,
        
        /// <summary>
        /// >> IndexInUse
        /// Index is already used.
        /// </summary>
        IndexInUse,
        
        /// <summary>
        /// >> NotInQueue
        /// The index has not been found in the queue.
        /// </summary>
        NotInQueue,
        
        /// <summary>
        /// >> CallerNotStaker
        /// Caller is not the staker.
        /// </summary>
        CallerNotStaker,
        
        /// <summary>
        /// >> StakerNothingLocked
        /// The Staker has nothing locked.
        /// </summary>
        StakerNothingLocked,
        
        /// <summary>
        /// >> UserNotWhitelisted
        /// User has not passed the kyc.
        /// </summary>
        UserNotWhitelisted,
    }
}
