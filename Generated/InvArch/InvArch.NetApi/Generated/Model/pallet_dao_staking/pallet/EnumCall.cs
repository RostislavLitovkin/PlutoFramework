//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace InvArch.NetApi.Generated.Model.pallet_dao_staking.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> register_dao
        /// Used to register dao for staking.
        /// 
        /// The origin has to be the dao origin.
        /// 
        /// As part of this call, `RegisterDeposit` will be reserved from the dao account.
        /// 
        /// - `name`: Name of the dao.
        /// - `description`: Description of the dao.
        /// - `image`: Image URL of the dao.
        /// </summary>
        register_dao = 0,
        
        /// <summary>
        /// >> unregister_dao
        /// Unregister existing dao for staking, making it ineligible for rewards from current era onwards and
        /// starts the unbonding period for the stakers.
        /// 
        /// The origin has to be the dao origin.
        /// 
        /// Deposit is returned to the dao account.
        /// 
        /// - `dao_id`: Id of the dao to be unregistered.
        /// </summary>
        unregister_dao = 1,
        
        /// <summary>
        /// >> change_dao_metadata
        /// Used to change the metadata of a dao.
        /// 
        /// The origin has to be the dao origin.
        /// 
        /// - `name`: Name of the dao.
        /// - `description`: Description of the dao.
        /// - `image`: Image URL of the dao.
        /// </summary>
        change_dao_metadata = 2,
        
        /// <summary>
        /// >> stake
        /// Lock up and stake balance of the origin account.
        /// 
        /// `value` must be more than the `minimum_stake` specified by `MinimumStakingAmount`
        /// unless account already has bonded value equal or more than 'minimum_stake'.
        /// 
        /// The dispatch origin for this call must be _Signed_ by the staker's account.
        /// 
        /// - `dao_id`: Id of the dao to stake towards.
        /// - `value`: Amount to stake.
        /// </summary>
        stake = 3,
        
        /// <summary>
        /// >> unstake
        /// Start unbonding process and unstake balance from the dao.
        /// 
        /// The unstaked amount will no longer be eligible for rewards but still won't be unlocked.
        /// User needs to wait for the unbonding period to finish before being able to withdraw
        /// the funds via `withdraw_unstaked` call.
        /// 
        /// In case remaining staked balance is below minimum staking amount,
        /// entire stake will be unstaked.
        /// 
        /// - `dao_id`: Id of the dao to unstake from.
        /// </summary>
        unstake = 4,
        
        /// <summary>
        /// >> withdraw_unstaked
        /// Withdraw all funds that have completed the unbonding process.
        /// 
        /// If there are unbonding chunks which will be fully unbonded in future eras,
        /// they will remain and can be withdrawn later.
        /// 
        /// The dispatch origin for this call must be _Signed_ by the staker's account.
        /// </summary>
        withdraw_unstaked = 5,
        
        /// <summary>
        /// >> staker_claim_rewards
        /// Claim the staker's rewards.
        /// 
        /// In case reward cannot be claimed or was already claimed, an error is raised.
        /// 
        /// The dispatch origin for this call must be _Signed_ by the staker's account.
        /// 
        /// - `dao_id`: Id of the dao to claim rewards from.
        /// </summary>
        staker_claim_rewards = 6,
        
        /// <summary>
        /// >> dao_claim_rewards
        /// Claim dao reward for the specified era.
        /// 
        /// In case reward cannot be claimed or was already claimed, an error is raised.
        /// 
        /// - `dao_id`: Id of the dao to claim rewards from.
        /// - `era`: Era for which rewards are to be claimed.
        /// </summary>
        dao_claim_rewards = 7,
        
        /// <summary>
        /// >> halt_unhalt_pallet
        /// Halt or unhalt the pallet.
        /// 
        /// The dispatch origin for this call must be _Root_.
        /// 
        /// - `halt`: `true` to halt, `false` to unhalt.
        /// </summary>
        halt_unhalt_pallet = 8,
        
        /// <summary>
        /// >> move_stake
        /// Move stake from one dao to another.
        /// 
        /// The dispatch origin for this call must be _Signed_ by the staker's account.
        /// 
        /// - `from_dao`: Id of the dao to move stake from.
        /// - `amount`: Amount to move.
        /// - `to_dao`: Id of the dao to move stake to.
        /// </summary>
        move_stake = 9,
    }
    
    /// <summary>
    /// >> 306 - Variant[pallet_dao_staking.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2, InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10, InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>>(Call.register_dao);
				AddTypeDecoder<BaseVoid>(Call.unregister_dao);
				AddTypeDecoder<BaseTuple<InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2, InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10, InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>>(Call.change_dao_metadata);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.stake);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.unstake);
				AddTypeDecoder<BaseVoid>(Call.withdraw_unstaked);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.staker_claim_rewards);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>>>(Call.dao_claim_rewards);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.Bool>(Call.halt_unhalt_pallet);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.move_stake);
        }
    }
}
