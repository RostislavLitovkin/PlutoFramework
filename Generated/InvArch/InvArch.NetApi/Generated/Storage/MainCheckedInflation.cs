//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace InvArch.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CheckedInflationStorage
    /// </summary>
    public sealed class CheckedInflationStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CheckedInflationStorage Constructor
        /// </summary>
        public CheckedInflationStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CheckedInflation", "CurrentEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CheckedInflation", "NextEraStartingBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CheckedInflation", "YearStartIssuance"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CheckedInflation", "YearlyInflationPerEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CheckedInflation", "Halted"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> CurrentEraParams
        ///  The current era. Starts from 1 and is reset every year.
        /// </summary>
        public static string CurrentEraParams()
        {
            return RequestGenerator.GetStorage("CheckedInflation", "CurrentEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentEraDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEraDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era. Starts from 1 and is reset every year.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEra(string blockhash, CancellationToken token)
        {
            string parameters = CheckedInflationStorage.CurrentEraParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextEraStartingBlockParams
        ///  Block that the next era starts at.
        /// </summary>
        public static string NextEraStartingBlockParams()
        {
            return RequestGenerator.GetStorage("CheckedInflation", "NextEraStartingBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextEraStartingBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string NextEraStartingBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextEraStartingBlock
        ///  Block that the next era starts at.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextEraStartingBlock(string blockhash, CancellationToken token)
        {
            string parameters = CheckedInflationStorage.NextEraStartingBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> YearStartIssuanceParams
        ///  Total token supply at the very beginning of the year before any inflation has been minted.
        /// </summary>
        public static string YearStartIssuanceParams()
        {
            return RequestGenerator.GetStorage("CheckedInflation", "YearStartIssuance", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> YearStartIssuanceDefault
        /// Default value as hex string
        /// </summary>
        public static string YearStartIssuanceDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> YearStartIssuance
        ///  Total token supply at the very beginning of the year before any inflation has been minted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> YearStartIssuance(string blockhash, CancellationToken token)
        {
            string parameters = CheckedInflationStorage.YearStartIssuanceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> YearlyInflationPerEraParams
        ///  The number of tokens minted at the beginning of every era during a year.
        /// </summary>
        public static string YearlyInflationPerEraParams()
        {
            return RequestGenerator.GetStorage("CheckedInflation", "YearlyInflationPerEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> YearlyInflationPerEraDefault
        /// Default value as hex string
        /// </summary>
        public static string YearlyInflationPerEraDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> YearlyInflationPerEra
        ///  The number of tokens minted at the beginning of every era during a year.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> YearlyInflationPerEra(string blockhash, CancellationToken token)
        {
            string parameters = CheckedInflationStorage.YearlyInflationPerEraParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HaltedParams
        ///  Whether the inflation process is halted.
        /// </summary>
        public static string HaltedParams()
        {
            return RequestGenerator.GetStorage("CheckedInflation", "Halted", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HaltedDefault
        /// Default value as hex string
        /// </summary>
        public static string HaltedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Halted
        ///  Whether the inflation process is halted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> Halted(string blockhash, CancellationToken token)
        {
            string parameters = CheckedInflationStorage.HaltedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CheckedInflationCalls
    /// </summary>
    public sealed class CheckedInflationCalls
    {
        
        /// <summary>
        /// >> set_first_year_supply
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFirstYearSupply()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "CheckedInflation", 0, "set_first_year_supply", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> halt_unhalt_pallet
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HaltUnhaltPallet(Substrate.NetApi.Model.Types.Primitive.Bool halt)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(halt.Encode());
            return new Method(50, "CheckedInflation", 1, "halt_unhalt_pallet", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CheckedInflationConstants
    /// </summary>
    public sealed class CheckedInflationConstants
    {
        
        /// <summary>
        /// >> BlocksPerEra
        ///  Number of blocks per era.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BlocksPerEra()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x201C0000");
            return result;
        }
        
        /// <summary>
        /// >> ErasPerYear
        ///  Number of eras per year.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ErasPerYear()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x6D010000");
            return result;
        }
        
        /// <summary>
        /// >> Inflation
        ///  The inflation method and its amount.
        /// </summary>
        public InvArch.NetApi.Generated.Model.pallet_checked_inflation.inflation.EnumInflationMethod Inflation()
        {
            var result = new InvArch.NetApi.Generated.Model.pallet_checked_inflation.inflation.EnumInflationMethod();
            result.Create("0x0000E1F505");
            return result;
        }
    }
    
    /// <summary>
    /// >> CheckedInflationErrors
    /// </summary>
    public enum CheckedInflationErrors
    {
        
        /// <summary>
        /// >> NoHaltChange
        /// The pallet is already in the state that the user is trying to change it to.
        /// </summary>
        NoHaltChange,
    }
}
