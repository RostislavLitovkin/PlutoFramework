//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace InvArch.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> INV4Storage
    /// </summary>
    public sealed class INV4Storage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> INV4Storage Constructor
        /// </summary>
        public INV4Storage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("INV4", "NextCoreId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("INV4", "CoreStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(InvArch.NetApi.Generated.Model.invarch_primitives.DaoInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("INV4", "CoreByAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("INV4", "Multisig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.primitive_types.H256>), typeof(InvArch.NetApi.Generated.Model.pallet_dao_manager.multisig.MultisigOperation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("INV4", "CoreMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> NextCoreIdParams
        ///  Next available DAO ID.
        /// </summary>
        public static string NextCoreIdParams()
        {
            return RequestGenerator.GetStorage("INV4", "NextCoreId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextCoreIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextCoreIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextCoreId
        ///  Next available DAO ID.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextCoreId(string blockhash, CancellationToken token)
        {
            string parameters = INV4Storage.NextCoreIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CoreStorageParams
        ///  DAO info storage.
        /// </summary>
        public static string CoreStorageParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("INV4", "CoreStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CoreStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CoreStorage
        ///  DAO info storage.
        /// </summary>
        public async Task<InvArch.NetApi.Generated.Model.invarch_primitives.DaoInfo> CoreStorage(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = INV4Storage.CoreStorageParams(key);
            var result = await _client.GetStorageAsync<InvArch.NetApi.Generated.Model.invarch_primitives.DaoInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CoreByAccountParams
        ///  Mapping of account id -> dao id.
        /// </summary>
        public static string CoreByAccountParams(InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("INV4", "CoreByAccount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CoreByAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreByAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CoreByAccount
        ///  Mapping of account id -> dao id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CoreByAccount(InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = INV4Storage.CoreByAccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MultisigParams
        ///  Details of a multisig call.
        /// 
        ///  Key: (Dao ID, call hash)
        /// </summary>
        public static string MultisigParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.primitive_types.H256> key)
        {
            return RequestGenerator.GetStorage("INV4", "Multisig", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> MultisigDefault
        /// Default value as hex string
        /// </summary>
        public static string MultisigDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Multisig
        ///  Details of a multisig call.
        /// 
        ///  Key: (Dao ID, call hash)
        /// </summary>
        public async Task<InvArch.NetApi.Generated.Model.pallet_dao_manager.multisig.MultisigOperation> Multisig(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.primitive_types.H256> key, string blockhash, CancellationToken token)
        {
            string parameters = INV4Storage.MultisigParams(key);
            var result = await _client.GetStorageAsync<InvArch.NetApi.Generated.Model.pallet_dao_manager.multisig.MultisigOperation>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CoreMembersParams
        ///  Stores a list of members for each DAO.
        ///  This storage should be always handled by the runtime and mutated by CoreAssets hooks.
        /// </summary>
        public static string CoreMembersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("INV4", "CoreMembers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> CoreMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreMembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CoreMembers
        ///  Stores a list of members for each DAO.
        ///  This storage should be always handled by the runtime and mutated by CoreAssets hooks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> CoreMembers(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = INV4Storage.CoreMembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> INV4Calls
    /// </summary>
    public sealed class INV4Calls
    {
        
        /// <summary>
        /// >> create_dao
        /// Dispatch functions
        /// </summary>
        public static Method CreateDao(InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12 metadata, InvArch.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill minimum_support, InvArch.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill required_approval, InvArch.NetApi.Generated.Model.pallet_dao_manager.fee_handling.EnumFeeAsset creation_fee_asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(minimum_support.Encode());
            byteArray.AddRange(required_approval.Encode());
            byteArray.AddRange(creation_fee_asset.Encode());
            return new Method(71, "INV4", 0, "create_dao", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> token_mint
        /// Dispatch functions
        /// </summary>
        public static Method TokenMint(Substrate.NetApi.Model.Types.Primitive.U128 amount, InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32 target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(target.Encode());
            return new Method(71, "INV4", 1, "token_mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> token_burn
        /// Dispatch functions
        /// </summary>
        public static Method TokenBurn(Substrate.NetApi.Model.Types.Primitive.U128 amount, InvArch.NetApi.Generated.Model.sp_core.crypto.AccountId32 target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(target.Encode());
            return new Method(71, "INV4", 2, "token_burn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> operate_multisig
        /// Dispatch functions
        /// </summary>
        public static Method OperateMultisig(Substrate.NetApi.Model.Types.Primitive.U32 dao_id, Substrate.NetApi.Model.Types.Base.BaseOpt<InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12> metadata, InvArch.NetApi.Generated.Model.pallet_dao_manager.fee_handling.EnumFeeAsset fee_asset, InvArch.NetApi.Generated.Model.invarch_runtime.EnumRuntimeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dao_id.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(fee_asset.Encode());
            byteArray.AddRange(call.Encode());
            return new Method(71, "INV4", 3, "operate_multisig", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_multisig
        /// Dispatch functions
        /// </summary>
        public static Method VoteMultisig(Substrate.NetApi.Model.Types.Primitive.U32 dao_id, InvArch.NetApi.Generated.Model.primitive_types.H256 call_hash, Substrate.NetApi.Model.Types.Primitive.Bool aye)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dao_id.Encode());
            byteArray.AddRange(call_hash.Encode());
            byteArray.AddRange(aye.Encode());
            return new Method(71, "INV4", 4, "vote_multisig", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_vote_multisig
        /// Dispatch functions
        /// </summary>
        public static Method WithdrawVoteMultisig(Substrate.NetApi.Model.Types.Primitive.U32 dao_id, InvArch.NetApi.Generated.Model.primitive_types.H256 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dao_id.Encode());
            byteArray.AddRange(call_hash.Encode());
            return new Method(71, "INV4", 5, "withdraw_vote_multisig", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_multisig_proposal
        /// Dispatch functions
        /// </summary>
        public static Method CancelMultisigProposal(InvArch.NetApi.Generated.Model.primitive_types.H256 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call_hash.Encode());
            return new Method(71, "INV4", 6, "cancel_multisig_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_parameters
        /// Dispatch functions
        /// </summary>
        public static Method SetParameters(Substrate.NetApi.Model.Types.Base.BaseOpt<InvArch.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12> metadata, Substrate.NetApi.Model.Types.Base.BaseOpt<InvArch.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> minimum_support, Substrate.NetApi.Model.Types.Base.BaseOpt<InvArch.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> required_approval, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Bool> frozen_tokens)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(minimum_support.Encode());
            byteArray.AddRange(required_approval.Encode());
            byteArray.AddRange(frozen_tokens.Encode());
            return new Method(71, "INV4", 9, "set_parameters", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> INV4Constants
    /// </summary>
    public sealed class INV4Constants
    {
        
        /// <summary>
        /// >> MaxCallers
        ///  The maximum numbers of caller accounts on a single multisig proposal
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCallers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x10270000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMetadata
        ///  The maximum length of the dao metadata and the metadata of multisig proposals
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMetadata()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x10270000");
            return result;
        }
        
        /// <summary>
        /// >> DaoSeedBalance
        ///  Base voting token balance to give callers when creating a DAO
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DaoSeedBalance()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40420F00000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DaoCreationFee
        ///  Fee for creating a dao in the native token
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DaoCreationFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RelayDaoCreationFee
        ///  Fee for creating a dao in the relay token
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RelayDaoCreationFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RelayAssetId
        ///  Relay token asset id in the runtime
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple RelayAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
            result.Create("0x");
            return result;
        }
        
        /// <summary>
        /// >> MaxCallSize
        ///  Maximum size of a multisig proposal call
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCallSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00C80000");
            return result;
        }
    }
    
    /// <summary>
    /// >> INV4Errors
    /// </summary>
    public enum INV4Errors
    {
        
        /// <summary>
        /// >> NoAvailableDaoId
        /// No available DAO ID
        /// </summary>
        NoAvailableDaoId,
        
        /// <summary>
        /// >> DaoNotFound
        /// DAO not found
        /// </summary>
        DaoNotFound,
        
        /// <summary>
        /// >> NoPermission
        /// The caller has no permissions in the DAO
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> MaxMetadataExceeded
        /// Maximum metadata length exceeded
        /// </summary>
        MaxMetadataExceeded,
        
        /// <summary>
        /// >> MaxCallersExceeded
        /// Maximum amount of callers exceeded
        /// </summary>
        MaxCallersExceeded,
        
        /// <summary>
        /// >> MultisigCallNotFound
        /// Multisig call not found
        /// </summary>
        MultisigCallNotFound,
        
        /// <summary>
        /// >> FailedDecodingCall
        /// Failed to decode stored multisig call
        /// </summary>
        FailedDecodingCall,
        
        /// <summary>
        /// >> MultisigCallAlreadyExists
        /// Multisig proposal already exists and is being voted on
        /// </summary>
        MultisigCallAlreadyExists,
        
        /// <summary>
        /// >> NotAVoter
        /// Cannot withdraw a vote on a multisig transaction you have not voted on
        /// </summary>
        NotAVoter,
        
        /// <summary>
        /// >> CallHasTooFewBytes
        /// Failed to extract metadata from a call
        /// </summary>
        CallHasTooFewBytes,
        
        /// <summary>
        /// >> IncompleteVoteCleanup
        /// Incomplete vote cleanup
        /// </summary>
        IncompleteVoteCleanup,
        
        /// <summary>
        /// >> CallFeePaymentFailed
        /// Multisig fee payment failed, probably due to lack of funds to pay for fees
        /// </summary>
        CallFeePaymentFailed,
        
        /// <summary>
        /// >> MaxCallLengthExceeded
        /// Call is too long
        /// </summary>
        MaxCallLengthExceeded,
    }
}
