//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace Hydration.NetApi.Generated.Model.pallet_stableswap.types
{
    
    
    /// <summary>
    /// >> 684 - Composite[pallet_stableswap.types.PoolSnapshot]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class PoolSnapshot : BaseType
    {
        
        /// <summary>
        /// >> assets
        /// </summary>
        public Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12 Assets { get; set; }
        /// <summary>
        /// >> reserves
        /// </summary>
        public Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48 Reserves { get; set; }
        /// <summary>
        /// >> amplification
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Amplification { get; set; }
        /// <summary>
        /// >> fee
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill Fee { get; set; }
        /// <summary>
        /// >> pegs
        /// </summary>
        public Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23 Pegs { get; set; }
        /// <summary>
        /// >> share_issuance
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ShareIssuance { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "PoolSnapshot";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Assets.Encode());
            result.AddRange(Reserves.Encode());
            result.AddRange(Amplification.Encode());
            result.AddRange(Fee.Encode());
            result.AddRange(Pegs.Encode());
            result.AddRange(ShareIssuance.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Assets = new Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT12();
            Assets.Decode(byteArray, ref p);
            Reserves = new Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48();
            Reserves.Decode(byteArray, ref p);
            Amplification = new Substrate.NetApi.Model.Types.Primitive.U128();
            Amplification.Decode(byteArray, ref p);
            Fee = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            Fee.Decode(byteArray, ref p);
            Pegs = new Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23();
            Pegs.Decode(byteArray, ref p);
            ShareIssuance = new Substrate.NetApi.Model.Types.Primitive.U128();
            ShareIssuance.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
