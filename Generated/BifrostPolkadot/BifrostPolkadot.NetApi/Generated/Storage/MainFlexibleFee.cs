//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> FlexibleFeeStorage
    /// </summary>
    public sealed class FlexibleFeeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> FlexibleFeeStorage Constructor
        /// </summary>
        public FlexibleFeeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FlexibleFee", "UniversalFeeCurrencyOrderList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FlexibleFee", "UserDefaultFeeCurrency"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FlexibleFee", "ExtraFeeByCall"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>)));
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderListParams
        ///  Universal fee currency order list for all users
        /// </summary>
        public static string UniversalFeeCurrencyOrderListParams()
        {
            return RequestGenerator.GetStorage("FlexibleFee", "UniversalFeeCurrencyOrderList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderListDefault
        /// Default value as hex string
        /// </summary>
        public static string UniversalFeeCurrencyOrderListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderList
        ///  Universal fee currency order list for all users
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14> UniversalFeeCurrencyOrderList(string blockhash, CancellationToken token)
        {
            string parameters = FlexibleFeeStorage.UniversalFeeCurrencyOrderListParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrencyParams
        ///  User default fee currency, if set, will be used as the first fee currency, and then use the
        ///  universal fee currency order list
        /// </summary>
        public static string UserDefaultFeeCurrencyParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("FlexibleFee", "UserDefaultFeeCurrency", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrencyDefault
        /// Default value as hex string
        /// </summary>
        public static string UserDefaultFeeCurrencyDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrency
        ///  User default fee currency, if set, will be used as the first fee currency, and then use the
        ///  universal fee currency order list
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> UserDefaultFeeCurrency(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = FlexibleFeeStorage.UserDefaultFeeCurrencyParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExtraFeeByCallParams
        ///  Extra fee by call
        /// </summary>
        public static string ExtraFeeByCallParams(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 key)
        {
            return RequestGenerator.GetStorage("FlexibleFee", "ExtraFeeByCall", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExtraFeeByCallDefault
        /// Default value as hex string
        /// </summary>
        public static string ExtraFeeByCallDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExtraFeeByCall
        ///  Extra fee by call
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>> ExtraFeeByCall(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 key, string blockhash, CancellationToken token)
        {
            string parameters = FlexibleFeeStorage.ExtraFeeByCallParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeCalls
    /// </summary>
    public sealed class FlexibleFeeCalls
    {
        
        /// <summary>
        /// >> set_user_default_fee_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUserDefaultFeeCurrency(Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(100, "FlexibleFee", 0, "set_user_default_fee_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_default_fee_currency_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetDefaultFeeCurrencyList(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14 currency_list)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_list.Encode());
            return new Method(100, "FlexibleFee", 1, "set_default_fee_currency_list", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_extra_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExtraFee(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 raw_call_name, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>> fee_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(raw_call_name.Encode());
            byteArray.AddRange(fee_info.Encode());
            return new Method(100, "FlexibleFee", 2, "set_extra_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispatch_permit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DispatchPermit(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 from, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 to, BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256 value, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> data, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256 deadline, Substrate.NetApi.Model.Types.Primitive.U8 v, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256 r, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256 s)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(deadline.Encode());
            byteArray.AddRange(v.Encode());
            byteArray.AddRange(r.Encode());
            byteArray.AddRange(s.Encode());
            return new Method(100, "FlexibleFee", 3, "dispatch_permit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeConstants
    /// </summary>
    public sealed class FlexibleFeeConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        ///  Get TreasuryAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFeeCurrencyOrderListLen
        ///  Maximum number of CurrencyId's to support handling fees.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFeeCurrencyOrderListLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MinAssetHubExecutionFee
        ///  When this number is reached, the DOT is sent to AssetHub
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinAssetHubExecutionFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00D0ED902E0000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinRelaychainExecutionFee
        ///  When this number is reached, the DOT is sent to Relaychain
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinRelaychainExecutionFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00D0ED902E0000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RelaychainCurrencyId
        ///  The currency id of the RelayChain
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelaychainCurrencyId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> ParachainId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F666C657869");
            return result;
        }
        
        /// <summary>
        /// >> AllowVBNCAsFee
        ///  The `AllowVBNCAsFee` constant determines whether VBNC is allowed as a fee currency.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool AllowVBNCAsFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.Bool();
            result.Create("0x01");
            return result;
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeErrors
    /// </summary>
    public enum FlexibleFeeErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// The account does not have enough balance to perform the operation.
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> ConversionError
        /// An error occurred during currency conversion.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> WeightAndFeeNotExist
        /// No weight or fee information is available for the requested operation.
        /// </summary>
        WeightAndFeeNotExist,
        
        /// <summary>
        /// >> UnweighableMessage
        /// The message cannot be weighed, possibly due to insufficient information.
        /// </summary>
        UnweighableMessage,
        
        /// <summary>
        /// >> XcmExecutionFailed
        /// The XCM execution has failed.
        /// </summary>
        XcmExecutionFailed,
        
        /// <summary>
        /// >> CurrencyNotSupport
        /// The specified currency is not supported by the system.
        /// </summary>
        CurrencyNotSupport,
        
        /// <summary>
        /// >> MaxCurrenciesReached
        /// The maximum number of currencies that can be handled has been reached.
        /// </summary>
        MaxCurrenciesReached,
        
        /// <summary>
        /// >> EvmPermitExpired
        /// EVM permit expired.
        /// </summary>
        EvmPermitExpired,
        
        /// <summary>
        /// >> EvmPermitInvalid
        /// EVM permit is invalid.
        /// </summary>
        EvmPermitInvalid,
        
        /// <summary>
        /// >> EvmPermitCallExecutionError
        /// EVM permit call failed.
        /// </summary>
        EvmPermitCallExecutionError,
        
        /// <summary>
        /// >> EvmPermitRunnerError
        /// EVM permit call failed.
        /// </summary>
        EvmPermitRunnerError,
        
        /// <summary>
        /// >> PercentageCalculationFailed
        /// Percentage calculation failed due to overflow.
        /// </summary>
        PercentageCalculationFailed,
    }
}
