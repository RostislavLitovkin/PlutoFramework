//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BbBNCStorage
    /// </summary>
    public sealed class BbBNCStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BbBNCStorage Constructor
        /// </summary>
        public BbBNCStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "Supply"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "BbConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.BbConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "Epoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "Locked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.LockedBalance)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserLocked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "PointHistory"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserPointHistory"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256>), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserPointEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "SlopeChanges"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.I128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "IncentiveConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.incentive.IncentiveConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserRewardPerTokenPaid"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "Rewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserMarkupInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.UserMarkupInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "LockedTokens"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.LockedToken)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "TotalLock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "MarkupCoefficient"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.MarkupCoefficientInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "Position"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "UserPositions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT59)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "ExpiringPositions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT60)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "NextExpiringBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BbBNC", "PositionOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
        }
        
        /// <summary>
        /// >> SupplyParams
        ///  Total supply of locked tokens
        /// </summary>
        public static string SupplyParams()
        {
            return RequestGenerator.GetStorage("BbBNC", "Supply", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupplyDefault
        /// Default value as hex string
        /// </summary>
        public static string SupplyDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Supply
        ///  Total supply of locked tokens
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Supply(string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.SupplyParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BbConfigsParams
        ///  Configurations
        /// </summary>
        public static string BbConfigsParams()
        {
            return RequestGenerator.GetStorage("BbBNC", "BbConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BbConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string BbConfigsDefault()
        {
            return "0x000000000000000000000000000000000000000064000000";
        }
        
        /// <summary>
        /// >> BbConfigs
        ///  Configurations
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.BbConfig> BbConfigs(string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.BbConfigsParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.BbConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EpochParams
        ///  Global epoch
        /// </summary>
        public static string EpochParams()
        {
            return RequestGenerator.GetStorage("BbBNC", "Epoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EpochDefault
        /// Default value as hex string
        /// </summary>
        public static string EpochDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Epoch
        ///  Global epoch
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256> Epoch(string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.EpochParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedParams
        ///  Locked tokens. [position => LockedBalance]
        /// </summary>
        public static string LockedParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "Locked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LockedDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Locked
        ///  Locked tokens. [position => LockedBalance]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.LockedBalance> Locked(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.LockedParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.LockedBalance>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserLockedParams
        ///  User locked tokens. [who => value]
        /// </summary>
        public static string UserLockedParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserLocked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserLockedDefault
        /// Default value as hex string
        /// </summary>
        public static string UserLockedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserLocked
        ///  User locked tokens. [who => value]
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> UserLocked(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserLockedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PointHistoryParams
        ///  Each week has a Point struct stored in PointHistory.
        /// </summary>
        public static string PointHistoryParams(BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "PointHistory", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PointHistoryDefault
        /// Default value as hex string
        /// </summary>
        public static string PointHistoryDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000";
        }
        
        /// <summary>
        /// >> PointHistory
        ///  Each week has a Point struct stored in PointHistory.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point> PointHistory(BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.PointHistoryParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPointHistoryParams
        ///  User point history. [(who, epoch) => Point]
        /// </summary>
        public static string UserPointHistoryParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256> key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserPointHistory", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserPointHistoryDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPointHistoryDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserPointHistory
        ///  User point history. [(who, epoch) => Point]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point> UserPointHistory(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256> key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserPointHistoryParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.Point>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPointEpochParams
        ///  User point epoch. [who => epoch]
        /// </summary>
        public static string UserPointEpochParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserPointEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserPointEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPointEpochDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserPointEpoch
        ///  User point epoch. [who => epoch]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256> UserPointEpoch(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserPointEpochParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.primitive_types.U256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SlopeChangesParams
        ///  Slope changes. [block => slope]
        /// </summary>
        public static string SlopeChangesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "SlopeChanges", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SlopeChangesDefault
        /// Default value as hex string
        /// </summary>
        public static string SlopeChangesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> SlopeChanges
        ///  Slope changes. [block => slope]
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.I128> SlopeChanges(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.SlopeChangesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.I128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> IncentiveConfigsParams
        ///  Farming pool incentive configurations.[pool_id => IncentiveConfig]
        /// </summary>
        public static string IncentiveConfigsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "IncentiveConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> IncentiveConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string IncentiveConfigsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> IncentiveConfigs
        ///  Farming pool incentive configurations.[pool_id => IncentiveConfig]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.incentive.IncentiveConfig> IncentiveConfigs(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.IncentiveConfigsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.incentive.IncentiveConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaidParams
        ///  User reward per token paid. [who => reward per token]
        /// </summary>
        public static string UserRewardPerTokenPaidParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserRewardPerTokenPaid", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaidDefault
        /// Default value as hex string
        /// </summary>
        public static string UserRewardPerTokenPaidDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaid
        ///  User reward per token paid. [who => reward per token]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8> UserRewardPerTokenPaid(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserRewardPerTokenPaidParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardsParams
        ///  User rewards. [who => rewards]
        /// </summary>
        public static string RewardsParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "Rewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Rewards
        ///  User rewards. [who => rewards]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8> Rewards(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.RewardsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserMarkupInfosParams
        ///  User markup infos. [who => UserMarkupInfo]
        /// </summary>
        public static string UserMarkupInfosParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserMarkupInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserMarkupInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string UserMarkupInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserMarkupInfos
        ///  User markup infos. [who => UserMarkupInfo]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.UserMarkupInfo> UserMarkupInfos(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserMarkupInfosParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.UserMarkupInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedTokensParams
        ///  Locked tokens for markup. [(token, who) => value]
        /// </summary>
        public static string LockedTokensParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("BbBNC", "LockedTokens", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LockedTokensDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedTokensDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LockedTokens
        ///  Locked tokens for markup. [(token, who) => value]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.LockedToken> LockedTokens(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.LockedTokensParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.LockedToken>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalLockParams
        ///  Total locked tokens for markup. [token => value]
        /// </summary>
        public static string TotalLockParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("BbBNC", "TotalLock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalLockDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalLockDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalLock
        ///  Total locked tokens for markup. [token => value]
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalLock(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.TotalLockParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarkupCoefficientParams
        ///  Markup coefficient. [token => MarkupCoefficientInfo]
        /// </summary>
        public static string MarkupCoefficientParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("BbBNC", "MarkupCoefficient", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarkupCoefficientDefault
        /// Default value as hex string
        /// </summary>
        public static string MarkupCoefficientDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarkupCoefficient
        ///  Markup coefficient. [token => MarkupCoefficientInfo]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.MarkupCoefficientInfo> MarkupCoefficient(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.MarkupCoefficientParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bb_bnc.traits.MarkupCoefficientInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PositionParams
        ///  The last position of all.
        /// </summary>
        public static string PositionParams()
        {
            return RequestGenerator.GetStorage("BbBNC", "Position", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PositionDefault
        /// Default value as hex string
        /// </summary>
        public static string PositionDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Position
        ///  The last position of all.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Position(string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.PositionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPositionsParams
        ///  Positions owned by the user. [who => positions]
        /// </summary>
        public static string UserPositionsParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "UserPositions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserPositionsDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPositionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserPositions
        ///  Positions owned by the user. [who => positions]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT59> UserPositions(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.UserPositionsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT59>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExpiringPositionsParams
        ///  Track positions by their expiration time
        /// </summary>
        public static string ExpiringPositionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "ExpiringPositions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExpiringPositionsDefault
        /// Default value as hex string
        /// </summary>
        public static string ExpiringPositionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExpiringPositions
        ///  Track positions by their expiration time
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT60> ExpiringPositions(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.ExpiringPositionsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT60>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextExpiringBlockParams
        ///  Track the next block that has expiring positions
        /// </summary>
        public static string NextExpiringBlockParams()
        {
            return RequestGenerator.GetStorage("BbBNC", "NextExpiringBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextExpiringBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string NextExpiringBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextExpiringBlock
        ///  Track the next block that has expiring positions
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextExpiringBlock(string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.NextExpiringBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PositionOwnerParams
        ///  Track position owner. [position => owner]
        /// </summary>
        public static string PositionOwnerParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("BbBNC", "PositionOwner", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PositionOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string PositionOwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PositionOwner
        ///  Track position owner. [position => owner]
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> PositionOwner(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = BbBNCStorage.PositionOwnerParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BbBNCCalls
    /// </summary>
    public sealed class BbBNCCalls
    {
        
        /// <summary>
        /// >> set_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetConfig(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> min_mint, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> min_block, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> max_positions_per_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(min_mint.Encode());
            byteArray.AddRange(min_block.Encode());
            byteArray.AddRange(max_positions_per_block.Encode());
            return new Method(124, "BbBNC", 0, "set_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateLock(Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.U32 unlock_time)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(unlock_time.Encode());
            return new Method(124, "BbBNC", 1, "create_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_amount
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseAmount(Substrate.NetApi.Model.Types.Primitive.U128 position, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(124, "BbBNC", 2, "increase_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_unlock_time
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseUnlockTime(Substrate.NetApi.Model.Types.Primitive.U128 position, Substrate.NetApi.Model.Types.Primitive.U32 time)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            byteArray.AddRange(time.Encode());
            return new Method(124, "BbBNC", 3, "increase_unlock_time", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Withdraw(Substrate.NetApi.Model.Types.Primitive.U128 position)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            return new Method(124, "BbBNC", 4, "withdraw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyRewards(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 incentive_from, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> rewards_duration, Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(incentive_from.Encode());
            byteArray.AddRange(rewards_duration.Encode());
            byteArray.AddRange(rewards.Encode());
            return new Method(124, "BbBNC", 5, "notify_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> get_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method GetRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(124, "BbBNC", 6, "get_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem_unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RedeemUnlock(Substrate.NetApi.Model.Types.Primitive.U128 position)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            return new Method(124, "BbBNC", 7, "redeem_unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_markup_coefficient
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMarkupCoefficient(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 markup, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 hardcap, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 rwi)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(markup.Encode());
            byteArray.AddRange(hardcap.Encode());
            byteArray.AddRange(rwi.Encode());
            return new Method(124, "BbBNC", 8, "set_markup_coefficient", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deposit_markup
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DepositMarkup(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(124, "BbBNC", 9, "deposit_markup", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_markup
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawMarkup(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(124, "BbBNC", 10, "withdraw_markup", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refresh
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Refresh(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(124, "BbBNC", 11, "refresh", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BbBNCConstants
    /// </summary>
    public sealed class BbBNCConstants
    {
        
        /// <summary>
        /// >> TokenType
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId TokenType()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0101");
            return result;
        }
        
        /// <summary>
        /// >> IncentivePalletId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId IncentivePalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F6262696374");
            return result;
        }
        
        /// <summary>
        /// >> BuyBackAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId BuyBackAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F627962636B");
            return result;
        }
        
        /// <summary>
        /// >> Week
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 Week()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
        
        /// <summary>
        /// >> MaxBlock
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00CD4001");
            return result;
        }
        
        /// <summary>
        /// >> Multiplier
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Multiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> VoteWeightMultiplier
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 VoteWeightMultiplier()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
            result.Create("0x00008BBD0689680A0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPositions
        ///  The maximum number of positions that should exist on an account.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPositions()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MarkupRefreshLimit
        ///  Maximum number of users per refresh.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MarkupRefreshLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> OneYear
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 OneYear()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40335000");
            return result;
        }
        
        /// <summary>
        /// >> FiveYears
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FiveYears()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40009101");
            return result;
        }
    }
    
    /// <summary>
    /// >> BbBNCErrors
    /// </summary>
    public enum BbBNCErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// Not enough balance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> Expired
        /// Block number is expired
        /// </summary>
        Expired,
        
        /// <summary>
        /// >> BelowMinimumMint
        /// Below minimum mint
        /// </summary>
        BelowMinimumMint,
        
        /// <summary>
        /// >> LockNotExist
        /// Lock does not exist
        /// </summary>
        LockNotExist,
        
        /// <summary>
        /// >> LockExist
        /// Lock already exists
        /// </summary>
        LockExist,
        
        /// <summary>
        /// >> ArgumentsError
        /// Arguments error
        /// </summary>
        ArgumentsError,
        
        /// <summary>
        /// >> ExceedsMaxPositions
        /// Exceeds max positions
        /// </summary>
        ExceedsMaxPositions,
        
        /// <summary>
        /// >> NoController
        /// No controller
        /// </summary>
        NoController,
    }
}
