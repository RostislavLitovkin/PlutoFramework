//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> LendMarketStorage
    /// </summary>
    public sealed class LendMarketStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> LendMarketStorage Constructor
        /// </summary>
        public LendMarketStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "LastAccruedInterestTime"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "LiquidationFreeCollaterals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "TotalSupply"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "TotalBorrows"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "TotalReserves"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "AccountBorrows"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.BorrowSnapshot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "AccountDeposits"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Deposits)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "AccountEarned"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.EarnedSnapshot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "BorrowIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "ExchangeRate"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "BorrowRate"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "SupplyRate"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "UtilizationRatio"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "Markets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Market)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "UnderlyingAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardSupplySpeed"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardBorrowSpeed"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardSupplyState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardBorrowState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardSupplierIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardBorrowerIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "RewardAccured"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LendMarket", "MarketBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70)));
        }
        
        /// <summary>
        /// >> LastAccruedInterestTimeParams
        ///  The timestamp of the last calculation of accrued interest
        /// </summary>
        public static string LastAccruedInterestTimeParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "LastAccruedInterestTime", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastAccruedInterestTimeDefault
        /// Default value as hex string
        /// </summary>
        public static string LastAccruedInterestTimeDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> LastAccruedInterestTime
        ///  The timestamp of the last calculation of accrued interest
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> LastAccruedInterestTime(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.LastAccruedInterestTimeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LiquidationFreeCollateralsParams
        ///  Liquidation free collateral.
        /// </summary>
        public static string LiquidationFreeCollateralsParams()
        {
            return RequestGenerator.GetStorage("LendMarket", "LiquidationFreeCollaterals", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LiquidationFreeCollateralsDefault
        /// Default value as hex string
        /// </summary>
        public static string LiquidationFreeCollateralsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LiquidationFreeCollaterals
        ///  Liquidation free collateral.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70> LiquidationFreeCollaterals(string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.LiquidationFreeCollateralsParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalSupplyParams
        ///  Total number of collateral tokens in circulation
        ///  CollateralType -> Balance
        /// </summary>
        public static string TotalSupplyParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "TotalSupply", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalSupplyDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalSupplyDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalSupply
        ///  Total number of collateral tokens in circulation
        ///  CollateralType -> Balance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalSupply(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.TotalSupplyParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalBorrowsParams
        ///  Total amount of outstanding borrows of the underlying in this market
        ///  CurrencyId -> Balance
        /// </summary>
        public static string TotalBorrowsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "TotalBorrows", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalBorrowsDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalBorrowsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalBorrows
        ///  Total amount of outstanding borrows of the underlying in this market
        ///  CurrencyId -> Balance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalBorrows(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.TotalBorrowsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalReservesParams
        ///  Total amount of reserves of the underlying held in this market
        ///  CurrencyId -> Balance
        /// </summary>
        public static string TotalReservesParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "TotalReserves", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalReservesDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalReservesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalReserves
        ///  Total amount of reserves of the underlying held in this market
        ///  CurrencyId -> Balance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalReserves(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.TotalReservesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountBorrowsParams
        ///  Mapping of account addresses to outstanding borrow balances
        ///  CurrencyId -> Owner -> BorrowSnapshot
        /// </summary>
        public static string AccountBorrowsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("LendMarket", "AccountBorrows", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountBorrowsDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountBorrowsDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AccountBorrows
        ///  Mapping of account addresses to outstanding borrow balances
        ///  CurrencyId -> Owner -> BorrowSnapshot
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.BorrowSnapshot> AccountBorrows(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.AccountBorrowsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.BorrowSnapshot>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountDepositsParams
        ///  Mapping of account addresses to deposit details
        ///  CollateralType -> Owner -> Deposits
        /// </summary>
        public static string AccountDepositsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("LendMarket", "AccountDeposits", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountDepositsDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountDepositsDefault()
        {
            return "0x0000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AccountDeposits
        ///  Mapping of account addresses to deposit details
        ///  CollateralType -> Owner -> Deposits
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Deposits> AccountDeposits(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.AccountDepositsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Deposits>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountEarnedParams
        ///  Mapping of account addresses to total deposit interest accrual
        ///  CurrencyId -> Owner -> EarnedSnapshot
        /// </summary>
        public static string AccountEarnedParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("LendMarket", "AccountEarned", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountEarnedDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountEarnedDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AccountEarned
        ///  Mapping of account addresses to total deposit interest accrual
        ///  CurrencyId -> Owner -> EarnedSnapshot
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.EarnedSnapshot> AccountEarned(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.AccountEarnedParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.EarnedSnapshot>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BorrowIndexParams
        ///  Accumulator of the total earned interest rate since the opening of the market
        ///  CurrencyId -> u128
        /// </summary>
        public static string BorrowIndexParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "BorrowIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BorrowIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string BorrowIndexDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BorrowIndex
        ///  Accumulator of the total earned interest rate since the opening of the market
        ///  CurrencyId -> u128
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> BorrowIndex(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.BorrowIndexParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExchangeRateParams
        ///  The exchange rate from the underlying to the internal collateral
        /// </summary>
        public static string ExchangeRateParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "ExchangeRate", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExchangeRateDefault
        /// Default value as hex string
        /// </summary>
        public static string ExchangeRateDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ExchangeRate
        ///  The exchange rate from the underlying to the internal collateral
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> ExchangeRate(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.ExchangeRateParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BorrowRateParams
        ///  Mapping of borrow rate to currency type
        /// </summary>
        public static string BorrowRateParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "BorrowRate", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BorrowRateDefault
        /// Default value as hex string
        /// </summary>
        public static string BorrowRateDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BorrowRate
        ///  Mapping of borrow rate to currency type
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> BorrowRate(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.BorrowRateParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupplyRateParams
        ///  Mapping of supply rate to currency type
        /// </summary>
        public static string SupplyRateParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "SupplyRate", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SupplyRateDefault
        /// Default value as hex string
        /// </summary>
        public static string SupplyRateDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> SupplyRate
        ///  Mapping of supply rate to currency type
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> SupplyRate(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.SupplyRateParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UtilizationRatioParams
        ///  Borrow utilization ratio
        /// </summary>
        public static string UtilizationRatioParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "UtilizationRatio", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UtilizationRatioDefault
        /// Default value as hex string
        /// </summary>
        public static string UtilizationRatioDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> UtilizationRatio
        ///  Borrow utilization ratio
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> UtilizationRatio(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.UtilizationRatioParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketsParams
        ///  Mapping of asset id to its market
        /// </summary>
        public static string MarketsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "Markets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketsDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Markets
        ///  Mapping of asset id to its market
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Market> Markets(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.MarketsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Market>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnderlyingAssetIdParams
        ///  Mapping of lend token id to asset id
        ///  `lend token id`: voucher token id
        ///  `asset id`: underlying token id
        /// </summary>
        public static string UnderlyingAssetIdParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "UnderlyingAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnderlyingAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string UnderlyingAssetIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnderlyingAssetId
        ///  Mapping of lend token id to asset id
        ///  `lend token id`: voucher token id
        ///  `asset id`: underlying token id
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> UnderlyingAssetId(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.UnderlyingAssetIdParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardSupplySpeedParams
        ///  Mapping of token id to supply reward speed
        /// </summary>
        public static string RewardSupplySpeedParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardSupplySpeed", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardSupplySpeedDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardSupplySpeedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardSupplySpeed
        ///  Mapping of token id to supply reward speed
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RewardSupplySpeed(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardSupplySpeedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardBorrowSpeedParams
        ///  Mapping of token id to borrow reward speed
        /// </summary>
        public static string RewardBorrowSpeedParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardBorrowSpeed", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardBorrowSpeedDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardBorrowSpeedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardBorrowSpeed
        ///  Mapping of token id to borrow reward speed
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RewardBorrowSpeed(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardBorrowSpeedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardSupplyStateParams
        ///  The Reward market supply state for each market
        /// </summary>
        public static string RewardSupplyStateParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardSupplyState", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardSupplyStateDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardSupplyStateDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardSupplyState
        ///  The Reward market supply state for each market
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState> RewardSupplyState(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardSupplyStateParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardBorrowStateParams
        ///  The Reward market borrow state for each market
        /// </summary>
        public static string RewardBorrowStateParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardBorrowState", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardBorrowStateDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardBorrowStateDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardBorrowState
        ///  The Reward market borrow state for each market
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState> RewardBorrowState(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardBorrowStateParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.lend_market.types.RewardMarketState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardSupplierIndexParams
        ///   The Reward index for each market for each supplier as of the last time they accrued Reward
        /// </summary>
        public static string RewardSupplierIndexParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardSupplierIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> RewardSupplierIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardSupplierIndexDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardSupplierIndex
        ///   The Reward index for each market for each supplier as of the last time they accrued Reward
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RewardSupplierIndex(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardSupplierIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardBorrowerIndexParams
        ///   The Reward index for each market for each borrower as of the last time they accrued Reward
        /// </summary>
        public static string RewardBorrowerIndexParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardBorrowerIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> RewardBorrowerIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardBorrowerIndexDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardBorrowerIndex
        ///   The Reward index for each market for each borrower as of the last time they accrued Reward
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RewardBorrowerIndex(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardBorrowerIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardAccuredParams
        ///  The reward accrued but not yet transferred to each user.
        /// </summary>
        public static string RewardAccuredParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("LendMarket", "RewardAccured", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardAccuredDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardAccuredDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RewardAccured
        ///  The reward accrued but not yet transferred to each user.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RewardAccured(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.RewardAccuredParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketBondParams
        /// </summary>
        public static string MarketBondParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("LendMarket", "MarketBond", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketBondDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketBond
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70> MarketBond(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = LendMarketStorage.MarketBondParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT70>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> LendMarketCalls
    /// </summary>
    public sealed class LendMarketCalls
    {
        
        /// <summary>
        /// >> add_market
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddMarket(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Market market)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(market.Encode());
            return new Method(131, "LendMarket", 0, "add_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> activate_market
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ActivateMarket(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(131, "LendMarket", 1, "activate_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_rate_model
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateRateModel(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, BifrostPolkadot.NetApi.Generated.Model.lend_market.rate_model.EnumInterestRateModel rate_model)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(rate_model.Encode());
            return new Method(131, "LendMarket", 2, "update_rate_model", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_market
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateMarket(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> collateral_factor, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> liquidation_threshold, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> reserve_factor, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> close_factor, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> liquidate_incentive_reserved_factor, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> liquidate_incentive, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> supply_cap, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> borrow_cap)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(collateral_factor.Encode());
            byteArray.AddRange(liquidation_threshold.Encode());
            byteArray.AddRange(reserve_factor.Encode());
            byteArray.AddRange(close_factor.Encode());
            byteArray.AddRange(liquidate_incentive_reserved_factor.Encode());
            byteArray.AddRange(liquidate_incentive.Encode());
            byteArray.AddRange(supply_cap.Encode());
            byteArray.AddRange(borrow_cap.Encode());
            return new Method(131, "LendMarket", 3, "update_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_update_market
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceUpdateMarket(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, BifrostPolkadot.NetApi.Generated.Model.lend_market.types.Market market)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(market.Encode());
            return new Method(131, "LendMarket", 4, "force_update_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddReward(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(131, "LendMarket", 5, "add_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_missing_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawMissingReward(BifrostPolkadot.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target_account, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target_account.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(131, "LendMarket", 6, "withdraw_missing_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_market_reward_speed
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateMarketRewardSpeed(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> supply_reward_per_block, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> borrow_reward_per_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(supply_reward_per_block.Encode());
            byteArray.AddRange(borrow_reward_per_block.Encode());
            return new Method(131, "LendMarket", 7, "update_market_reward_speed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimReward()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(131, "LendMarket", 8, "claim_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_reward_for_market
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRewardForMarket(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(131, "LendMarket", 9, "claim_reward_for_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> mint_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(mint_amount.Encode());
            return new Method(131, "LendMarket", 10, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> redeem_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(redeem_amount.Encode());
            return new Method(131, "LendMarket", 11, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem_all
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RedeemAll(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(131, "LendMarket", 12, "redeem_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> borrow
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Borrow(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> borrow_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(borrow_amount.Encode());
            return new Method(131, "LendMarket", 13, "borrow", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> repay_borrow
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RepayBorrow(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> repay_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(repay_amount.Encode());
            return new Method(131, "LendMarket", 14, "repay_borrow", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> repay_borrow_all
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RepayBorrowAll(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(131, "LendMarket", 15, "repay_borrow_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> collateral_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CollateralAsset(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Primitive.Bool enable)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(enable.Encode());
            return new Method(131, "LendMarket", 16, "collateral_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> liquidate_borrow
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LiquidateBorrow(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 borrower, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId liquidation_asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> repay_amount, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId collateral_asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(borrower.Encode());
            byteArray.AddRange(liquidation_asset_id.Encode());
            byteArray.AddRange(repay_amount.Encode());
            byteArray.AddRange(collateral_asset_id.Encode());
            return new Method(131, "LendMarket", 17, "liquidate_borrow", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_reserves
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddReserves(BifrostPolkadot.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress payer, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> add_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(payer.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(add_amount.Encode());
            return new Method(131, "LendMarket", 18, "add_reserves", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reduce_reserves
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReduceReserves(BifrostPolkadot.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress receiver, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> reduce_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(receiver.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(reduce_amount.Encode());
            return new Method(131, "LendMarket", 19, "reduce_reserves", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reduce_incentive_reserves
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReduceIncentiveReserves(BifrostPolkadot.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress receiver, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> redeem_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(receiver.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(redeem_amount.Encode());
            return new Method(131, "LendMarket", 20, "reduce_incentive_reserves", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_liquidation_free_collateral
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateLiquidationFreeCollateral(Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> collaterals)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collaterals.Encode());
            return new Method(131, "LendMarket", 21, "update_liquidation_free_collateral", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_market_bond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddMarketBond(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> market_bond)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(market_bond.Encode());
            return new Method(131, "LendMarket", 22, "add_market_bond", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> LendMarketConstants
    /// </summary>
    public sealed class LendMarketConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The loan's module id, keep all collaterals of CDPs.
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F6C646D6B74");
            return result;
        }
        
        /// <summary>
        /// >> RewardAssetId
        ///  Reward asset id.
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RewardAssetId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0001");
            return result;
        }
        
        /// <summary>
        /// >> LiquidationFreeAssetId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId LiquidationFreeAssetId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> MaxLengthLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLengthLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
    }
    
    /// <summary>
    /// >> LendMarketErrors
    /// </summary>
    public enum LendMarketErrors
    {
        
        /// <summary>
        /// >> InsufficientLiquidity
        /// Insufficient liquidity to borrow more or disable collateral
        /// </summary>
        InsufficientLiquidity,
        
        /// <summary>
        /// >> InsufficientDeposit
        /// Insufficient deposit to redeem
        /// </summary>
        InsufficientDeposit,
        
        /// <summary>
        /// >> TooMuchRepay
        /// Repay amount greater than allowed
        /// </summary>
        TooMuchRepay,
        
        /// <summary>
        /// >> DuplicateOperation
        /// Asset already enabled/disabled collateral
        /// </summary>
        DuplicateOperation,
        
        /// <summary>
        /// >> NoDeposit
        /// No deposit asset
        /// </summary>
        NoDeposit,
        
        /// <summary>
        /// >> InsufficientCollateral
        /// Repay amount more than collateral amount
        /// </summary>
        InsufficientCollateral,
        
        /// <summary>
        /// >> LiquidatorIsBorrower
        /// Liquidator is same as borrower
        /// </summary>
        LiquidatorIsBorrower,
        
        /// <summary>
        /// >> DepositsAreNotCollateral
        /// Deposits are not used as a collateral
        /// </summary>
        DepositsAreNotCollateral,
        
        /// <summary>
        /// >> InsufficientShortfall
        /// Insufficient shortfall to repay
        /// </summary>
        InsufficientShortfall,
        
        /// <summary>
        /// >> InsufficientReserves
        /// Insufficient reserves
        /// </summary>
        InsufficientReserves,
        
        /// <summary>
        /// >> InvalidRateModelParam
        /// Invalid rate model params
        /// </summary>
        InvalidRateModelParam,
        
        /// <summary>
        /// >> MarketNotActivated
        /// Market not activated
        /// </summary>
        MarketNotActivated,
        
        /// <summary>
        /// >> PriceOracleNotReady
        /// Oracle price not ready
        /// </summary>
        PriceOracleNotReady,
        
        /// <summary>
        /// >> PriceIsZero
        /// Oracle price is zero
        /// </summary>
        PriceIsZero,
        
        /// <summary>
        /// >> InvalidCurrencyId
        /// Invalid asset id
        /// </summary>
        InvalidCurrencyId,
        
        /// <summary>
        /// >> InvalidLendTokenId
        /// Invalid lend token id
        /// </summary>
        InvalidLendTokenId,
        
        /// <summary>
        /// >> MarketDoesNotExist
        /// Market does not exist
        /// </summary>
        MarketDoesNotExist,
        
        /// <summary>
        /// >> MarketAlreadyExists
        /// Market already exists
        /// </summary>
        MarketAlreadyExists,
        
        /// <summary>
        /// >> NewMarketMustHavePendingState
        /// New markets must have a pending state
        /// </summary>
        NewMarketMustHavePendingState,
        
        /// <summary>
        /// >> SupplyCapacityExceeded
        /// Upper bound of supplying is exceeded
        /// </summary>
        SupplyCapacityExceeded,
        
        /// <summary>
        /// >> BorrowCapacityExceeded
        /// Upper bound of borrowing is exceeded
        /// </summary>
        BorrowCapacityExceeded,
        
        /// <summary>
        /// >> InsufficientCash
        /// Insufficient cash in the pool
        /// </summary>
        InsufficientCash,
        
        /// <summary>
        /// >> InvalidFactor
        /// The factor should be greater than 0% and less than 100%
        /// </summary>
        InvalidFactor,
        
        /// <summary>
        /// >> InvalidSupplyCap
        /// The supply cap cannot be zero
        /// </summary>
        InvalidSupplyCap,
        
        /// <summary>
        /// >> InvalidExchangeRate
        /// The exchange rate should be greater than 0.02 and less than 1
        /// </summary>
        InvalidExchangeRate,
        
        /// <summary>
        /// >> InvalidAmount
        /// Amount cannot be zero
        /// </summary>
        InvalidAmount,
        
        /// <summary>
        /// >> PayerIsSigner
        /// Payer cannot be signer
        /// </summary>
        PayerIsSigner,
        
        /// <summary>
        /// >> CodecError
        /// Codec error
        /// </summary>
        CodecError,
        
        /// <summary>
        /// >> CollateralReserved
        /// Collateral is reserved and cannot be liquidated
        /// </summary>
        CollateralReserved,
        
        /// <summary>
        /// >> MarketBondDoesNotExist
        /// Market bond does not exist
        /// </summary>
        MarketBondDoesNotExist,
        
        /// <summary>
        /// >> ConversionError
        /// Error converting Vec to BoundedVec.
        /// </summary>
        ConversionError,
    }
}
