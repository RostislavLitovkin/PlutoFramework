//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> VtokenMintingStorage
    /// </summary>
    public sealed class VtokenMintingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VtokenMintingStorage Constructor
        /// </summary>
        public VtokenMintingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "Fees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UnlockDuration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "OngoingTimeUnit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinimumMint"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinimumRedeem"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenUnlockNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UserUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT50>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TimeUnitUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenToRebond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinTimeUnit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UnlockingTotal"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "HookIterationLimit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "SupportedEth"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "EthUnlockNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MintWithLockBlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "VtokenIncentiveCoef"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "VtokenLockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52>)));
        }
        
        /// <summary>
        /// >> FeesParams
        ///  The mint fee and redeem fee.
        /// </summary>
        public static string FeesParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "Fees", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FeesDefault
        /// Default value as hex string
        /// </summary>
        public static string FeesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Fees
        ///  The mint fee and redeem fee.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>> Fees(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.FeesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenPoolParams
        ///  Token pool amount
        /// </summary>
        public static string TokenPoolParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenPoolDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TokenPool
        ///  Token pool amount
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TokenPool(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenPoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnlockDurationParams
        ///  Unlock duration for each currency
        /// </summary>
        public static string UnlockDurationParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UnlockDuration", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnlockDurationDefault
        /// Default value as hex string
        /// </summary>
        public static string UnlockDurationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnlockDuration
        ///  Unlock duration for each currency
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit> UnlockDuration(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UnlockDurationParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingTimeUnitParams
        ///  Ongoing time unit for each currency
        /// </summary>
        public static string OngoingTimeUnitParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "OngoingTimeUnit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingTimeUnitDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingTimeUnitDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingTimeUnit
        ///  Ongoing time unit for each currency
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit> OngoingTimeUnit(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.OngoingTimeUnitParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumMintParams
        ///  Minimum mint amount for each currency
        /// </summary>
        public static string MinimumMintParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinimumMint", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinimumMintDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumMintDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinimumMint
        ///  Minimum mint amount for each currency
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinimumMint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinimumMintParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumRedeemParams
        ///  Minimum redeem amount for each currency
        /// </summary>
        public static string MinimumRedeemParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinimumRedeem", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinimumRedeemDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumRedeemDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinimumRedeem
        ///  Minimum redeem amount for each currency
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinimumRedeem(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinimumRedeemParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenUnlockNextIdParams
        ///  Next unlock id for each currency
        /// </summary>
        public static string TokenUnlockNextIdParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenUnlockNextId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenUnlockNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenUnlockNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TokenUnlockNextId
        ///  Next unlock id for each currency
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TokenUnlockNextId(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenUnlockNextIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenUnlockLedgerParams
        ///  According to currency_id and unlock_id, unlock information are stored.
        /// </summary>
        public static string TokenUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TokenUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenUnlockLedger
        ///  According to currency_id and unlock_id, unlock information are stored.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>> TokenUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserUnlockLedgerParams
        ///  According to the user's account, the locked amount and unlock id list are stored.
        /// </summary>
        public static string UserUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UserUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string UserUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserUnlockLedger
        ///  According to the user's account, the locked amount and unlock id list are stored.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT50>> UserUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UserUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT50>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerParams
        ///  The total amount of tokens that are currently locked for unlocking.
        /// </summary>
        public static string TimeUnitUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TimeUnitUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string TimeUnitUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedger
        ///  The total amount of tokens that are currently locked for unlocking.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>> TimeUnitUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TimeUnitUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenToRebondParams
        ///  The total amount of tokens that are currently locked for rebonding.
        /// </summary>
        public static string TokenToRebondParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenToRebond", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenToRebondDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenToRebondDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenToRebond
        ///  The total amount of tokens that are currently locked for rebonding.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TokenToRebond(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenToRebondParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinTimeUnitParams
        ///  The min time unit for each currency
        /// </summary>
        public static string MinTimeUnitParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinTimeUnit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinTimeUnitDefault
        /// Default value as hex string
        /// </summary>
        public static string MinTimeUnitDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> MinTimeUnit
        ///  The min time unit for each currency
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit> MinTimeUnit(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinTimeUnitParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnlockingTotalParams
        ///  The total amount of tokens that are currently unlocking.
        /// </summary>
        public static string UnlockingTotalParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UnlockingTotal", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnlockingTotalDefault
        /// Default value as hex string
        /// </summary>
        public static string UnlockingTotalDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UnlockingTotal
        ///  The total amount of tokens that are currently unlocking.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> UnlockingTotal(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UnlockingTotalParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HookIterationLimitParams
        ///  The hook iteration limit
        /// </summary>
        public static string HookIterationLimitParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "HookIterationLimit", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HookIterationLimitDefault
        /// Default value as hex string
        /// </summary>
        public static string HookIterationLimitDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> HookIterationLimit
        ///  The hook iteration limit
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HookIterationLimit(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.HookIterationLimitParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupportedEthParams
        /// </summary>
        public static string SupportedEthParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "SupportedEth", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupportedEthDefault
        /// Default value as hex string
        /// </summary>
        public static string SupportedEthDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SupportedEth
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15> SupportedEth(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.SupportedEthParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthUnlockNextIdParams
        ///  Next unlock id for all ETH tokens in SupportedEth list
        /// </summary>
        public static string EthUnlockNextIdParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "EthUnlockNextId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthUnlockNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string EthUnlockNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> EthUnlockNextId
        ///  Next unlock id for all ETH tokens in SupportedEth list
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> EthUnlockNextId(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.EthUnlockNextIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MintWithLockBlocksParams
        /// </summary>
        public static string MintWithLockBlocksParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MintWithLockBlocks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MintWithLockBlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string MintWithLockBlocksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MintWithLockBlocks
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MintWithLockBlocks(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MintWithLockBlocksParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoefParams
        /// </summary>
        public static string VtokenIncentiveCoefParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "VtokenIncentiveCoef", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoefDefault
        /// Default value as hex string
        /// </summary>
        public static string VtokenIncentiveCoefDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoef
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> VtokenIncentiveCoef(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.VtokenIncentiveCoefParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VtokenLockLedgerParams
        /// </summary>
        public static string VtokenLockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "VtokenLockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> VtokenLockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string VtokenLockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VtokenLockLedger
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52>> VtokenLockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.VtokenLockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenMintingCalls
    /// </summary>
    public sealed class VtokenMintingCalls
    {
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(115, "VtokenMinting", 0, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId v_currency_id, Substrate.NetApi.Model.Types.Primitive.U128 v_currency_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(v_currency_id.Encode());
            byteArray.AddRange(v_currency_amount.Encode());
            return new Method(115, "VtokenMinting", 1, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rebond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Rebond(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            return new Method(115, "VtokenMinting", 2, "rebond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rebond_by_unlock_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RebondByUnlockId(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U32 unlock_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(unlock_id.Encode());
            return new Method(115, "VtokenMinting", 3, "rebond_by_unlock_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_unlock_duration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUnlockDuration(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit unlock_duration)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(unlock_duration.Encode());
            return new Method(115, "VtokenMinting", 4, "set_unlock_duration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumMint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 minimum_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(minimum_amount.Encode());
            return new Method(115, "VtokenMinting", 5, "set_minimum_mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumRedeem(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 minimum_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(minimum_amount.Encode());
            return new Method(115, "VtokenMinting", 6, "set_minimum_redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_support_rebond_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddSupportRebondToken(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(115, "VtokenMinting", 7, "add_support_rebond_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_support_rebond_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveSupportRebondToken(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(115, "VtokenMinting", 8, "remove_support_rebond_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fees
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFees(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill mint_fee, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill redeem_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mint_fee.Encode());
            byteArray.AddRange(redeem_fee.Encode());
            return new Method(115, "VtokenMinting", 9, "set_fees", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_hook_iteration_limit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetHookIterationLimit(Substrate.NetApi.Model.Types.Primitive.U32 limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(limit.Encode());
            return new Method(115, "VtokenMinting", 10, "set_hook_iteration_limit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_unlocking_total
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUnlockingTotal(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            return new Method(115, "VtokenMinting", 11, "set_unlocking_total", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_min_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinTimeUnit(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit time_unit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(time_unit.Encode());
            return new Method(115, "VtokenMinting", 12, "set_min_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_ongoing_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOngoingTimeUnit(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit time_unit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(time_unit.Encode());
            return new Method(115, "VtokenMinting", 13, "set_ongoing_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_with_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MintWithLock(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(115, "VtokenMinting", 14, "mint_with_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_incentive_minted_vtoken
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockIncentiveMintedVtoken(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId v_currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(v_currency_id.Encode());
            return new Method(115, "VtokenMinting", 15, "unlock_incentive_minted_vtoken", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_incentive_coef
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetIncentiveCoef(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId v_currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> new_coef_op)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(v_currency_id.Encode());
            byteArray.AddRange(new_coef_op.Encode());
            return new Method(115, "VtokenMinting", 16, "set_incentive_coef", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vtoken_incentive_lock_blocks
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVtokenIncentiveLockBlocks(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId v_currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> new_blockes_op)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(v_currency_id.Encode());
            byteArray.AddRange(new_blockes_op.Encode());
            return new Method(115, "VtokenMinting", 17, "set_vtoken_incentive_lock_blocks", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_supported_eth
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetSupportedEth(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15 eths)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(eths.Encode());
            return new Method(115, "VtokenMinting", 18, "set_supported_eth", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VtokenMintingConstants
    /// </summary>
    public sealed class VtokenMintingConstants
    {
        
        /// <summary>
        /// >> MaximumUnlockIdOfUser
        ///  Maximum unlock id of user
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaximumUnlockIdOfUser()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaximumUnlockIdOfTimeUnit
        ///  Maximum unlock id of time unit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaximumUnlockIdOfTimeUnit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLockRecords
        ///  Maximum unlocked vtoken records minted in an incentive mode
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLockRecords()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> EntranceAccount
        ///  Currency receive account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId EntranceAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F76746B696E");
            return result;
        }
        
        /// <summary>
        /// >> ExitAccount
        ///  Currency exit account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId ExitAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F76746F7574");
            return result;
        }
        
        /// <summary>
        /// >> FeeAccount
        ///  Fee account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 FeeAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RedeemFeeAccount
        ///  Redeem fee account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 RedeemFeeAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> IncentivePoolAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId IncentivePoolAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F696E706F6F");
            return result;
        }
        
        /// <summary>
        /// >> RelayChainToken
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayChainToken()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> MoonbeamChainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MoonbeamChainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xD4070000");
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenMintingErrors
    /// </summary>
    public enum VtokenMintingErrors
    {
        
        /// <summary>
        /// >> BelowMinimumMint
        /// Below minimum mint amount.
        /// </summary>
        BelowMinimumMint,
        
        /// <summary>
        /// >> BelowMinimumRedeem
        /// Below minimum redeem amount.
        /// </summary>
        BelowMinimumRedeem,
        
        /// <summary>
        /// >> InvalidRebondToken
        /// Invalid token to rebond.
        /// </summary>
        InvalidRebondToken,
        
        /// <summary>
        /// >> NotSupportTokenType
        /// Token type not support.
        /// </summary>
        NotSupportTokenType,
        
        /// <summary>
        /// >> NotEnoughBalanceToUnlock
        /// Not enough balance to unlock.
        /// </summary>
        NotEnoughBalanceToUnlock,
        
        /// <summary>
        /// >> TokenToRebondNotZero
        /// Token unlock ledger not found.
        /// </summary>
        TokenToRebondNotZero,
        
        /// <summary>
        /// >> OngoingTimeUnitNotSet
        /// Ongoing time unit not set.
        /// </summary>
        OngoingTimeUnitNotSet,
        
        /// <summary>
        /// >> TokenUnlockLedgerNotFound
        /// Token unlock ledger not found.
        /// </summary>
        TokenUnlockLedgerNotFound,
        
        /// <summary>
        /// >> UserUnlockLedgerNotFound
        /// User unlock ledger not found.
        /// </summary>
        UserUnlockLedgerNotFound,
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerNotFound
        /// Time unit unlock ledger not found.
        /// </summary>
        TimeUnitUnlockLedgerNotFound,
        
        /// <summary>
        /// >> UnlockDurationNotFound
        /// Unlock duration not found.
        /// </summary>
        UnlockDurationNotFound,
        
        /// <summary>
        /// >> Unexpected
        /// Unexpected error.
        /// </summary>
        Unexpected,
        
        /// <summary>
        /// >> CalculationOverflow
        /// Calculation overflow.
        /// </summary>
        CalculationOverflow,
        
        /// <summary>
        /// >> ExceedMaximumUnlockId
        /// Exceed maximum unlock id.
        /// </summary>
        ExceedMaximumUnlockId,
        
        /// <summary>
        /// >> TooManyRedeems
        /// Too many redeems.
        /// </summary>
        TooManyRedeems,
        
        /// <summary>
        /// >> CanNotRebond
        /// Can not rebond.
        /// </summary>
        CanNotRebond,
        
        /// <summary>
        /// >> NotEnoughBalance
        /// Not enough balance.
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> VeBNCCheckingError
        /// veBNC checking error.
        /// </summary>
        VeBNCCheckingError,
        
        /// <summary>
        /// >> IncentiveCoefNotFound
        /// IncentiveCoef not found.
        /// </summary>
        IncentiveCoefNotFound,
        
        /// <summary>
        /// >> TooManyLocks
        /// Too many locks.
        /// </summary>
        TooManyLocks,
        
        /// <summary>
        /// >> NoUnlockRecord
        /// No unlock record.
        /// </summary>
        NoUnlockRecord,
        
        /// <summary>
        /// >> FailToRemoveLock
        /// Fail to remove lock.
        /// </summary>
        FailToRemoveLock,
        
        /// <summary>
        /// >> BalanceZero
        /// Balance not zero.
        /// </summary>
        BalanceZero,
        
        /// <summary>
        /// >> IncentiveLockBlocksNotSet
        /// IncentiveLockBlocksNotSet
        /// </summary>
        IncentiveLockBlocksNotSet,
    }
}
