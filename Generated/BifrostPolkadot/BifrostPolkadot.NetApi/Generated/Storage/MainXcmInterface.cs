//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> XcmInterfaceStorage
    /// </summary>
    public sealed class XcmInterfaceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XcmInterfaceStorage Constructor
        /// </summary>
        public XcmInterfaceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcmInterface", "XcmWeightAndFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumXcmOperationType>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>)));
        }
        
        /// <summary>
        /// >> XcmWeightAndFeeParams
        ///  The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be
        ///  sufficient, otherwise the execution of XCM msg on relaychain will fail.
        /// 
        ///  XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)
        /// </summary>
        public static string XcmWeightAndFeeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumXcmOperationType> key)
        {
            return RequestGenerator.GetStorage("XcmInterface", "XcmWeightAndFee", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> XcmWeightAndFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string XcmWeightAndFeeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> XcmWeightAndFee
        ///  The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be
        ///  sufficient, otherwise the execution of XCM msg on relaychain will fail.
        /// 
        ///  XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> XcmWeightAndFee(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumXcmOperationType> key, string blockhash, CancellationToken token)
        {
            string parameters = XcmInterfaceStorage.XcmWeightAndFeeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XcmInterfaceCalls
    /// </summary>
    public sealed class XcmInterfaceCalls
    {
        
        /// <summary>
        /// >> update_xcm_dest_weight_and_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateXcmDestWeightAndFee(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumXcmOperationType, BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> updates)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(updates.Encode());
            return new Method(117, "XcmInterface", 0, "update_xcm_dest_weight_and_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_ethereum_assets
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferEthereumAssets(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 to)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(to.Encode());
            return new Method(117, "XcmInterface", 2, "transfer_ethereum_assets", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> XcmInterfaceConstants
    /// </summary>
    public sealed class XcmInterfaceConstants
    {
        
        /// <summary>
        /// >> ParachainId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
    }
    
    /// <summary>
    /// >> XcmInterfaceErrors
    /// </summary>
    public enum XcmInterfaceErrors
    {
        
        /// <summary>
        /// >> XcmSendFailed
        /// Failed to send XCM message.
        /// </summary>
        XcmSendFailed,
        
        /// <summary>
        /// >> OperationWeightAndFeeNotExist
        /// The weight and fee for the operation does not exist.
        /// </summary>
        OperationWeightAndFeeNotExist,
        
        /// <summary>
        /// >> FailToConvert
        /// Failed to convert currency id.
        /// </summary>
        FailToConvert,
        
        /// <summary>
        /// >> UnweighableMessage
        /// The message is unweighable.
        /// </summary>
        UnweighableMessage,
    }
}
