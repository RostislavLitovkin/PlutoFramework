//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SlpxStorage
    /// </summary>
    public sealed class SlpxStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SlpxStorage Constructor
        /// </summary>
        public SlpxStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "WhitelistAccountId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "ExecutionFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "TransferToFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "XcmEthereumCallConfiguration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "CurrencyIdList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "SupportXcmFeeList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "OrderQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "DelayBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "HyperBridgeOracle"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HyperBridgeOracleConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "HydrationOracle"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HydrationOracleConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "AsyncMintConfig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.AsyncMintConfiguration)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "AsyncMintExecutions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8>)));
        }
        
        /// <summary>
        /// >> WhitelistAccountIdParams
        ///  Contract whitelist
        /// </summary>
        public static string WhitelistAccountIdParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain key)
        {
            return RequestGenerator.GetStorage("Slpx", "WhitelistAccountId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WhitelistAccountIdDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistAccountIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistAccountId
        ///  Contract whitelist
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61> WhitelistAccountId(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.WhitelistAccountIdParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExecutionFeeParams
        ///  Charge corresponding fees for different CurrencyId
        /// </summary>
        public static string ExecutionFeeParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slpx", "ExecutionFee", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExecutionFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string ExecutionFeeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExecutionFee
        ///  Charge corresponding fees for different CurrencyId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ExecutionFee(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.ExecutionFeeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TransferToFeeParams
        ///  XCM fee for transferring to Moonbeam(BNC)
        /// </summary>
        public static string TransferToFeeParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain key)
        {
            return RequestGenerator.GetStorage("Slpx", "TransferToFee", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TransferToFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string TransferToFeeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TransferToFee
        ///  XCM fee for transferring to Moonbeam(BNC)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TransferToFee(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.TransferToFeeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfigurationParams
        ///  Xcm Oracle configuration
        /// </summary>
        public static string XcmEthereumCallConfigurationParams()
        {
            return RequestGenerator.GetStorage("Slpx", "XcmEthereumCallConfiguration", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfigurationDefault
        /// Default value as hex string
        /// </summary>
        public static string XcmEthereumCallConfigurationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfiguration
        ///  Xcm Oracle configuration
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration> XcmEthereumCallConfiguration(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.XcmEthereumCallConfigurationParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyIdListParams
        ///  Currency to support xcm oracle
        /// </summary>
        public static string CurrencyIdListParams()
        {
            return RequestGenerator.GetStorage("Slpx", "CurrencyIdList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrencyIdListDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyIdListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyIdList
        ///  Currency to support xcm oracle
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15> CurrencyIdList(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.CurrencyIdListParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupportXcmFeeListParams
        ///  Currency to support xcm fee
        /// </summary>
        public static string SupportXcmFeeListParams()
        {
            return RequestGenerator.GetStorage("Slpx", "SupportXcmFeeList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupportXcmFeeListDefault
        /// Default value as hex string
        /// </summary>
        public static string SupportXcmFeeListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SupportXcmFeeList
        ///  Currency to support xcm fee
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62> SupportXcmFeeList(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.SupportXcmFeeListParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrderQueueParams
        ///  Order queue
        /// </summary>
        public static string OrderQueueParams()
        {
            return RequestGenerator.GetStorage("Slpx", "OrderQueue", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OrderQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string OrderQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OrderQueue
        ///  Order queue
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63> OrderQueue(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.OrderQueueParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelayBlockParams
        ///  Delay block
        /// </summary>
        public static string DelayBlockParams()
        {
            return RequestGenerator.GetStorage("Slpx", "DelayBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DelayBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string DelayBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> DelayBlock
        ///  Delay block
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DelayBlock(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.DelayBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HyperBridgeOracleParams
        ///  HyperBridge Oracle Config
        /// </summary>
        public static string HyperBridgeOracleParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Slpx", "HyperBridgeOracle", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HyperBridgeOracleDefault
        /// Default value as hex string
        /// </summary>
        public static string HyperBridgeOracleDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HyperBridgeOracle
        ///  HyperBridge Oracle Config
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HyperBridgeOracleConfig> HyperBridgeOracle(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.HyperBridgeOracleParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HyperBridgeOracleConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HydrationOracleParams
        ///  Hydration chain oracle configuration
        /// </summary>
        public static string HydrationOracleParams()
        {
            return RequestGenerator.GetStorage("Slpx", "HydrationOracle", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HydrationOracleDefault
        /// Default value as hex string
        /// </summary>
        public static string HydrationOracleDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HydrationOracle
        ///  Hydration chain oracle configuration
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HydrationOracleConfig> HydrationOracle(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.HydrationOracleParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.HydrationOracleConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AsyncMintConfigParams
        ///  Async Mint configuration
        /// </summary>
        public static string AsyncMintConfigParams()
        {
            return RequestGenerator.GetStorage("Slpx", "AsyncMintConfig", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AsyncMintConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string AsyncMintConfigDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AsyncMintConfig
        ///  Async Mint configuration
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.AsyncMintConfiguration> AsyncMintConfig(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.AsyncMintConfigParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.AsyncMintConfiguration>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AsyncMintExecutionsParams
        ///  Async Mint execution records
        /// </summary>
        public static string AsyncMintExecutionsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Slpx", "AsyncMintExecutions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AsyncMintExecutionsDefault
        /// Default value as hex string
        /// </summary>
        public static string AsyncMintExecutionsDefault()
        {
            return "0x0000000000";
        }
        
        /// <summary>
        /// >> AsyncMintExecutions
        ///  Async Mint execution records
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8>> AsyncMintExecutions(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.AsyncMintExecutionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpxCalls
    /// </summary>
    public sealed class SlpxCalls
    {
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain target_chain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(125, "Slpx", 0, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> maybe_currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId v_currency_id, Substrate.NetApi.Model.Types.Primitive.U128 v_currency_amount, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain target_chain)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_currency_id.Encode());
            byteArray.AddRange(v_currency_id.Encode());
            byteArray.AddRange(v_currency_amount.Encode());
            byteArray.AddRange(target_chain.Encode());
            return new Method(125, "Slpx", 2, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddWhitelist(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain support_chain, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 contract_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(contract_address.Encode());
            return new Method(125, "Slpx", 4, "add_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveWhitelist(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain support_chain, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 contract_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(contract_address.Encode());
            return new Method(125, "Slpx", 5, "remove_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_execution_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExecutionFee(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 execution_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(execution_fee.Encode());
            return new Method(125, "Slpx", 6, "set_execution_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_transfer_to_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetTransferToFee(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain support_chain, Substrate.NetApi.Model.Types.Primitive.U128 transfer_to_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(transfer_to_fee.Encode());
            return new Method(125, "Slpx", 7, "set_transfer_to_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> support_xcm_oracle
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SupportXcmOracle(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.Bool is_support)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(is_support.Encode());
            return new Method(125, "Slpx", 8, "support_xcm_oracle", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_xcm_oracle_configuration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetXcmOracleConfiguration(Substrate.NetApi.Model.Types.Primitive.U128 xcm_fee, BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight xcm_weight, Substrate.NetApi.Model.Types.Primitive.U32 period, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 contract)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(xcm_fee.Encode());
            byteArray.AddRange(xcm_weight.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(contract.Encode());
            return new Method(125, "Slpx", 9, "set_xcm_oracle_configuration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_currency_support_xcm_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrencySupportXcmFee(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.Bool is_support)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(is_support.Encode());
            return new Method(125, "Slpx", 10, "set_currency_support_xcm_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_delay_block
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetDelayBlock(Substrate.NetApi.Model.Types.Primitive.U32 delay_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delay_block.Encode());
            return new Method(125, "Slpx", 11, "set_delay_block", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_add_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceAddOrder(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.EnumOrderCaller source_chain_caller, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 bifrost_chain_caller, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain target_chain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source_chain_caller.Encode());
            byteArray.AddRange(bifrost_chain_caller.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(125, "Slpx", 12, "force_add_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_with_channel_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MintWithChannelId(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 evm_caller, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain target_chain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(125, "Slpx", 13, "mint_with_channel_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> evm_create_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EvmCreateOrder(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 source_chain_caller, Substrate.NetApi.Model.Types.Primitive.U64 source_chain_id, Substrate.NetApi.Model.Types.Primitive.U128 source_chain_block_number, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain send_to, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 remark, Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source_chain_caller.Encode());
            byteArray.AddRange(source_chain_id.Encode());
            byteArray.AddRange(source_chain_block_number.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            byteArray.AddRange(send_to.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(125, "Slpx", 14, "evm_create_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_hyperbridge_oracle
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetHyperbridgeOracle(Substrate.NetApi.Model.Types.Primitive.U32 chain_id, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160 to, Substrate.NetApi.Model.Types.Primitive.U64 timeout, Substrate.NetApi.Model.Types.Primitive.U32 period, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18 tokens, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 payer, Substrate.NetApi.Model.Types.Primitive.U128 fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(chain_id.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(timeout.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(tokens.Encode());
            byteArray.AddRange(payer.Encode());
            byteArray.AddRange(fee.Encode());
            return new Method(125, "Slpx", 15, "set_hyperbridge_oracle", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_hydration_oracle
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetHydrationOracle(Substrate.NetApi.Model.Types.Primitive.U32 period, BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight weight, Substrate.NetApi.Model.Types.Primitive.U128 fee, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT19 tokens)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(weight.Encode());
            byteArray.AddRange(fee.Encode());
            byteArray.AddRange(tokens.Encode());
            return new Method(125, "Slpx", 16, "set_hydration_oracle", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> async_mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AsyncMint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 currency_amount, Substrate.NetApi.Model.Types.Primitive.U32 from_chain_id, Substrate.NetApi.Model.Types.Primitive.U128 slpx_input_v_currency_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(currency_amount.Encode());
            byteArray.AddRange(from_chain_id.Encode());
            byteArray.AddRange(slpx_input_v_currency_amount.Encode());
            return new Method(125, "Slpx", 18, "async_mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_async_mint_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateAsyncMintConfig(BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.AsyncMintConfiguration config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(config.Encode());
            return new Method(125, "Slpx", 20, "update_async_mint_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_increase_hyperbridge_reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceIncreaseHyperbridgeReserve(Substrate.NetApi.Model.Types.Primitive.U32 from_chain_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 additional_v_currency_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(from_chain_id.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(additional_v_currency_amount.Encode());
            return new Method(125, "Slpx", 21, "force_increase_hyperbridge_reserve", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SlpxConstants
    /// </summary>
    public sealed class SlpxConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        ///  TreasuryAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ParachainId
        ///  ParaId of the parachain
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
        
        /// <summary>
        /// >> MaxOrderSize
        ///  The maximum number of order
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxOrderSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> MaxUserOrderSize
        ///  The maximum number of user order
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUserOrderSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x6269662D736C7078");
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpxErrors
    /// </summary>
    public enum SlpxErrors
    {
        
        /// <summary>
        /// >> AccountAlreadyExists
        /// Contract Account already exists in the whitelist
        /// </summary>
        AccountAlreadyExists,
        
        /// <summary>
        /// >> CurrencyAlreadyExists
        /// Currency already exists in the whitelist
        /// </summary>
        CurrencyAlreadyExists,
        
        /// <summary>
        /// >> AccountNotFound
        /// Contract Account is not in the whitelist
        /// </summary>
        AccountNotFound,
        
        /// <summary>
        /// >> CurrencyNotFound
        /// Currency is not in the whitelist
        /// </summary>
        CurrencyNotFound,
        
        /// <summary>
        /// >> WhitelistOverflow
        /// The maximum number of whitelist addresses is 10
        /// </summary>
        WhitelistOverflow,
        
        /// <summary>
        /// >> NotSetExecutionFee
        /// Execution fee not set
        /// </summary>
        NotSetExecutionFee,
        
        /// <summary>
        /// >> FreeBalanceTooLow
        /// Insufficient balance to execute the fee
        /// </summary>
        FreeBalanceTooLow,
        
        /// <summary>
        /// >> OrderQueueOverflow
        /// The maximum number of order is 500
        /// </summary>
        OrderQueueOverflow,
        
        /// <summary>
        /// >> CurrencyListOverflow
        /// The maximum number of currency id is 10
        /// </summary>
        CurrencyListOverflow,
        
        /// <summary>
        /// >> ErrorConvertVtoken
        /// Convert vtoken error
        /// </summary>
        ErrorConvertVtoken,
        
        /// <summary>
        /// >> ErrorEncode
        /// Error encode
        /// </summary>
        ErrorEncode,
        
        /// <summary>
        /// >> ErrorValidating
        /// </summary>
        ErrorValidating,
        
        /// <summary>
        /// >> ErrorDelivering
        /// </summary>
        ErrorDelivering,
        
        /// <summary>
        /// >> ErrorVtokenMiting
        /// </summary>
        ErrorVtokenMiting,
        
        /// <summary>
        /// >> ErrorTransferTo
        /// </summary>
        ErrorTransferTo,
        
        /// <summary>
        /// >> ErrorChargeFee
        /// </summary>
        ErrorChargeFee,
        
        /// <summary>
        /// >> ErrorArguments
        /// </summary>
        ErrorArguments,
        
        /// <summary>
        /// >> Unsupported
        /// </summary>
        Unsupported,
        
        /// <summary>
        /// >> AsyncMintTooFrequent
        /// Async Mint execution too frequent
        /// </summary>
        AsyncMintTooFrequent,
        
        /// <summary>
        /// >> AsyncMintIssuanceRatioTooHigh
        /// Async Mint issuance ratio too high
        /// </summary>
        AsyncMintIssuanceRatioTooHigh,
        
        /// <summary>
        /// >> AsyncMintConfigNotSet
        /// Async Mint configuration not set
        /// </summary>
        AsyncMintConfigNotSet,
    }
}
