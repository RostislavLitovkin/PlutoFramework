//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ChannelCommissionStorage
    /// </summary>
    public sealed class ChannelCommissionStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ChannelCommissionStorage Constructor
        /// </summary>
        public ChannelCommissionStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "ChannelNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "Channels"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT73>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "CommissionTokens"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "ChannelCommissionTokenRates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "ChannelVtokenShares"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "VtokenIssuanceSnapshots"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "PeriodVtokenTotalMint"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "PeriodVtokenTotalRedeem"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "PeriodChannelVtokenMint"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "PeriodTotalCommissions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "PeriodClearedCommissions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ChannelCommission", "ChannelClaimableCommissions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> ChannelNextIdParams
        ///  Auto increment channel id
        /// </summary>
        public static string ChannelNextIdParams()
        {
            return RequestGenerator.GetStorage("ChannelCommission", "ChannelNextId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ChannelNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string ChannelNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ChannelNextId
        ///  Auto increment channel id
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ChannelNextId(string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.ChannelNextIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChannelsParams
        ///  Mapping a channel id to a receive account and a name, ���channel_id =>(receive_account,
        ///  name)���
        /// </summary>
        public static string ChannelsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "Channels", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ChannelsDefault
        /// Default value as hex string
        /// </summary>
        public static string ChannelsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Channels
        ///  Mapping a channel id to a receive account and a name, ���channel_id =>(receive_account,
        ///  name)���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT73>> Channels(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.ChannelsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT73>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CommissionTokensParams
        ///  Mapping a vtoken to a commission token, ���vtoken => commission_token���
        /// </summary>
        public static string CommissionTokensParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "CommissionTokens", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CommissionTokensDefault
        /// Default value as hex string
        /// </summary>
        public static string CommissionTokensDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CommissionTokens
        ///  Mapping a vtoken to a commission token, ���vtoken => commission_token���
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> CommissionTokens(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.CommissionTokensParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChannelCommissionTokenRatesParams
        ///  Mapping a channel + vtoken to corresponding commission rate, ���(channel_id, vtoken) =>
        ///  commission rate���
        /// </summary>
        public static string ChannelCommissionTokenRatesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "ChannelCommissionTokenRates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ChannelCommissionTokenRatesDefault
        /// Default value as hex string
        /// </summary>
        public static string ChannelCommissionTokenRatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ChannelCommissionTokenRates
        ///  Mapping a channel + vtoken to corresponding commission rate, ���(channel_id, vtoken) =>
        ///  commission rate���
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent> ChannelCommissionTokenRates(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.ChannelCommissionTokenRatesParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChannelVtokenSharesParams
        ///  Mapping a channel + vtoken to corresponding channel share, ���(channel_id, vtoken) => share���
        /// </summary>
        public static string ChannelVtokenSharesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "ChannelVtokenShares", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ChannelVtokenSharesDefault
        /// Default value as hex string
        /// </summary>
        public static string ChannelVtokenSharesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ChannelVtokenShares
        ///  Mapping a channel + vtoken to corresponding channel share, ���(channel_id, vtoken) => share���
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill> ChannelVtokenShares(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.ChannelVtokenSharesParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VtokenIssuanceSnapshotsParams
        ///  ���vtoken => (old_issuance, new_issuance)���,old_issuance is the vtoken issuance at last
        ///  clearing point,  new_issuance is the ongoing accumulative issuance the last clearing point
        /// </summary>
        public static string VtokenIssuanceSnapshotsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "VtokenIssuanceSnapshots", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VtokenIssuanceSnapshotsDefault
        /// Default value as hex string
        /// </summary>
        public static string VtokenIssuanceSnapshotsDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> VtokenIssuanceSnapshots
        ///  ���vtoken => (old_issuance, new_issuance)���,old_issuance is the vtoken issuance at last
        ///  clearing point,  new_issuance is the ongoing accumulative issuance the last clearing point
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> VtokenIssuanceSnapshots(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.VtokenIssuanceSnapshotsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalMintParams
        ///  Vtoken total minted amount in the ongoing period for the chain, ���vtoken => (old_total_mint,
        ///  new_total_mint)���
        /// </summary>
        public static string PeriodVtokenTotalMintParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "PeriodVtokenTotalMint", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalMintDefault
        /// Default value as hex string
        /// </summary>
        public static string PeriodVtokenTotalMintDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalMint
        ///  Vtoken total minted amount in the ongoing period for the chain, ���vtoken => (old_total_mint,
        ///  new_total_mint)���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> PeriodVtokenTotalMint(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.PeriodVtokenTotalMintParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalRedeemParams
        ///  Vtoken total redeemed amount in the ongoing period for the chain, ���vtoken =>
        ///  (old_total_redeem, new_total_redeem)���
        /// </summary>
        public static string PeriodVtokenTotalRedeemParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "PeriodVtokenTotalRedeem", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalRedeemDefault
        /// Default value as hex string
        /// </summary>
        public static string PeriodVtokenTotalRedeemDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PeriodVtokenTotalRedeem
        ///  Vtoken total redeemed amount in the ongoing period for the chain, ���vtoken =>
        ///  (old_total_redeem, new_total_redeem)���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> PeriodVtokenTotalRedeem(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.PeriodVtokenTotalRedeemParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PeriodChannelVtokenMintParams
        ///  Vtoken minted amount in the ongoing period for the channel, ���(channel_id, vtoken) =>
        ///  (old_mint_amount, new_mint_amount)���
        /// </summary>
        public static string PeriodChannelVtokenMintParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "PeriodChannelVtokenMint", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PeriodChannelVtokenMintDefault
        /// Default value as hex string
        /// </summary>
        public static string PeriodChannelVtokenMintDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PeriodChannelVtokenMint
        ///  Vtoken minted amount in the ongoing period for the channel, ���(channel_id, vtoken) =>
        ///  (old_mint_amount, new_mint_amount)���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> PeriodChannelVtokenMint(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.PeriodChannelVtokenMintParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PeriodTotalCommissionsParams
        ///  Commission pool for last period and ongoing period, ���commission token => (old_amount,
        ///  new_amount)���
        /// </summary>
        public static string PeriodTotalCommissionsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "PeriodTotalCommissions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PeriodTotalCommissionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PeriodTotalCommissionsDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PeriodTotalCommissions
        ///  Commission pool for last period and ongoing period, ���commission token => (old_amount,
        ///  new_amount)���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> PeriodTotalCommissions(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.PeriodTotalCommissionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PeriodClearedCommissionsParams
        ///  Commission amount that has been cleared for the current clearing process, ���commission token
        ///  => amount���
        /// </summary>
        public static string PeriodClearedCommissionsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "PeriodClearedCommissions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PeriodClearedCommissionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PeriodClearedCommissionsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PeriodClearedCommissions
        ///  Commission amount that has been cleared for the current clearing process, ���commission token
        ///  => amount���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> PeriodClearedCommissions(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.PeriodClearedCommissionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChannelClaimableCommissionsParams
        ///  Commission amount to be claimed by channels, ���channel id + commission token => amount���
        /// </summary>
        public static string ChannelClaimableCommissionsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("ChannelCommission", "ChannelClaimableCommissions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ChannelClaimableCommissionsDefault
        /// Default value as hex string
        /// </summary>
        public static string ChannelClaimableCommissionsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ChannelClaimableCommissions
        ///  Commission amount to be claimed by channels, ���channel id + commission token => amount���
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ChannelClaimableCommissions(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = ChannelCommissionStorage.ChannelClaimableCommissionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ChannelCommissionCalls
    /// </summary>
    public sealed class ChannelCommissionCalls
    {
        
        /// <summary>
        /// >> register_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterChannel(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> channel_name, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 receive_account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_name.Encode());
            byteArray.AddRange(receive_account.Encode());
            return new Method(136, "ChannelCommission", 0, "register_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveChannel(Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            return new Method(136, "ChannelCommission", 1, "remove_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_channel_receive_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateChannelReceiveAccount(Substrate.NetApi.Model.Types.Primitive.U32 channel_id, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 receive_account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            byteArray.AddRange(receive_account.Encode());
            return new Method(136, "ChannelCommission", 2, "update_channel_receive_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_channel_commission_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetChannelCommissionToken(Substrate.NetApi.Model.Types.Primitive.U32 channel_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent rate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(rate.Encode());
            return new Method(136, "ChannelCommission", 3, "set_channel_commission_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_commission_tokens
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCommissionTokens(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> commission_token_op)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(commission_token_op.Encode());
            return new Method(136, "ChannelCommission", 4, "set_commission_tokens", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_commissions
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimCommissions(Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            return new Method(136, "ChannelCommission", 5, "claim_commissions", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_channel_vtoken_shares
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetChannelVtokenShares(Substrate.NetApi.Model.Types.Primitive.U32 channel_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill shares)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(shares.Encode());
            return new Method(136, "ChannelCommission", 6, "set_channel_vtoken_shares", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ChannelCommissionConstants
    /// </summary>
    public sealed class ChannelCommissionConstants
    {
        
        /// <summary>
        /// >> ClearingDuration
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ClearingDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40380000");
            return result;
        }
        
        /// <summary>
        /// >> NameLengthLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NameLengthLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ChannelCommissionErrors
    /// </summary>
    public enum ChannelCommissionErrors
    {
        
        /// <summary>
        /// >> Overflow
        /// Overflow error, indicating that a mathematical operation exceeded the allowed numeric range.
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> ChannelNameTooLong
        /// Error indicating that the provided channel name exceeds the maximum allowed length.
        /// </summary>
        ChannelNameTooLong,
        
        /// <summary>
        /// >> ConversionError
        /// Conversion error, indicating a failure during a type conversion operation.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> ChannelNotExist
        /// Error indicating that the specified channel does not exist in storage.
        /// </summary>
        ChannelNotExist,
        
        /// <summary>
        /// >> TransferError
        /// Transfer error, indicating that a fund transfer operation has failed.
        /// </summary>
        TransferError,
        
        /// <summary>
        /// >> VtokenNotConfiguredForCommission
        /// Error indicating that the vToken is not configured for commission calculations.
        /// </summary>
        VtokenNotConfiguredForCommission,
        
        /// <summary>
        /// >> InvalidCommissionRate
        /// Invalid commission rate, indicating that the provided commission rate is out of range or malformed.
        /// </summary>
        InvalidCommissionRate,
        
        /// <summary>
        /// >> CommissionTokenAlreadySet
        /// Error indicating that the commission token has already been set and cannot be reconfigured.
        /// </summary>
        CommissionTokenAlreadySet,
        
        /// <summary>
        /// >> InvalidVtoken
        /// Invalid vToken, indicating that the provided vToken is invalid or unrecognized.
        /// </summary>
        InvalidVtoken,
        
        /// <summary>
        /// >> NoChangesMade
        /// Error indicating that no changes were made during a modification operation.
        /// This means that a modification request was issued but did not result in any actual changes.
        /// </summary>
        NoChangesMade,
        
        /// <summary>
        /// >> DivisionByZero
        /// Error indicating a division operation encountered a divisor of zero.
        /// This is a critical error, as division by zero is undefined and cannot be performed.
        /// </summary>
        DivisionByZero,
        
        /// <summary>
        /// >> RemovalNotComplete
        /// Error indicating that the removal operation was not successfully completed.
        /// This means an attempt to remove a resource or record did not succeed.
        /// </summary>
        RemovalNotComplete,
        
        /// <summary>
        /// >> TokenToVtokenConversionFailed
        /// Error indicating a failure during token-to-vToken conversion via exchange rate calculation.
        /// This can occur when the conversion formula encounters an unexpected condition or invalid input.
        /// </summary>
        TokenToVtokenConversionFailed,
    }
}
