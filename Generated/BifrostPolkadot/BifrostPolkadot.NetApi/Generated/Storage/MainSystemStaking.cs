//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SystemStakingStorage
    /// </summary>
    public sealed class SystemStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SystemStakingStorage Constructor
        /// </summary>
        public SystemStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SystemStaking", "Round"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.RoundInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SystemStaking", "TokenStatus"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.TokenInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SystemStaking", "TokenList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57)));
        }
        
        /// <summary>
        /// >> RoundParams
        ///  Current Round Information
        /// </summary>
        public static string RoundParams()
        {
            return RequestGenerator.GetStorage("SystemStaking", "Round", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RoundDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Round
        ///  Current Round Information
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.RoundInfo> Round(string blockhash, CancellationToken token)
        {
            string parameters = SystemStakingStorage.RoundParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.RoundInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenStatusParams
        ///  The tokenInfo for each currency
        /// </summary>
        public static string TokenStatusParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("SystemStaking", "TokenStatus", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenStatusDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenStatusDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenStatus
        ///  The tokenInfo for each currency
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.TokenInfo> TokenStatus(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SystemStakingStorage.TokenStatusParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.types.TokenInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenListParams
        ///  All token sets
        /// </summary>
        public static string TokenListParams()
        {
            return RequestGenerator.GetStorage("SystemStaking", "TokenList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TokenListDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenList
        ///  All token sets
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57> TokenList(string blockhash, CancellationToken token)
        {
            string parameters = SystemStakingStorage.TokenListParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SystemStakingCalls
    /// </summary>
    public sealed class SystemStakingCalls
    {
        
        /// <summary>
        /// >> token_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TokenConfig(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> exec_delay, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> system_stakable_base)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token.Encode());
            byteArray.AddRange(exec_delay.Encode());
            byteArray.AddRange(system_stakable_base.Encode());
            return new Method(120, "SystemStaking", 0, "token_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delete_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DeleteToken(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token.Encode());
            return new Method(120, "SystemStaking", 1, "delete_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refresh_token_info
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RefreshTokenInfo(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token.Encode());
            return new Method(120, "SystemStaking", 2, "refresh_token_info", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Payout(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token.Encode());
            return new Method(120, "SystemStaking", 3, "payout", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SystemStakingConstants
    /// </summary>
    public sealed class SystemStakingConstants
    {
        
        /// <summary>
        /// >> BenefitReceivingAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 BenefitReceivingAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F66656573680000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTokenLen
        ///  Max token length 500
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTokenLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFarmingPoolIdLen
        ///  Max farming poolid length
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFarmingPoolIdLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  ModuleID for creating sub account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F7379737374");
            return result;
        }
        
        /// <summary>
        /// >> BlocksPerRound
        ///  The number of blocks per round, as defined in the runtime.
        /// 
        ///  This value is set to 1500 in the runtime configuration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BlocksPerRound()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xB80B0000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SystemStakingErrors
    /// </summary>
    public enum SystemStakingErrors
    {
        
        /// <summary>
        /// >> InvalidTokenConfig
        /// Invalid token config params
        /// </summary>
        InvalidTokenConfig,
        
        /// <summary>
        /// >> ExceedMaxTokenLen
        /// exceed max token len
        /// </summary>
        ExceedMaxTokenLen,
        
        /// <summary>
        /// >> ExceedMaxFarmingPoolidLen
        /// exceed max poolid len
        /// </summary>
        ExceedMaxFarmingPoolidLen,
        
        /// <summary>
        /// >> TokenInfoNotFound
        /// Token info not found
        /// </summary>
        TokenInfoNotFound,
        
        /// <summary>
        /// >> PayoutFailed
        /// payout error
        /// </summary>
        PayoutFailed,
        
        /// <summary>
        /// >> ConversionError
        /// Error converting Vec to BoundedVec.
        /// </summary>
        ConversionError,
    }
}
