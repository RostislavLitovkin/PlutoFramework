//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SlpV2Storage
    /// </summary>
    public sealed class SlpV2Storage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SlpV2Storage Constructor
        /// </summary>
        public SlpV2Storage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "ConfigurationByStakingProtocol"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.ProtocolConfiguration)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "DelegatorByStakingProtocolAndDelegatorIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "DelegatorIndexByStakingProtocolAndDelegator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>), typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "LedgerByStakingProtocolAndDelegator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumLedger)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "ValidatorsByStakingProtocolAndDelegator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT74)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "NextDelegatorIndexByStakingProtocol"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol), typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "PendingStatusByQueryId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumPendingStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "LastUpdateOngoingTimeUnitBlockNumber"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SlpV2", "LastUpdateTokenExchangeRateBlockNumber"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> ConfigurationByStakingProtocolParams
        ///  Configuration for different staking protocols.
        /// </summary>
        public static string ConfigurationByStakingProtocolParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key)
        {
            return RequestGenerator.GetStorage("SlpV2", "ConfigurationByStakingProtocol", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ConfigurationByStakingProtocolDefault
        /// Default value as hex string
        /// </summary>
        public static string ConfigurationByStakingProtocolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConfigurationByStakingProtocol
        ///  Configuration for different staking protocols.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.ProtocolConfiguration> ConfigurationByStakingProtocol(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.ConfigurationByStakingProtocolParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.ProtocolConfiguration>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorByStakingProtocolAndDelegatorIndexParams
        ///  StakingProtocol + DelegatorIndex => Delegator
        /// </summary>
        public static string DelegatorByStakingProtocolAndDelegatorIndexParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("SlpV2", "DelegatorByStakingProtocolAndDelegatorIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorByStakingProtocolAndDelegatorIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorByStakingProtocolAndDelegatorIndexDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorByStakingProtocolAndDelegatorIndex
        ///  StakingProtocol + DelegatorIndex => Delegator
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> DelegatorByStakingProtocolAndDelegatorIndex(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.DelegatorByStakingProtocolAndDelegatorIndexParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorIndexByStakingProtocolAndDelegatorParams
        ///  StakingProtocol + Delegator => DelegatorIndex
        /// </summary>
        public static string DelegatorIndexByStakingProtocolAndDelegatorParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key)
        {
            return RequestGenerator.GetStorage("SlpV2", "DelegatorIndexByStakingProtocolAndDelegator", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorIndexByStakingProtocolAndDelegatorDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorIndexByStakingProtocolAndDelegatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorIndexByStakingProtocolAndDelegator
        ///  StakingProtocol + Delegator => DelegatorIndex
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> DelegatorIndexByStakingProtocolAndDelegator(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.DelegatorIndexByStakingProtocolAndDelegatorParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LedgerByStakingProtocolAndDelegatorParams
        ///  StakingProtocol + DelegatorIndex => Delegator
        /// </summary>
        public static string LedgerByStakingProtocolAndDelegatorParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key)
        {
            return RequestGenerator.GetStorage("SlpV2", "LedgerByStakingProtocolAndDelegator", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LedgerByStakingProtocolAndDelegatorDefault
        /// Default value as hex string
        /// </summary>
        public static string LedgerByStakingProtocolAndDelegatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LedgerByStakingProtocolAndDelegator
        ///  StakingProtocol + DelegatorIndex => Delegator
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumLedger> LedgerByStakingProtocolAndDelegator(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.LedgerByStakingProtocolAndDelegatorParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumLedger>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorsByStakingProtocolAndDelegatorParams
        ///  Validators for different staking protocols.
        /// </summary>
        public static string ValidatorsByStakingProtocolAndDelegatorParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key)
        {
            return RequestGenerator.GetStorage("SlpV2", "ValidatorsByStakingProtocolAndDelegator", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ValidatorsByStakingProtocolAndDelegatorDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsByStakingProtocolAndDelegatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ValidatorsByStakingProtocolAndDelegator
        ///  Validators for different staking protocols.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT74> ValidatorsByStakingProtocolAndDelegator(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.ValidatorsByStakingProtocolAndDelegatorParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT74>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextDelegatorIndexByStakingProtocolParams
        ///  Next index of different staking protocols.
        /// </summary>
        public static string NextDelegatorIndexByStakingProtocolParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key)
        {
            return RequestGenerator.GetStorage("SlpV2", "NextDelegatorIndexByStakingProtocol", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextDelegatorIndexByStakingProtocolDefault
        /// Default value as hex string
        /// </summary>
        public static string NextDelegatorIndexByStakingProtocolDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> NextDelegatorIndexByStakingProtocol
        ///  Next index of different staking protocols.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> NextDelegatorIndexByStakingProtocol(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.NextDelegatorIndexByStakingProtocolParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingStatusByQueryIdParams
        ///  Pending status for different query id.
        /// </summary>
        public static string PendingStatusByQueryIdParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("SlpV2", "PendingStatusByQueryId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingStatusByQueryIdDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingStatusByQueryIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingStatusByQueryId
        ///  Pending status for different query id.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumPendingStatus> PendingStatusByQueryId(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.PendingStatusByQueryIdParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumPendingStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastUpdateOngoingTimeUnitBlockNumberParams
        ///  Last update ongoing time unit block number for different staking protocols.
        /// </summary>
        public static string LastUpdateOngoingTimeUnitBlockNumberParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key)
        {
            return RequestGenerator.GetStorage("SlpV2", "LastUpdateOngoingTimeUnitBlockNumber", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastUpdateOngoingTimeUnitBlockNumberDefault
        /// Default value as hex string
        /// </summary>
        public static string LastUpdateOngoingTimeUnitBlockNumberDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastUpdateOngoingTimeUnitBlockNumber
        ///  Last update ongoing time unit block number for different staking protocols.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastUpdateOngoingTimeUnitBlockNumber(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.LastUpdateOngoingTimeUnitBlockNumberParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastUpdateTokenExchangeRateBlockNumberParams
        ///  Last update token exchange rate block number for different staking protocols.
        /// </summary>
        public static string LastUpdateTokenExchangeRateBlockNumberParams(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key)
        {
            return RequestGenerator.GetStorage("SlpV2", "LastUpdateTokenExchangeRateBlockNumber", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LastUpdateTokenExchangeRateBlockNumberDefault
        /// Default value as hex string
        /// </summary>
        public static string LastUpdateTokenExchangeRateBlockNumberDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastUpdateTokenExchangeRateBlockNumber
        ///  Last update token exchange rate block number for different staking protocols.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastUpdateTokenExchangeRateBlockNumber(Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpV2Storage.LastUpdateTokenExchangeRateBlockNumberParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpV2Calls
    /// </summary>
    public sealed class SlpV2Calls
    {
        
        /// <summary>
        /// >> set_protocol_configuration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetProtocolConfiguration(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.ProtocolConfiguration configuration)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(configuration.Encode());
            return new Method(139, "SlpV2", 0, "set_protocol_configuration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddDelegator(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator> delegator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            return new Method(139, "SlpV2", 1, "add_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveDelegator(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            return new Method(139, "SlpV2", 2, "remove_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_validator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddValidator(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumValidator validator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(validator.Encode());
            return new Method(139, "SlpV2", 3, "add_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_validator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveValidator(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumValidator validator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(validator.Encode());
            return new Method(139, "SlpV2", 4, "remove_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_ledger
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetLedger(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumLedger ledger)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(ledger.Encode());
            return new Method(139, "SlpV2", 5, "set_ledger", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_to
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferTo(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> dest, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(fee.Encode());
            return new Method(139, "SlpV2", 6, "transfer_to", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_back
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferBack(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(139, "SlpV2", 7, "transfer_back", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_ongoing_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateOngoingTimeUnit(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit> time_uint_option)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(time_uint_option.Encode());
            return new Method(139, "SlpV2", 8, "update_ongoing_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_token_exchange_rate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateTokenExchangeRate(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol staking_protocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> currency_id, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, Substrate.NetApi.Model.Types.Primitive.U128 pool_value, Substrate.NetApi.Model.Types.Primitive.U128 delegator_value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(staking_protocol.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(pool_value.Encode());
            byteArray.AddRange(delegator_value.Encode());
            return new Method(139, "SlpV2", 9, "update_token_exchange_rate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> astar_dapp_staking
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AstarDappStaking(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.astar_dapp_staking.types.EnumDappStaking task)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(task.Encode());
            return new Method(139, "SlpV2", 10, "astar_dapp_staking", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_astar_dapp_staking
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyAstarDappStaking(Substrate.NetApi.Model.Types.Primitive.U64 query_id, BifrostPolkadot.NetApi.Generated.Model.staging_xcm.v4.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(139, "SlpV2", 11, "notify_astar_dapp_staking", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ethereum_staking
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EthereumStaking(BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator delegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.ethereum_staking.types.EnumEthereumStaking task)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(task.Encode());
            return new Method(139, "SlpV2", 12, "ethereum_staking", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SlpV2Constants
    /// </summary>
    public sealed class SlpV2Constants
    {
        
        /// <summary>
        /// >> QueryTimeout
        ///  The query timeout.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 QueryTimeout()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> CommissionPalletId
        ///  Commission master Pallet Id to get the commission master account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId CommissionPalletId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F636F6D6D73");
            return result;
        }
        
        /// <summary>
        /// >> ParachainId
        ///  Bifrost parachain id.
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
        
        /// <summary>
        /// >> MaxValidators
        ///  Maximum validators
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxValidators()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00010000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpV2Errors
    /// </summary>
    public enum SlpV2Errors
    {
        
        /// <summary>
        /// >> DelegatorIndexOverflow
        /// Delegator index has exceeded the maximum allowed value of 65535.
        /// </summary>
        DelegatorIndexOverflow,
        
        /// <summary>
        /// >> ValidatorsOverflow
        /// The maximum number of validators has been reached.
        /// </summary>
        ValidatorsOverflow,
        
        /// <summary>
        /// >> UnlockRecordOverflow
        /// UnlockRecordOverflow
        /// </summary>
        UnlockRecordOverflow,
        
        /// <summary>
        /// >> UnsupportedStakingProtocol
        /// The staking protocol is not supported.
        /// </summary>
        UnsupportedStakingProtocol,
        
        /// <summary>
        /// >> DelegatorIndexNotFound
        /// The delegator index was not found.
        /// </summary>
        DelegatorIndexNotFound,
        
        /// <summary>
        /// >> ConfigurationNotFound
        /// The Configuration was not found.
        /// </summary>
        ConfigurationNotFound,
        
        /// <summary>
        /// >> DelegatorNotFound
        /// The delegator was not found.
        /// </summary>
        DelegatorNotFound,
        
        /// <summary>
        /// >> LedgerNotFound
        /// The ledger was not found.
        /// </summary>
        LedgerNotFound,
        
        /// <summary>
        /// >> ValidatorNotFound
        /// The validator was not found.
        /// </summary>
        ValidatorNotFound,
        
        /// <summary>
        /// >> XcmFeeNotFound
        /// Missing XCM fee value.
        /// </summary>
        XcmFeeNotFound,
        
        /// <summary>
        /// >> PendingStatusNotFound
        /// Missing pending status.
        /// </summary>
        PendingStatusNotFound,
        
        /// <summary>
        /// >> TimeUnitNotFound
        /// The specified time unit does not exist.
        /// </summary>
        TimeUnitNotFound,
        
        /// <summary>
        /// >> DelegatorAlreadyExists
        /// The delegator already exists.
        /// </summary>
        DelegatorAlreadyExists,
        
        /// <summary>
        /// >> DelegatorIndexAlreadyExists
        /// The delegator index already exists.
        /// </summary>
        DelegatorIndexAlreadyExists,
        
        /// <summary>
        /// >> ValidatorAlreadyExists
        /// The validator already exists.
        /// </summary>
        ValidatorAlreadyExists,
        
        /// <summary>
        /// >> DerivativeAccountIdFailed
        /// Failed to derive the derivative account ID.
        /// </summary>
        DerivativeAccountIdFailed,
        
        /// <summary>
        /// >> ValidatingFailed
        /// Error during validation.
        /// </summary>
        ValidatingFailed,
        
        /// <summary>
        /// >> DeliveringFailed
        /// Error during delivery.
        /// </summary>
        DeliveringFailed,
        
        /// <summary>
        /// >> CalculateProtocolFeeFailed
        /// calculate protocol fee failed.
        /// </summary>
        CalculateProtocolFeeFailed,
        
        /// <summary>
        /// >> IncreaseTokenPoolFailed
        /// IncreaseTokenPoolFailed
        /// </summary>
        IncreaseTokenPoolFailed,
        
        /// <summary>
        /// >> UpdateIntervalTooShort
        /// The update interval is too short.
        /// </summary>
        UpdateIntervalTooShort,
        
        /// <summary>
        /// >> UpdateTokenExchangeRateAmountTooLarge
        /// The specified token exchange rate amount is too large.
        /// </summary>
        UpdateTokenExchangeRateAmountTooLarge,
        
        /// <summary>
        /// >> InvalidParameter
        /// Invalid parameter.
        /// </summary>
        InvalidParameter,
        
        /// <summary>
        /// >> NotAuthorized
        /// Not authorized.
        /// </summary>
        NotAuthorized,
    }
}
