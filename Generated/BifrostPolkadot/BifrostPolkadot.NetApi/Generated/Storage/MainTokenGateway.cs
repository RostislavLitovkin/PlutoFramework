//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> TokenGatewayStorage
    /// </summary>
    public sealed class TokenGatewayStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> TokenGatewayStorage Constructor
        /// </summary>
        public TokenGatewayStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "SupportedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "NativeAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "LocalAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "Decimals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "TokenGatewayAddresses"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenGateway", "WhitelistAddresses"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT24)));
        }
        
        /// <summary>
        /// >> SupportedAssetsParams
        ///  Assets supported by this instance of token gateway
        ///  A map of the local asset id to the token gateway asset id
        /// </summary>
        public static string SupportedAssetsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "SupportedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SupportedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string SupportedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SupportedAssets
        ///  Assets supported by this instance of token gateway
        ///  A map of the local asset id to the token gateway asset id
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256> SupportedAssets(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.SupportedAssetsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NativeAssetsParams
        ///  Assets that originate from this chain
        /// </summary>
        public static string NativeAssetsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "NativeAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NativeAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string NativeAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NativeAssets
        ///  Assets that originate from this chain
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> NativeAssets(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.NativeAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LocalAssetsParams
        ///  Assets supported by this instance of token gateway
        ///  A map of the token gateway asset id to the local asset id
        /// </summary>
        public static string LocalAssetsParams(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "LocalAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LocalAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string LocalAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocalAssets
        ///  Assets supported by this instance of token gateway
        ///  A map of the token gateway asset id to the local asset id
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> LocalAssets(BifrostPolkadot.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.LocalAssetsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DecimalsParams
        ///  The decimals used by the EVM counterpart of this asset
        /// </summary>
        public static string DecimalsParams(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "Decimals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DecimalsDefault
        /// Default value as hex string
        /// </summary>
        public static string DecimalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Decimals
        ///  The decimals used by the EVM counterpart of this asset
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U8> Decimals(BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.DecimalsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenGatewayAddressesParams
        ///  The token gateway adresses on different chains
        /// </summary>
        public static string TokenGatewayAddressesParams(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "TokenGatewayAddresses", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenGatewayAddressesDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenGatewayAddressesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenGatewayAddresses
        ///  The token gateway adresses on different chains
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> TokenGatewayAddresses(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.TokenGatewayAddressesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WhitelistAddressesParams
        ///  The whitelist adresses on different chains
        /// </summary>
        public static string WhitelistAddressesParams(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine key)
        {
            return RequestGenerator.GetStorage("TokenGateway", "WhitelistAddresses", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WhitelistAddressesDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistAddressesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistAddresses
        ///  The whitelist adresses on different chains
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT24> WhitelistAddresses(BifrostPolkadot.NetApi.Generated.Model.ismp.host.EnumStateMachine key, string blockhash, CancellationToken token)
        {
            string parameters = TokenGatewayStorage.WhitelistAddressesParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT24>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenGatewayCalls
    /// </summary>
    public sealed class TokenGatewayCalls
    {
        
        /// <summary>
        /// >> teleport
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Teleport(BifrostPolkadot.NetApi.Generated.Model.pallet_token_gateway.types.TeleportParams @params)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@params.Encode());
            return new Method(94, "TokenGateway", 0, "teleport", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_token_gateway_addresses
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetTokenGatewayAddresses(BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT3 addresses)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(addresses.Encode());
            return new Method(94, "TokenGateway", 1, "set_token_gateway_addresses", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_erc6160_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateErc6160Asset(BifrostPolkadot.NetApi.Generated.Model.pallet_token_gateway.types.AssetRegistration asset, Substrate.NetApi.Model.Types.Primitive.Bool native)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(native.Encode());
            return new Method(94, "TokenGateway", 2, "create_erc6160_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_erc6160_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateErc6160Asset(BifrostPolkadot.NetApi.Generated.Model.token_gateway_primitives.GatewayAssetUpdate asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            return new Method(94, "TokenGateway", 3, "update_erc6160_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_whitelist_addresses
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetWhitelistAddresses(BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT4 addresses)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(addresses.Encode());
            return new Method(94, "TokenGateway", 4, "set_whitelist_addresses", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> TokenGatewayConstants
    /// </summary>
    public sealed class TokenGatewayConstants
    {
        
        /// <summary>
        /// >> MaxLengthLimit
        ///  BoundedVec maximum length
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLengthLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenGatewayErrors
    /// </summary>
    public enum TokenGatewayErrors
    {
        
        /// <summary>
        /// >> UnregisteredAsset
        /// A asset that has not been registered
        /// </summary>
        UnregisteredAsset,
        
        /// <summary>
        /// >> AssetTeleportError
        /// Error while teleporting asset
        /// </summary>
        AssetTeleportError,
        
        /// <summary>
        /// >> CoprocessorNotConfigured
        /// Coprocessor was not configured in the runtime
        /// </summary>
        CoprocessorNotConfigured,
        
        /// <summary>
        /// >> DispatchError
        /// Asset or update Dispatch Error
        /// </summary>
        DispatchError,
        
        /// <summary>
        /// >> AssetCreationError
        /// Asset Id creation failed
        /// </summary>
        AssetCreationError,
        
        /// <summary>
        /// >> AssetDecimalsNotFound
        /// Asset decimals not found
        /// </summary>
        AssetDecimalsNotFound,
        
        /// <summary>
        /// >> NotInitialized
        /// Protocol Params have not been initialized
        /// </summary>
        NotInitialized,
        
        /// <summary>
        /// >> UnknownAsset
        /// Unknown Asset
        /// </summary>
        UnknownAsset,
        
        /// <summary>
        /// >> FailToConvert
        /// BoundedVec conversion failed
        /// </summary>
        FailToConvert,
    }
}
