//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace BifrostPolkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> FarmingStorage
    /// </summary>
    public sealed class FarmingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> FarmingStorage Constructor
        /// </summary>
        public FarmingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "PoolNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "GaugePoolNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "RetireLimit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "PoolInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.PoolInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "GaugePoolInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugePoolInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "GaugeInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugeInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "SharesAndWithdrawnRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.ShareInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "BoostPoolInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.BoostPoolInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "UserBoostInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.UserBoostInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "BoostWhitelist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "BoostNextRoundWhitelist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "BoostVotingPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "BoostBasicRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Farming", "UserFarmingPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56)));
        }
        
        /// <summary>
        /// >> PoolNextIdParams
        ///  Record the id of the new pool.
        /// </summary>
        public static string PoolNextIdParams()
        {
            return RequestGenerator.GetStorage("Farming", "PoolNextId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PoolNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PoolNextId
        ///  Record the id of the new pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PoolNextId(string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.PoolNextIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GaugePoolNextIdParams
        ///  Record the id of the new gauge pool.
        /// </summary>
        public static string GaugePoolNextIdParams()
        {
            return RequestGenerator.GetStorage("Farming", "GaugePoolNextId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GaugePoolNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string GaugePoolNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> GaugePoolNextId
        ///  Record the id of the new gauge pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> GaugePoolNextId(string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.GaugePoolNextIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RetireLimitParams
        ///  The upper limit of a single retirement pool
        /// </summary>
        public static string RetireLimitParams()
        {
            return RequestGenerator.GetStorage("Farming", "RetireLimit", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RetireLimitDefault
        /// Default value as hex string
        /// </summary>
        public static string RetireLimitDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> RetireLimit
        ///  The upper limit of a single retirement pool
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> RetireLimit(string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.RetireLimitParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PoolInfosParams
        ///  Record reward pool info.
        /// 
        ///  map PoolId => PoolInfo
        /// </summary>
        public static string PoolInfosParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Farming", "PoolInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PoolInfos
        ///  Record reward pool info.
        /// 
        ///  map PoolId => PoolInfo
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.PoolInfo> PoolInfos(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.PoolInfosParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.PoolInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GaugePoolInfosParams
        ///  Record gauge farming pool info.
        /// 
        ///  map PoolId => GaugePoolInfo
        /// </summary>
        public static string GaugePoolInfosParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Farming", "GaugePoolInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GaugePoolInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string GaugePoolInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GaugePoolInfos
        ///  Record gauge farming pool info.
        /// 
        ///  map PoolId => GaugePoolInfo
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugePoolInfo> GaugePoolInfos(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.GaugePoolInfosParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugePoolInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GaugeInfosParams
        ///  Record gauge config
        /// </summary>
        public static string GaugeInfosParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Farming", "GaugeInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> GaugeInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string GaugeInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GaugeInfos
        ///  Record gauge config
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugeInfo> GaugeInfos(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.GaugeInfosParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.gauge.GaugeInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SharesAndWithdrawnRewardsParams
        ///  Record share amount, reward currency and withdrawn reward amount for
        ///  specific `AccountId` under `PoolId`.
        /// 
        ///  double_map (PoolId, AccountId) => ShareInfo
        /// </summary>
        public static string SharesAndWithdrawnRewardsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Farming", "SharesAndWithdrawnRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> SharesAndWithdrawnRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string SharesAndWithdrawnRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SharesAndWithdrawnRewards
        ///  Record share amount, reward currency and withdrawn reward amount for
        ///  specific `AccountId` under `PoolId`.
        /// 
        ///  double_map (PoolId, AccountId) => ShareInfo
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.ShareInfo> SharesAndWithdrawnRewards(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.SharesAndWithdrawnRewardsParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.rewards.ShareInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BoostPoolInfosParams
        ///  Record all voting pool information.
        /// </summary>
        public static string BoostPoolInfosParams()
        {
            return RequestGenerator.GetStorage("Farming", "BoostPoolInfos", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BoostPoolInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string BoostPoolInfosDefault()
        {
            return "0x00000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BoostPoolInfos
        ///  Record all voting pool information.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.BoostPoolInfo> BoostPoolInfos(string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.BoostPoolInfosParams();
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.BoostPoolInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserBoostInfosParams
        ///  Record the voting pool id and the voting percentage of the user.
        /// </summary>
        public static string UserBoostInfosParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Farming", "UserBoostInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserBoostInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string UserBoostInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserBoostInfos
        ///  Record the voting pool id and the voting percentage of the user.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.UserBoostInfo> UserBoostInfos(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.UserBoostInfosParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.boost.UserBoostInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BoostWhitelistParams
        ///  Record the pools which the user can voted for.
        /// </summary>
        public static string BoostWhitelistParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Farming", "BoostWhitelist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BoostWhitelistDefault
        /// Default value as hex string
        /// </summary>
        public static string BoostWhitelistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BoostWhitelist
        ///  Record the pools which the user can voted for.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> BoostWhitelist(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.BoostWhitelistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BoostNextRoundWhitelistParams
        ///  Record the pools which the user can voted for in the next round.
        /// </summary>
        public static string BoostNextRoundWhitelistParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Farming", "BoostNextRoundWhitelist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BoostNextRoundWhitelistDefault
        /// Default value as hex string
        /// </summary>
        public static string BoostNextRoundWhitelistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BoostNextRoundWhitelist
        ///  Record the pools which the user can voted for in the next round.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> BoostNextRoundWhitelist(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.BoostNextRoundWhitelistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BoostVotingPoolsParams
        ///  Record the voting amount for each pool.
        /// </summary>
        public static string BoostVotingPoolsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Farming", "BoostVotingPools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BoostVotingPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string BoostVotingPoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BoostVotingPools
        ///  Record the voting amount for each pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> BoostVotingPools(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.BoostVotingPoolsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BoostBasicRewardsParams
        ///  Voting rewards for corresponding currency.
        /// </summary>
        public static string BoostBasicRewardsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("Farming", "BoostBasicRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> BoostBasicRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string BoostBasicRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BoostBasicRewards
        ///  Voting rewards for corresponding currency.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> BoostBasicRewards(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.BoostBasicRewardsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserFarmingPoolParams
        ///  The pool ID of the user participating in the farming pool.
        /// </summary>
        public static string UserFarmingPoolParams(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Farming", "UserFarmingPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserFarmingPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string UserFarmingPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserFarmingPool
        ///  The pool ID of the user participating in the farming pool.
        /// </summary>
        public async Task<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56> UserFarmingPool(BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = FarmingStorage.UserFarmingPoolParams(key);
            var result = await _client.GetStorageAsync<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> FarmingCalls
    /// </summary>
    public sealed class FarmingCalls
    {
        
        /// <summary>
        /// >> create_farming_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateFarmingPool(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>> tokens_proportion, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>> basic_rewards, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>> gauge_init, Substrate.NetApi.Model.Types.Primitive.U128 min_deposit_to_start, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> after_block_to_start, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> withdraw_limit_time, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> claim_limit_time, Substrate.NetApi.Model.Types.Primitive.U8 withdraw_limit_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(tokens_proportion.Encode());
            byteArray.AddRange(basic_rewards.Encode());
            byteArray.AddRange(gauge_init.Encode());
            byteArray.AddRange(min_deposit_to_start.Encode());
            byteArray.AddRange(after_block_to_start.Encode());
            byteArray.AddRange(withdraw_limit_time.Encode());
            byteArray.AddRange(claim_limit_time.Encode());
            byteArray.AddRange(withdraw_limit_count.Encode());
            return new Method(119, "Farming", 0, "create_farming_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> charge
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Charge(Substrate.NetApi.Model.Types.Primitive.U32 pid, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>> rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            byteArray.AddRange(rewards.Encode());
            return new Method(119, "Farming", 1, "charge", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Deposit(Substrate.NetApi.Model.Types.Primitive.U32 pid, Substrate.NetApi.Model.Types.Primitive.U128 add_value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            byteArray.AddRange(add_value.Encode());
            return new Method(119, "Farming", 2, "deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Withdraw(Substrate.NetApi.Model.Types.Primitive.U32 pid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> remove_value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            byteArray.AddRange(remove_value.Encode());
            return new Method(119, "Farming", 3, "withdraw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Claim(Substrate.NetApi.Model.Types.Primitive.U32 pid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            return new Method(119, "Farming", 4, "claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawClaim(Substrate.NetApi.Model.Types.Primitive.U32 pid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            return new Method(119, "Farming", 5, "withdraw_claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_retire_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRetirePool(Substrate.NetApi.Model.Types.Primitive.U32 pid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            return new Method(119, "Farming", 6, "force_retire_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_retire_limit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRetireLimit(Substrate.NetApi.Model.Types.Primitive.U32 limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(limit.Encode());
            return new Method(119, "Farming", 7, "set_retire_limit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClosePool(Substrate.NetApi.Model.Types.Primitive.U32 pid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            return new Method(119, "Farming", 8, "close_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetPool(Substrate.NetApi.Model.Types.Primitive.U32 pid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>> basic_rewards, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> min_deposit_to_start, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> after_block_to_start, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> withdraw_limit_time, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> claim_limit_time, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8> withdraw_limit_count, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>> gauge_init)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            byteArray.AddRange(basic_rewards.Encode());
            byteArray.AddRange(min_deposit_to_start.Encode());
            byteArray.AddRange(after_block_to_start.Encode());
            byteArray.AddRange(withdraw_limit_time.Encode());
            byteArray.AddRange(claim_limit_time.Encode());
            byteArray.AddRange(withdraw_limit_count.Encode());
            byteArray.AddRange(gauge_init.Encode());
            return new Method(119, "Farming", 9, "reset_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> kill_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method KillPool(Substrate.NetApi.Model.Types.Primitive.U32 pid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            return new Method(119, "Farming", 10, "kill_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> edit_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EditPool(Substrate.NetApi.Model.Types.Primitive.U32 pid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>> basic_rewards, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> withdraw_limit_time, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> claim_limit_time, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>> gauge_basic_rewards, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8> withdraw_limit_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pid.Encode());
            byteArray.AddRange(basic_rewards.Encode());
            byteArray.AddRange(withdraw_limit_time.Encode());
            byteArray.AddRange(claim_limit_time.Encode());
            byteArray.AddRange(gauge_basic_rewards.Encode());
            byteArray.AddRange(withdraw_limit_count.Encode());
            return new Method(119, "Farming", 11, "edit_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_gauge_claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceGaugeClaim(Substrate.NetApi.Model.Types.Primitive.U32 gid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(gid.Encode());
            return new Method(119, "Farming", 13, "force_gauge_claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_boost_pool_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddBoostPoolWhitelist(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32> whitelist)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(whitelist.Encode());
            return new Method(119, "Farming", 14, "add_boost_pool_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_next_round_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetNextRoundWhitelist(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32> whitelist)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(whitelist.Encode());
            return new Method(119, "Farming", 15, "set_next_round_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vote(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent>> vote_list)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vote_list.Encode());
            return new Method(119, "Farming", 16, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> start_boost_round
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StartBoostRound(Substrate.NetApi.Model.Types.Primitive.U32 round_length)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(round_length.Encode());
            return new Method(119, "Farming", 17, "start_boost_round", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> end_boost_round
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EndBoostRound()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(119, "Farming", 18, "end_boost_round", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> charge_boost
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ChargeBoost(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>> rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rewards.Encode());
            return new Method(119, "Farming", 19, "charge_boost", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refresh
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Refresh()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(119, "Farming", 20, "refresh", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> FarmingConstants
    /// </summary>
    public sealed class FarmingConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> Keeper
        ///  ModuleID for creating sub account
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId Keeper()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F666D6B7072");
            return result;
        }
        
        /// <summary>
        /// >> RewardIssuer
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId RewardIssuer()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F666D726972");
            return result;
        }
        
        /// <summary>
        /// >> FarmingBoost
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId FarmingBoost()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F666D627374");
            return result;
        }
        
        /// <summary>
        /// >> WhitelistMaximumLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 WhitelistMaximumLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> GaugeRewardIssuer
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId GaugeRewardIssuer()
        {
            var result = new BifrostPolkadot.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F666D676172");
            return result;
        }
    }
    
    /// <summary>
    /// >> FarmingErrors
    /// </summary>
    public enum FarmingErrors
    {
        
        /// <summary>
        /// >> NotNullable
        /// The field tokens_proportion cannot be empty.
        /// </summary>
        NotNullable,
        
        /// <summary>
        /// >> PoolDoesNotExist
        /// The pool does not exist.
        /// </summary>
        PoolDoesNotExist,
        
        /// <summary>
        /// >> GaugePoolNotExist
        /// The gauge pool does not exist.
        /// </summary>
        GaugePoolNotExist,
        
        /// <summary>
        /// >> GaugeInfoNotExist
        /// The gauge info does not exist.
        /// </summary>
        GaugeInfoNotExist,
        
        /// <summary>
        /// >> InvalidPoolState
        /// The pool is not in the correct state.
        /// </summary>
        InvalidPoolState,
        
        /// <summary>
        /// >> CanNotClaim
        /// claim_limit_time exceeded
        /// </summary>
        CanNotClaim,
        
        /// <summary>
        /// >> GaugeMaxBlockOverflow
        /// gauge pool max_block exceeded
        /// </summary>
        GaugeMaxBlockOverflow,
        
        /// <summary>
        /// >> WithdrawLimitCountExceeded
        /// withdraw_limit_time exceeded
        /// </summary>
        WithdrawLimitCountExceeded,
        
        /// <summary>
        /// >> ShareInfoNotExists
        /// User's personal share info does not exist
        /// </summary>
        ShareInfoNotExists,
        
        /// <summary>
        /// >> CanNotDeposit
        /// The current block height needs to be greater than the field after_block_to_start in
        /// order to execute deposit.
        /// </summary>
        CanNotDeposit,
        
        /// <summary>
        /// >> WhitelistEmpty
        /// Whitelist cannot be empty
        /// </summary>
        WhitelistEmpty,
        
        /// <summary>
        /// >> RoundNotOver
        /// When starting a round, the field end_round needs to be 0 to indicate that the previous
        /// round has ended.
        /// </summary>
        RoundNotOver,
        
        /// <summary>
        /// >> RoundLengthNotSet
        /// The round length needs to be set when starting a round
        /// </summary>
        RoundLengthNotSet,
        
        /// <summary>
        /// >> WhitelistLimitExceeded
        /// Whitelist maximum limit exceeded
        /// </summary>
        WhitelistLimitExceeded,
        
        /// <summary>
        /// >> NobodyVoting
        /// No one voted for this pool.
        /// </summary>
        NobodyVoting,
        
        /// <summary>
        /// >> NotInWhitelist
        /// The pool is not in the whitelist
        /// </summary>
        NotInWhitelist,
        
        /// <summary>
        /// >> PercentOverflow
        /// The total voting percentage of users cannot exceed 100%.
        /// </summary>
        PercentOverflow,
        
        /// <summary>
        /// >> PoolNotCleared
        /// The pool cannot be cleaned completely
        /// </summary>
        PoolNotCleared,
        
        /// <summary>
        /// >> InvalidRemoveAmount
        /// Invalid remove amount
        /// </summary>
        InvalidRemoveAmount,
        
        /// <summary>
        /// >> UserFarmingPoolOverflow
        /// User farming pool overflow
        /// </summary>
        UserFarmingPoolOverflow,
    }
}
