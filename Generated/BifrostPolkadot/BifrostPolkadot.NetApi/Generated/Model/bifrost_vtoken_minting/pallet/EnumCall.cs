//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_minting.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> mint
        /// Mint v_currency by transferring currency to entrance_account.
        /// The minted v_currency will be deposited to the minter's account.
        /// Parameters:
        /// - `currency_id`: The currency to mint.
        /// - `currency_amount`: The amount of currency to mint.
        /// - `remark`: The remark of minting.
        /// - `channel_id`: The channel id of minting.
        /// </summary>
        mint = 0,
        
        /// <summary>
        /// >> redeem
        /// Redeem currency by burning v_currency. But need to wait for the unlock period.
        /// The redeemed currency will be transferred to the redeemer's account.
        /// Parameters:
        /// - `v_currency_id`: The v_currency to redeem.
        /// - `v_currency_amount`: The amount of v_currency to redeem.
        /// </summary>
        redeem = 1,
        
        /// <summary>
        /// >> rebond
        /// Already redeemed currency by burning v_currency. But need to wait for the unlock period.
        /// In unlock period, you call rebond to cancel the redeem.
        /// Parameters:
        /// - `currency_id`: The currency to rebond.
        /// - `currency_amount`: The amount of currency to rebond. The amount should be less than or
        ///   equal to the redeem amount.
        /// </summary>
        rebond = 2,
        
        /// <summary>
        /// >> rebond_by_unlock_id
        /// Same function as Rebond. But need to provide unlock_id.
        /// Parameters:
        /// - `currency_id`: The currency to rebond.
        /// - `unlock_id`: The unlock_id to rebond.
        /// </summary>
        rebond_by_unlock_id = 3,
        
        /// <summary>
        /// >> set_unlock_duration
        /// Set the unlock duration for a currency.
        /// Parameters:
        /// - `currency_id`: The currency to set unlock duration.
        /// - `unlock_duration`: The unlock duration to set.
        /// </summary>
        set_unlock_duration = 4,
        
        /// <summary>
        /// >> set_minimum_mint
        /// Set the minimum mint amount for a currency.
        /// Parameters:
        /// - `currency_id`: The currency to set minimum mint amount.
        /// - `minimum_amount`: The minimum mint amount to set.
        /// </summary>
        set_minimum_mint = 5,
        
        /// <summary>
        /// >> set_minimum_redeem
        /// Set the minimum redeem amount for a currency.
        /// Parameters:
        /// - `currency_id`: The currency to set minimum redeem amount.
        /// - `minimum_amount`: The minimum redeem amount to set.
        /// </summary>
        set_minimum_redeem = 6,
        
        /// <summary>
        /// >> add_support_rebond_token
        /// Support a token to rebond.
        /// Parameters:
        /// - `currency_id`: The currency to support rebond.
        /// </summary>
        add_support_rebond_token = 7,
        
        /// <summary>
        /// >> remove_support_rebond_token
        /// Remove the support of a token to rebond.
        /// Parameters:
        /// - `currency_id`: The currency to remove support rebond.
        /// </summary>
        remove_support_rebond_token = 8,
        
        /// <summary>
        /// >> set_fees
        /// Set the fees for mint and redeem.
        /// Parameters:
        /// - `mint_fee`: The fee for mint.
        /// - `redeem_fee`: The fee for redeem.
        /// </summary>
        set_fees = 9,
        
        /// <summary>
        /// >> set_hook_iteration_limit
        /// Set the hook iteration limit.
        /// Parameters:
        /// - `limit`: The hook iteration limit.
        /// </summary>
        set_hook_iteration_limit = 10,
        
        /// <summary>
        /// >> set_unlocking_total
        /// Set the total amount of tokens that are currently locked for unlocking.
        /// Parameters:
        /// - `currency_id`: The currency to set unlocking total.
        /// - `currency_amount`: The total amount of tokens that are currently locked for unlocking.
        /// </summary>
        set_unlocking_total = 11,
        
        /// <summary>
        /// >> set_min_time_unit
        /// Set the minimum time unit for a currency.
        /// Parameters:
        /// - `currency_id`: The currency to set minimum time unit.
        /// - `time_unit`: The minimum time unit to set.
        /// </summary>
        set_min_time_unit = 12,
        
        /// <summary>
        /// >> set_ongoing_time_unit
        /// Set the ongoing time unit for a currency.
        /// Parameters:
        /// - `currency_id`: The currency to set ongoing time unit.
        /// - `time_unit`: The ongoing time unit to set.
        /// </summary>
        set_ongoing_time_unit = 13,
        
        /// <summary>
        /// >> mint_with_lock
        /// </summary>
        mint_with_lock = 14,
        
        /// <summary>
        /// >> unlock_incentive_minted_vtoken
        /// Unlock the vtoken minted in an incentive mode
        /// Parameters:
        /// - `v_currency_id`: The v_currency to unlock.
        /// </summary>
        unlock_incentive_minted_vtoken = 15,
        
        /// <summary>
        /// >> set_incentive_coef
        /// Set the incentive coefficient for a vtoken when minted in an incentive mode
        /// Parameters:
        /// - `v_currency_id`: The v_currency to set incentive coefficient.
        /// - `new_coef_op`: The new incentive coefficient to set.
        /// </summary>
        set_incentive_coef = 16,
        
        /// <summary>
        /// >> set_vtoken_incentive_lock_blocks
        /// Set the locked blocks for a vtoken when minted in an incentive mode
        /// Parameters:
        /// - `v_currency_id`: The v_currency to set locked blocks.
        /// - `new_blockes_op`: The new locked blocks to set.
        /// </summary>
        set_vtoken_incentive_lock_blocks = 17,
        
        /// <summary>
        /// >> set_supported_eth
        /// Set Supported eths.
        /// Parameters:
        /// - `eths`: The supported eths.
        /// </summary>
        set_supported_eth = 18,
    }
    
    /// <summary>
    /// >> 392 - Variant[bifrost_vtoken_minting.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>>(Call.mint);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.redeem);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.rebond);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.rebond_by_unlock_id);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>>(Call.set_unlock_duration);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_minimum_mint);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_minimum_redeem);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Call.add_support_rebond_token);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Call.remove_support_rebond_token);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(Call.set_fees);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.set_hook_iteration_limit);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_unlocking_total);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>>(Call.set_min_time_unit);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>>(Call.set_ongoing_time_unit);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>>(Call.mint_with_lock);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Call.unlock_incentive_minted_vtoken);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.set_incentive_coef);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>>(Call.set_vtoken_incentive_lock_blocks);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15>(Call.set_supported_eth);
        }
    }
}
