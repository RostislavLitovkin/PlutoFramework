//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> mint
        /// vtoken mint and transfer to target chain
        /// Parameters:
        /// - `currency_id`: The currency id of the token to be minted
        /// - `currency_amount`: The amount of the token to be minted
        /// - `target_chain`: The target chain to transfer the token to
        /// - `remark`: The remark of the order
        /// - `channel_id`: The channel id of the order
        /// </summary>
        mint = 0,
        
        /// <summary>
        /// >> redeem
        /// vtoken redeem and transfer to target chain
        /// Parameters:
        /// - `v_currency_id`: The currency id of the vtoken to be redeemed
        /// - `v_currency_amount`: The amount of the vtoken to be redeemed
        /// - `target_chain`: The target chain to transfer the token to
        /// </summary>
        redeem = 2,
        
        /// <summary>
        /// >> add_whitelist
        /// Add the contract account to the whitelist
        /// Parameters:
        /// - `support_chain`: The support chain of Slpx
        /// - `contract_address`: The contract address of the contract
        /// </summary>
        add_whitelist = 4,
        
        /// <summary>
        /// >> remove_whitelist
        /// Remove the contract account from the whitelist
        /// Parameters:
        /// - `support_chain`: The support chain of Slpx
        /// - `contract_address`: The contract address of the contract
        /// </summary>
        remove_whitelist = 5,
        
        /// <summary>
        /// >> set_execution_fee
        /// Set the execution fee for the currency
        /// Parameters:
        /// - `currency_id`: The currency id of the token
        /// - `execution_fee`: The execution fee of the token
        /// </summary>
        set_execution_fee = 6,
        
        /// <summary>
        /// >> set_transfer_to_fee
        /// Set the transfer fee for the currency
        /// Parameters:
        /// - `support_chain`: The support chain of Slpx
        /// - `transfer_to_fee`: The transfer fee of the token
        /// </summary>
        set_transfer_to_fee = 7,
        
        /// <summary>
        /// >> support_xcm_oracle
        /// Set the currency to support the Ethereum call switch
        /// Parameters:
        /// - `currency_id`: The currency id of the token
        /// - `is_support`: Whether to support the Ethereum call switch
        /// </summary>
        support_xcm_oracle = 8,
        
        /// <summary>
        /// >> set_xcm_oracle_configuration
        /// Set the Ethereum call configuration
        /// Parameters:
        /// - `xcm_fee`: The XCM fee of Sending Xcm
        /// - `xcm_weight`: The XCM weight of Sending Xcm
        /// - `period`: The period of Sending Xcm
        /// - `contract`: The address of XcmOracle
        /// </summary>
        set_xcm_oracle_configuration = 9,
        
        /// <summary>
        /// >> set_currency_support_xcm_fee
        /// Set the currency to support the XCM fee
        /// Parameters:
        /// - `currency_id`: The currency id of the token
        /// - `is_support`: Whether to support the XCM fee
        /// </summary>
        set_currency_support_xcm_fee = 10,
        
        /// <summary>
        /// >> set_delay_block
        /// Set the delay block, Order will be executed after the delay block.
        /// Parameters:
        /// - `delay_block`: The delay block
        /// </summary>
        set_delay_block = 11,
        
        /// <summary>
        /// >> force_add_order
        /// Force add order
        /// Parameters:
        /// - `source_chain_caller`: The caller of the source chain
        /// - `bifrost_chain_caller`: The caller of the bifrost chain
        /// - `currency_id`: The currency id of the token
        /// - `target_chain`: The target chain to transfer the token to
        /// - `remark`: The remark of the order
        /// - `channel_id`: The channel id of the order
        /// </summary>
        force_add_order = 12,
        
        /// <summary>
        /// >> mint_with_channel_id
        /// vtoken mint and transfer to target chain
        /// Parameters:
        /// - `evm_caller`: The caller of the EVM contract
        /// - `currency_id`: The currency id of the token to be minted
        /// - `target_chain`: The target chain to transfer the token to
        /// - `remark`: The remark of the order
        /// - `channel_id`: The channel id of the order
        /// </summary>
        mint_with_channel_id = 13,
        
        /// <summary>
        /// >> evm_create_order
        /// EVM create order
        /// Parameters:
        /// - `source_chain_caller`: The caller of the source chain
        /// - `source_chain_id`: The source chain id
        /// - `source_chain_block_number`: The source chain block number
        /// - `currency_id`: The currency id of the token
        /// - `currency_amount`: The currency amount of the token
        /// - `send_to`: The target chain to transfer the token to
        /// - `remark`: The remark of the order
        /// - `channel_id`: The channel id of the order
        /// </summary>
        evm_create_order = 14,
        
        /// <summary>
        /// >> set_hyperbridge_oracle
        /// Parameters:
        /// - `chain_id`: The chain id of destination chain
        /// - `to`: The address of destination contract
        /// - `timeout`: The timeout of the oracle
        /// - `payer`: The payer of the oracle
        /// - `fee`: The fee of the oracle
        /// - `tokens`: The tokens of the oracle
        /// </summary>
        set_hyperbridge_oracle = 15,
        
        /// <summary>
        /// >> set_hydration_oracle
        /// Set Hydration Oracle Config
        /// Parameters:
        /// - `period`: The period of Sending Xcm
        /// - `tokens`: The tokens of the oracle
        /// </summary>
        set_hydration_oracle = 16,
        
        /// <summary>
        /// >> async_mint
        /// Execute Async Mint
        /// </summary>
        async_mint = 18,
        
        /// <summary>
        /// >> update_async_mint_config
        /// Update Async Mint configuration
        /// </summary>
        update_async_mint_config = 20,
        
        /// <summary>
        /// >> force_increase_hyperbridge_reserve
        /// Correct vToken reserves for Hyperbridge
        /// 
        /// Parameters:
        /// - `chain_id`: The target chain ID for correction
        /// - `currency_id`: The currency ID of the vToken
        /// - `amount`: The amount of vToken to mint and transfer
        /// </summary>
        force_increase_hyperbridge_reserve = 21,
    }
    
    /// <summary>
    /// >> 459 - Variant[bifrost_slpx.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.mint);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain>>(Call.redeem);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160>>(Call.add_whitelist);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160>>(Call.remove_whitelist);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_execution_fee);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumSupportChain, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_transfer_to_fee);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.support_xcm_oracle);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160>>(Call.set_xcm_oracle_configuration);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.set_currency_support_xcm_fee);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.set_delay_block);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.EnumOrderCaller, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.force_add_order);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.mint_with_channel_id);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160, Substrate.NetApi.Model.Types.Primitive.U64, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.EnumTargetChain, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.evm_create_order);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.primitive_types.H160, Substrate.NetApi.Model.Types.Primitive.U64, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.set_hyperbridge_oracle);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128, BifrostPolkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT19>>(Call.set_hydration_oracle);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.async_mint);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_slpx.types.AsyncMintConfiguration>(Call.update_async_mint_config);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.force_increase_hyperbridge_reserve);
        }
    }
}
