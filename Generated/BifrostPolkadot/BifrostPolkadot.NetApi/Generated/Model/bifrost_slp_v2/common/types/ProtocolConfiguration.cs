//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types
{
    
    
    /// <summary>
    /// >> 503 - Composite[bifrost_slp_v2.common.types.ProtocolConfiguration]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class ProtocolConfiguration : BaseType
    {
        
        /// <summary>
        /// >> xcm_task_fee
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.XcmFee XcmTaskFee { get; set; }
        /// <summary>
        /// >> protocol_fee_rate
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill ProtocolFeeRate { get; set; }
        /// <summary>
        /// >> unlock_period
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit UnlockPeriod { get; set; }
        /// <summary>
        /// >> operator
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 Operator { get; set; }
        /// <summary>
        /// >> max_update_token_exchange_rate
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill MaxUpdateTokenExchangeRate { get; set; }
        /// <summary>
        /// >> update_time_unit_interval
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UpdateTimeUnitInterval { get; set; }
        /// <summary>
        /// >> update_exchange_rate_interval
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UpdateExchangeRateInterval { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "ProtocolConfiguration";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(XcmTaskFee.Encode());
            result.AddRange(ProtocolFeeRate.Encode());
            result.AddRange(UnlockPeriod.Encode());
            result.AddRange(Operator.Encode());
            result.AddRange(MaxUpdateTokenExchangeRate.Encode());
            result.AddRange(UpdateTimeUnitInterval.Encode());
            result.AddRange(UpdateExchangeRateInterval.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            XcmTaskFee = new BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.XcmFee();
            XcmTaskFee.Decode(byteArray, ref p);
            ProtocolFeeRate = new BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            ProtocolFeeRate.Decode(byteArray, ref p);
            UnlockPeriod = new BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit();
            UnlockPeriod.Decode(byteArray, ref p);
            Operator = new BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            Operator.Decode(byteArray, ref p);
            MaxUpdateTokenExchangeRate = new BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            MaxUpdateTokenExchangeRate.Decode(byteArray, ref p);
            UpdateTimeUnitInterval = new Substrate.NetApi.Model.Types.Primitive.U32();
            UpdateTimeUnitInterval.Decode(byteArray, ref p);
            UpdateExchangeRateInterval = new Substrate.NetApi.Model.Types.Primitive.U32();
            UpdateExchangeRateInterval.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
