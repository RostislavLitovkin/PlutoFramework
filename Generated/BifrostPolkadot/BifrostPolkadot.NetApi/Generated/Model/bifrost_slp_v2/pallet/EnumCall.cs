//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> set_protocol_configuration
        /// Set the XCM fee for a specific XCM task.
        /// 
        /// Can only be called by governance
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `configuration`: The staking protocol configuration.
        /// </summary>
        set_protocol_configuration = 0,
        
        /// <summary>
        /// >> add_delegator
        /// Add a delegator to the staking protocol.
        /// 
        /// Can only be called by governance
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: If delegator is None, the delegator will be derived from sovereign
        ///   account.
        /// </summary>
        add_delegator = 1,
        
        /// <summary>
        /// >> remove_delegator
        /// Remove a delegator from the staking protocol.
        /// 
        /// Can only be called by governance
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Delegator that need to be removed.
        /// </summary>
        remove_delegator = 2,
        
        /// <summary>
        /// >> add_validator
        /// Add a validator to the staking protocol.
        /// 
        /// Can only be called by governance
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `validator`: Validator that need to be added.
        /// </summary>
        add_validator = 3,
        
        /// <summary>
        /// >> remove_validator
        /// Remove a validator from the staking protocol.
        /// 
        /// Can only be called by governance
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `validator`: Validator that need to be removed.
        /// </summary>
        remove_validator = 4,
        
        /// <summary>
        /// >> set_ledger
        /// Set the update token exchange rate limit for a specific staking protocol.
        /// 
        /// Can only be called by governance.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `ledger`: Ledger that need to be set.
        /// </summary>
        set_ledger = 5,
        
        /// <summary>
        /// >> transfer_to
        /// Transfer the staking token to remote chain.
        /// Transfer the free balance of the Entrance Account to the selected delegator.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// </summary>
        transfer_to = 6,
        
        /// <summary>
        /// >> transfer_back
        /// Transfer the staking token back from remote chain.
        /// Transfer the amount of tokens from the selected delegator back to the entrance account.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `amount`: The amount of tokens to transfer back.
        /// </summary>
        transfer_back = 7,
        
        /// <summary>
        /// >> update_ongoing_time_unit
        /// Update the ongoing time unit for a specific staking protocol.
        /// Update frequency controlled by update_time_unit_interval.
        /// Less than update_time_unit_interval will report an error.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `time_uint_option`: If time_uint is None, the ongoing time unit will be increased by
        ///   one. Otherwise, the ongoing time unit will be updated to the specified time unit.
        /// </summary>
        update_ongoing_time_unit = 8,
        
        /// <summary>
        /// >> update_token_exchange_rate
        /// Update the token exchange rate for a specific staking protocol.
        /// Update frequency controlled by update_exchange_rate_interval.
        /// Amount max update for token pool * max_update_token_exchange_rate.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `amount`: The amount of tokens to update the token exchange rate.
        /// </summary>
        update_token_exchange_rate = 9,
        
        /// <summary>
        /// >> astar_dapp_staking
        /// Manipulate a delegator to perform Dapp staking related operations.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `task`: The Dapp staking task.
        /// </summary>
        astar_dapp_staking = 10,
        
        /// <summary>
        /// >> notify_astar_dapp_staking
        /// Processing Xcm message execution results.
        /// 
        /// Can be called by governance or xcm origin.
        /// </summary>
        notify_astar_dapp_staking = 11,
        
        /// <summary>
        /// >> ethereum_staking
        /// Manipulate a delegator to perform Dapp staking related operations.
        /// 
        /// Can be called by governance or staking protocol operator.
        /// 
        /// Parameters
        /// - `staking_protocol`: Slp supports staking protocols.
        /// - `delegator`: Select the delegator which is existed.
        /// - `task`: The Dapp staking task.
        /// </summary>
        ethereum_staking = 12,
    }
    
    /// <summary>
    /// >> 501 - Variant[bifrost_slp_v2.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.ProtocolConfiguration>>(Call.set_protocol_configuration);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>>>(Call.add_delegator);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator>>(Call.remove_delegator);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumValidator>>(Call.add_validator);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumValidator>>(Call.remove_validator);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumLedger>>(Call.set_ledger);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.transfer_to);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.transfer_back);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.time_unit.EnumTimeUnit>>>(Call.update_ongoing_time_unit);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.polkadot.EnumStakingProtocol, Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.update_token_exchange_rate);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.astar_dapp_staking.types.EnumDappStaking>>(Call.astar_dapp_staking);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U64, BifrostPolkadot.NetApi.Generated.Model.staging_xcm.v4.EnumResponse>>(Call.notify_astar_dapp_staking);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.common.types.EnumDelegator, BifrostPolkadot.NetApi.Generated.Model.bifrost_slp_v2.ethereum_staking.types.EnumEthereumStaking>>(Call.ethereum_staking);
        }
    }
}
