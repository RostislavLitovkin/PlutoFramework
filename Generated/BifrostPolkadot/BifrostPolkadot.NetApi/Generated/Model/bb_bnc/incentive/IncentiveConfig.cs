//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bb_bnc.incentive
{
    
    
    /// <summary>
    /// >> 599 - Composite[bb_bnc.incentive.IncentiveConfig]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class IncentiveConfig : BaseType
    {
        
        /// <summary>
        /// >> reward_rate
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8 RewardRate { get; set; }
        /// <summary>
        /// >> reward_per_token_stored
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8 RewardPerTokenStored { get; set; }
        /// <summary>
        /// >> rewards_duration
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardsDuration { get; set; }
        /// <summary>
        /// >> period_finish
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PeriodFinish { get; set; }
        /// <summary>
        /// >> last_update_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LastUpdateTime { get; set; }
        /// <summary>
        /// >> incentive_controller
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32> IncentiveController { get; set; }
        /// <summary>
        /// >> last_reward
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> LastReward { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "IncentiveConfig";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(RewardRate.Encode());
            result.AddRange(RewardPerTokenStored.Encode());
            result.AddRange(RewardsDuration.Encode());
            result.AddRange(PeriodFinish.Encode());
            result.AddRange(LastUpdateTime.Encode());
            result.AddRange(IncentiveController.Encode());
            result.AddRange(LastReward.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            RewardRate = new BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8();
            RewardRate.Decode(byteArray, ref p);
            RewardPerTokenStored = new BifrostPolkadot.NetApi.Generated.Types.Base.BTreeMapT8();
            RewardPerTokenStored.Decode(byteArray, ref p);
            RewardsDuration = new Substrate.NetApi.Model.Types.Primitive.U32();
            RewardsDuration.Decode(byteArray, ref p);
            PeriodFinish = new Substrate.NetApi.Model.Types.Primitive.U32();
            PeriodFinish.Decode(byteArray, ref p);
            LastUpdateTime = new Substrate.NetApi.Model.Types.Primitive.U32();
            LastUpdateTime.Decode(byteArray, ref p);
            IncentiveController = new Substrate.NetApi.Model.Types.Base.BaseOpt<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>();
            IncentiveController.Decode(byteArray, ref p);
            LastReward = new Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>();
            LastReward.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
