//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_system_staking.pallet
{
    
    
    /// <summary>
    /// >> Event
    /// The `Event` enum of this pallet
    /// </summary>
    public enum Event
    {
        
        /// <summary>
        /// >> NewRound
        /// A new staking round has started.
        /// 
        /// - `current`: The index of the current round.
        /// - `first`: The block number at which this round started.
        /// - `length`: The length of the round in blocks.
        /// </summary>
        NewRound = 0,
        
        /// <summary>
        /// >> TokenConfigChanged
        /// Configuration of a token has been changed.
        /// 
        /// - `token`: The identifier of the token whose configuration changed.
        /// - `exec_delay`: The delay in blocks before the changes take effect.
        /// - `system_stakable_base`: The base value of system-stakable assets.
        /// </summary>
        TokenConfigChanged = 1,
        
        /// <summary>
        /// >> DepositFailed
        /// A deposit operation has failed.
        /// 
        /// - `token`: The identifier of the token being deposited.
        /// - `amount`: The amount of the token to be deposited.
        /// - `system_stakable_amount`: The amount staked in the system-stakable pool.
        /// - `system_shadow_amount`: The amount shadow-staked in the system.
        /// - `pending_redeem_amount`: The amount pending redemption.
        /// </summary>
        DepositFailed = 2,
        
        /// <summary>
        /// >> MintSuccess
        /// Minting operation succeeded.
        /// 
        /// - `token`: The identifier of the token being minted.
        /// - `amount`: The amount of the token to be minted.
        /// - `system_stakable_amount`: The amount staked in the system-stakable pool.
        /// - `system_shadow_amount`: The amount shadow-staked in the system.
        /// - `pending_redeem_amount`: The amount pending redemption.
        /// </summary>
        MintSuccess = 3,
        
        /// <summary>
        /// >> MintFailed
        /// Minting operation failed.
        /// 
        /// # Parameters
        /// (Same as MintSuccess)
        /// </summary>
        MintFailed = 4,
        
        /// <summary>
        /// >> WithdrawSuccess
        /// Withdrawal operation succeeded.
        /// 
        /// # Parameters
        /// (Same as MintSuccess)
        /// </summary>
        WithdrawSuccess = 5,
        
        /// <summary>
        /// >> WithdrawFailed
        /// Withdrawal operation failed.
        /// 
        /// # Parameters
        /// (Same as MintSuccess)
        /// </summary>
        WithdrawFailed = 6,
        
        /// <summary>
        /// >> Redeemed
        /// A redemption operation has succeeded.
        /// 
        /// # Parameters
        /// (Same as MintSuccess)
        /// </summary>
        Redeemed = 7,
        
        /// <summary>
        /// >> RedeemFailed
        /// A redemption operation has failed.
        /// 
        /// # Parameters
        /// (Same as MintSuccess)
        /// </summary>
        RedeemFailed = 8,
        
        /// <summary>
        /// >> VtokenNotFound
        /// The specified token could not be found.
        /// 
        /// - `token`: The identifier of the token that was not found.
        /// </summary>
        VtokenNotFound = 9,
        
        /// <summary>
        /// >> TokenInfoRefreshed
        /// Token information has been refreshed.
        /// 
        /// - `token`: The identifier of the token whose information was refreshed.
        /// </summary>
        TokenInfoRefreshed = 10,
        
        /// <summary>
        /// >> Payout
        /// A payout has been made.
        /// 
        /// - `token`: The identifier of the token involved in the payout.
        /// - `vtoken`: The identifier of the vtoken involved.
        /// - `from`: The account from which the payout originated.
        /// - `to`: The account to which the payout was made.
        /// - `amount`: The total amount of the payout.
        /// - `free`: The amount of free balance after the payout.
        /// - `vfree`: The amount of vtoken free balance after the payout.
        /// - `shadow`: The shadow balance after the payout.
        /// </summary>
        Payout = 11,
        
        /// <summary>
        /// >> PayoutFailed
        /// payout error
        /// </summary>
        PayoutFailed = 12,
    }
    
    /// <summary>
    /// >> 592 - Variant[bifrost_system_staking.pallet.Event]
    /// The `Event` enum of this pallet
    /// </summary>
    public sealed class EnumEvent : BaseEnumRust<Event>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumEvent()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Event.NewRound);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.TokenConfigChanged);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.DepositFailed);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.MintSuccess);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.MintFailed);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.WithdrawSuccess);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.WithdrawFailed);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.Redeemed);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.RedeemFailed);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Event.VtokenNotFound);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Event.TokenInfoRefreshed);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Event.Payout);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(Event.PayoutFailed);
        }
    }
}
