//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.pallet
{
    
    
    /// <summary>
    /// >> Event
    /// The `Event` enum of this pallet
    /// </summary>
    public enum Event
    {
        
        /// <summary>
        /// >> Voted
        /// A vote has been cast.
        /// 
        /// - `who`: The account that cast the vote.
        /// - `vtoken`: The token used for voting.
        /// - `poll_index`: The index of the poll being voted on.
        /// - `token_vote`: The vote cast using the token.
        /// - `delegator_vote`: The vote cast by a delegator.
        /// </summary>
        Voted = 0,
        
        /// <summary>
        /// >> Unlocked
        /// A user's vote has been unlocked, allowing them to retrieve their tokens.
        /// 
        /// - `who`: The account whose tokens are unlocked.
        /// - `vtoken`: The token that was locked during voting.
        /// - `poll_index`: The index of the poll associated with the unlocking.
        /// </summary>
        Unlocked = 1,
        
        /// <summary>
        /// >> DelegatorVoteRemoved
        /// A delegator's vote has been removed.
        /// 
        /// - `who`: The account that dispatched remove_delegator_vote.
        /// - `vtoken`: The token associated with the delegator's vote.
        /// - `derivative_index`: The index of the derivative.
        /// </summary>
        DelegatorVoteRemoved = 2,
        
        /// <summary>
        /// >> DelegatorAdded
        /// A delegator has been added.
        /// 
        /// - `vtoken`: The token associated with the delegator.
        /// - `derivative_index`: The index of the derivative being added for the delegator.
        /// </summary>
        DelegatorAdded = 3,
        
        /// <summary>
        /// >> ReferendumInfoCreated
        /// A new referendum information has been created.
        /// 
        /// - `vtoken`: The token associated with the referendum.
        /// - `poll_index`: The index of the poll.
        /// - `info`: The referendum information (details about the poll).
        /// </summary>
        ReferendumInfoCreated = 4,
        
        /// <summary>
        /// >> ReferendumInfoSet
        /// Referendum information has been updated.
        /// 
        /// - `vtoken`: The token associated with the referendum.
        /// - `poll_index`: The index of the poll.
        /// - `info`: The updated referendum information.
        /// </summary>
        ReferendumInfoSet = 5,
        
        /// <summary>
        /// >> VoteLockingPeriodSet
        /// The vote locking period has been set.
        /// 
        /// - `vtoken`: The token for which the locking period is being set.
        /// - `locking_period`: The period for which votes will be locked (in block numbers).
        /// </summary>
        VoteLockingPeriodSet = 6,
        
        /// <summary>
        /// >> UndecidingTimeoutSet
        /// The undeciding timeout period has been set.
        /// 
        /// - `vtoken`: The token associated with the timeout.
        /// - `undeciding_timeout`: The period of time before a poll is considered undecided.
        /// </summary>
        UndecidingTimeoutSet = 7,
        
        /// <summary>
        /// >> ReferendumKilled
        /// A referendum has been killed (cancelled or ended).
        /// 
        /// - `vtoken`: The token associated with the referendum.
        /// - `poll_index`: The index of the poll being killed.
        /// </summary>
        ReferendumKilled = 8,
        
        /// <summary>
        /// >> VoteNotified
        /// A notification about the result of a vote has been sent.
        /// 
        /// - `vtoken`: The token associated with the poll.
        /// - `poll_index`: The index of the poll.
        /// - `success`: Whether the notification was successful or not.
        /// </summary>
        VoteNotified = 9,
        
        /// <summary>
        /// >> DelegatorVoteRemovedNotified
        /// A notification about the removal of a delegator's vote has been sent.
        /// 
        /// - `vtoken`: The token associated with the poll.
        /// - `poll_index`: The index of the poll.
        /// - `success`: Whether the notification was successful or not.
        /// </summary>
        DelegatorVoteRemovedNotified = 10,
        
        /// <summary>
        /// >> ResponseReceived
        /// A response has been received from a specific location.
        /// 
        /// - `responder`: The location that sent the response.
        /// - `query_id`: The ID of the query that was responded to.
        /// - `response`: The content of the response.
        /// </summary>
        ResponseReceived = 11,
        
        /// <summary>
        /// >> VoteCapRatioSet
        /// The vote cap ratio has been set.
        /// 
        /// - `vtoken`: The token associated with the cap.
        /// - `vote_cap_ratio`: The maximum allowed ratio for the vote.
        /// </summary>
        VoteCapRatioSet = 12,
        
        /// <summary>
        /// >> ReferendumStatusUpdated
        /// A referendum's status was updated.
        /// </summary>
        ReferendumStatusUpdated = 13,
    }
    
    /// <summary>
    /// >> 609 - Variant[bifrost_vtoken_voting.pallet.Event]
    /// The `Event` enum of this pallet
    /// </summary>
    public sealed class EnumEvent : BaseEnumRust<Event>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumEvent()
        {
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumAccountVote, BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumAccountVote>>(Event.Voted);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(Event.Unlocked);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U16>>(Event.DelegatorVoteRemoved);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U16>>(Event.DelegatorAdded);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo>>(Event.ReferendumInfoCreated);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo>>(Event.ReferendumInfoSet);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(Event.VoteLockingPeriodSet);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(Event.UndecidingTimeoutSet);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(Event.ReferendumKilled);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.Bool>>(Event.VoteNotified);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.Bool>>(Event.DelegatorVoteRemovedNotified);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.staging_xcm.v4.location.Location, Substrate.NetApi.Model.Types.Primitive.U64, BifrostPolkadot.NetApi.Generated.Model.staging_xcm.v4.EnumResponse>>(Event.ResponseReceived);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>>(Event.VoteCapRatioSet);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumVoteStatus>>(Event.ReferendumStatusUpdated);
        }
    }
}
