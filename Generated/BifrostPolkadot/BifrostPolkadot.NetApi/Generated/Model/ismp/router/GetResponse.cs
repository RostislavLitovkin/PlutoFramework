//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.ismp.router
{
    
    
    /// <summary>
    /// >> 340 - Composite[ismp.router.GetResponse]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class GetResponse : BaseType
    {
        
        /// <summary>
        /// >> get
        /// </summary>
        public BifrostPolkadot.NetApi.Generated.Model.ismp.router.GetRequest Get { get; set; }
        /// <summary>
        /// >> values
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.ismp.router.StorageValue> Values { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "GetResponse";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Get.Encode());
            result.AddRange(Values.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Get = new BifrostPolkadot.NetApi.Generated.Model.ismp.router.GetRequest();
            Get.Decode(byteArray, ref p);
            Values = new Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.ismp.router.StorageValue>();
            Values.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
