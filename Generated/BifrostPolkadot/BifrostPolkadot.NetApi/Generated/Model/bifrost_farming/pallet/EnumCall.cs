//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_farming.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_farming_pool
        /// Create a farming pool.
        /// 
        /// The state of the pool will be set to `Ongoing` if the current block number is greater
        /// than or equal to the field `after_block_to_start` or the total shares of the pool is
        /// greater than or equal to the field `min_deposit_to_start`.
        /// 
        /// - `tokens_proportion`: The proportion of each token in the pool.
        /// - `basic_rewards`: The basic reward of each token in the pool.
        /// - `gauge_init`: The initial gauge pool info.
        /// - `min_deposit_to_start`: The minimum deposit to start the pool.
        /// - `after_block_to_start`: The block number to start the pool.
        /// - `withdraw_limit_time`: The block number to limit the withdraw.
        /// - `claim_limit_time`: The block number to limit the claim.
        /// - `withdraw_limit_count`: The count to limit the withdraw.
        /// </summary>
        create_farming_pool = 0,
        
        /// <summary>
        /// >> charge
        /// Charge the pool.
        /// 
        /// Transfer the rewards from the exchanger to the pool. It will charge the rewards to the
        /// gauge pool if the `if_gauge` is true, otherwise it will charge the rewards to the
        /// farming pool.
        /// 
        /// - `pid`: The pool id.
        /// - `rewards`: The rewards to charge.
        /// - `if_gauge`: If the rewards are for the gauge pool.
        /// </summary>
        charge = 1,
        
        /// <summary>
        /// >> deposit
        /// Deposit the pool.
        /// 
        /// Mint the share to the exchanger and transfer the tokens to the pool. The state of the
        /// pool should be `Ongoing` or `Charged`. The current block number should be greater than
        /// or equal to the field `after_block_to_start` if the state of the pool is `Charged`.
        /// 
        /// - `pid`: The pool id.
        /// - `add_value`: The value to deposit.
        /// </summary>
        deposit = 2,
        
        /// <summary>
        /// >> withdraw
        /// Withdraw from the pool.
        /// 
        /// The state of the pool should be `Ongoing`, `Charged` or `Dead`.
        /// User's withdraw limit count should be less than the field `withdraw_limit_count`.
        /// It will remove the share from the user, but not transfer the tokens to the user
        /// immediately.
        /// 
        /// - `pid`: The pool id.
        /// - `remove_value`: The value to withdraw.
        /// </summary>
        withdraw = 3,
        
        /// <summary>
        /// >> claim
        /// Claim the rewards from the pool.
        /// 
        /// The state of the pool should be `Ongoing` or `Dead`.
        /// The user should not claim the rewards within the field `claim_limit_time`.
        /// It will claim the rewards to the user, and transfer the tokens to the user immediately.
        /// 
        /// - `pid`: The pool id.
        /// </summary>
        claim = 4,
        
        /// <summary>
        /// >> withdraw_claim
        /// Withdraw the claim from the pool.
        /// 
        /// It will immediately transfer the withdrawable tokens to the user.
        /// 
        /// - `pid`: The pool id.
        /// </summary>
        withdraw_claim = 5,
        
        /// <summary>
        /// >> force_retire_pool
        /// Force retire the pool.
        /// 
        /// The state of the pool should be `Dead`.
        /// It will retire the pool and transfer the withdrawable tokens to the users.
        /// 
        /// - `pid`: The pool id.
        /// </summary>
        force_retire_pool = 6,
        
        /// <summary>
        /// >> set_retire_limit
        /// Set the retire limit.
        /// 
        /// - `limit`: The retire limit.
        /// </summary>
        set_retire_limit = 7,
        
        /// <summary>
        /// >> close_pool
        /// Close the pool.
        /// 
        /// Change the state of the pool to `Dead` before retiring the pool.
        /// 
        /// - `pid`: The pool id.
        /// </summary>
        close_pool = 8,
        
        /// <summary>
        /// >> reset_pool
        /// Reuse retired pools
        /// 
        /// - `pid`: The pool id.
        /// - `basic_rewards`: The basic reward of each token in the pool.
        /// - `min_deposit_to_start`: The minimum deposit to start the pool.
        /// - `after_block_to_start`: The block number to start the pool.
        /// - `withdraw_limit_time`: The block number to limit the withdraw.
        /// - `claim_limit_time`: The block number to limit the claim.
        /// - `withdraw_limit_count`: The count to limit the withdraw.
        /// - `gauge_init`: The initial gauge pool info.
        /// </summary>
        reset_pool = 9,
        
        /// <summary>
        /// >> kill_pool
        /// Kill the pool after retired.
        /// 
        /// - `pid`: The pool id.
        /// </summary>
        kill_pool = 10,
        
        /// <summary>
        /// >> edit_pool
        /// Edit the pool at the state of `Retired`, `Ongoing`, `Charged` or `UnCharged`.
        /// </summary>
        edit_pool = 11,
        
        /// <summary>
        /// >> force_gauge_claim
        /// Force claim the rewards from the gauge pool.
        /// 
        /// Control origin can force claim the rewards from the gauge pool to the users.
        /// 
        /// - `gid`: The gauge pool id.
        /// </summary>
        force_gauge_claim = 13,
        
        /// <summary>
        /// >> add_boost_pool_whitelist
        /// Add whitelist and take effect immediately
        /// 
        /// - `whitelist`: The whitelist to add
        /// </summary>
        add_boost_pool_whitelist = 14,
        
        /// <summary>
        /// >> set_next_round_whitelist
        /// Whitelist for next round in effect
        /// 
        /// - `whitelist`: The whitelist for the next round
        /// </summary>
        set_next_round_whitelist = 15,
        
        /// <summary>
        /// >> vote
        /// Vote for the pool
        /// 
        /// - `vote_list`: The vote list for the pool
        /// </summary>
        vote = 16,
        
        /// <summary>
        /// >> start_boost_round
        /// Start the boost round
        /// 
        /// - `round_length`: The length of the round
        /// </summary>
        start_boost_round = 17,
        
        /// <summary>
        /// >> end_boost_round
        /// Force end of boost round
        /// </summary>
        end_boost_round = 18,
        
        /// <summary>
        /// >> charge_boost
        /// Charge the boost rewards to the FarmingBoost account
        /// 
        /// - `rewards`: The rewards to charge
        /// </summary>
        charge_boost = 19,
        
        /// <summary>
        /// >> refresh
        /// </summary>
        refresh = 20,
    }
    
    /// <summary>
    /// >> 442 - Variant[bifrost_farming.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>>, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U8>>(Call.create_farming_pool);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>>(Call.charge);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.deposit);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.withdraw);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.claim);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.withdraw_claim);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.force_retire_pool);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.set_retire_limit);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.close_pool);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>>>(Call.reset_pool);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.kill_pool);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8>>>(Call.edit_pool);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.force_gauge_claim);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>>(Call.add_boost_pool_whitelist);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>>(Call.set_next_round_whitelist);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent>>>(Call.vote);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.start_boost_round);
				AddTypeDecoder<BaseVoid>(Call.end_boost_round);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<BifrostPolkadot.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.charge_boost);
				AddTypeDecoder<BaseVoid>(Call.refresh);
        }
    }
}
