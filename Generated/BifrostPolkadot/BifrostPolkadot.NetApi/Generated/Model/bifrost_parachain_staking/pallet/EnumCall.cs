//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace BifrostPolkadot.NetApi.Generated.Model.bifrost_parachain_staking.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> set_staking_expectations
        /// Set the expectations for total staked. These expectations determine the issuance for
        /// the round according to logic in `fn compute_issuance`
        /// </summary>
        set_staking_expectations = 0,
        
        /// <summary>
        /// >> set_inflation
        /// Set the annual inflation rate to derive per-round inflation
        /// </summary>
        set_inflation = 1,
        
        /// <summary>
        /// >> set_parachain_bond_account
        /// Set the account that will hold funds set aside for parachain bond
        /// </summary>
        set_parachain_bond_account = 2,
        
        /// <summary>
        /// >> set_parachain_bond_reserve_percent
        /// Set the percent of inflation set aside for parachain bond
        /// </summary>
        set_parachain_bond_reserve_percent = 3,
        
        /// <summary>
        /// >> set_total_selected
        /// Set the total number of collator candidates selected per round
        /// - changes are not applied until the start of the next round
        /// </summary>
        set_total_selected = 4,
        
        /// <summary>
        /// >> set_collator_commission
        /// Set the commission for all collators
        /// </summary>
        set_collator_commission = 5,
        
        /// <summary>
        /// >> set_blocks_per_round
        /// Set blocks per round
        /// - if called with `new` less than length of current round, will transition immediately
        /// in the next block
        /// - also updates per-round inflation config
        /// </summary>
        set_blocks_per_round = 6,
        
        /// <summary>
        /// >> join_candidates
        /// Join the set of collator candidates
        /// </summary>
        join_candidates = 7,
        
        /// <summary>
        /// >> schedule_leave_candidates
        /// Request to leave the set of candidates. If successful, the account is immediately
        /// removed from the candidate pool to prevent selection as a collator.
        /// </summary>
        schedule_leave_candidates = 8,
        
        /// <summary>
        /// >> execute_leave_candidates
        /// Execute leave candidates request
        /// </summary>
        execute_leave_candidates = 9,
        
        /// <summary>
        /// >> cancel_leave_candidates
        /// Cancel open request to leave candidates
        /// - only callable by collator account
        /// - result upon successful call is the candidate is active in the candidate pool
        /// </summary>
        cancel_leave_candidates = 10,
        
        /// <summary>
        /// >> go_offline
        /// Temporarily leave the set of collator candidates without unbonding
        /// </summary>
        go_offline = 11,
        
        /// <summary>
        /// >> go_online
        /// Rejoin the set of collator candidates if previously had called `go_offline`
        /// </summary>
        go_online = 12,
        
        /// <summary>
        /// >> candidate_bond_more
        /// Increase collator candidate self bond by `more`
        /// </summary>
        candidate_bond_more = 13,
        
        /// <summary>
        /// >> schedule_candidate_bond_less
        /// Request by collator candidate to decrease self bond by `less`
        /// </summary>
        schedule_candidate_bond_less = 14,
        
        /// <summary>
        /// >> execute_candidate_bond_less
        /// Execute pending request to adjust the collator candidate self bond
        /// </summary>
        execute_candidate_bond_less = 15,
        
        /// <summary>
        /// >> cancel_candidate_bond_less
        /// Cancel pending request to adjust the collator candidate self bond
        /// </summary>
        cancel_candidate_bond_less = 16,
        
        /// <summary>
        /// >> delegate
        /// If caller is not a delegator and not a collator, then join the set of delegators
        /// If caller is a delegator, then makes delegation to change their delegation state
        /// </summary>
        @delegate = 17,
        
        /// <summary>
        /// >> schedule_leave_delegators
        /// DEPRECATED use batch util with schedule_revoke_delegation for all delegations
        /// Request to leave the set of delegators. If successful, the caller is scheduled to be
        /// allowed to exit via a [DelegationAction::Revoke] towards all existing delegations.
        /// Success forbids future delegation requests until the request is invoked or cancelled.
        /// </summary>
        schedule_leave_delegators = 18,
        
        /// <summary>
        /// >> execute_leave_delegators
        /// DEPRECATED use batch util with execute_delegation_request for all delegations
        /// Execute the right to exit the set of delegators and revoke all ongoing delegations.
        /// </summary>
        execute_leave_delegators = 19,
        
        /// <summary>
        /// >> cancel_leave_delegators
        /// DEPRECATED use batch util with cancel_delegation_request for all delegations
        /// Cancel a pending request to exit the set of delegators. Success clears the pending exit
        /// request (thereby resetting the delay upon another `leave_delegators` call).
        /// </summary>
        cancel_leave_delegators = 20,
        
        /// <summary>
        /// >> schedule_revoke_delegation
        /// Request to revoke an existing delegation. If successful, the delegation is scheduled
        /// to be allowed to be revoked via the `execute_delegation_request` extrinsic.
        /// </summary>
        schedule_revoke_delegation = 21,
        
        /// <summary>
        /// >> delegator_bond_more
        /// Bond more for delegators wrt a specific collator candidate.
        /// </summary>
        delegator_bond_more = 22,
        
        /// <summary>
        /// >> schedule_delegator_bond_less
        /// Request bond less for delegators wrt a specific collator candidate.
        /// </summary>
        schedule_delegator_bond_less = 23,
        
        /// <summary>
        /// >> execute_delegation_request
        /// Execute pending request to change an existing delegation
        /// </summary>
        execute_delegation_request = 24,
        
        /// <summary>
        /// >> cancel_delegation_request
        /// Cancel request to change an existing delegation.
        /// </summary>
        cancel_delegation_request = 25,
        
        /// <summary>
        /// >> hotfix_remove_delegation_requests_exited_candidates
        /// Hotfix to remove existing empty entries for candidates that have left.
        /// </summary>
        hotfix_remove_delegation_requests_exited_candidates = 26,
    }
    
    /// <summary>
    /// >> 97 - Variant[bifrost_parachain_staking.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_parachain_staking.inflation.RangeT1>(Call.set_staking_expectations);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.bifrost_parachain_staking.inflation.RangeT2>(Call.set_inflation);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.set_parachain_bond_account);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Percent>(Call.set_parachain_bond_reserve_percent);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.set_total_selected);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>(Call.set_collator_commission);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.set_blocks_per_round);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.join_candidates);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.schedule_leave_candidates);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.execute_leave_candidates);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.cancel_leave_candidates);
				AddTypeDecoder<BaseVoid>(Call.go_offline);
				AddTypeDecoder<BaseVoid>(Call.go_online);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U128>(Call.candidate_bond_more);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U128>(Call.schedule_candidate_bond_less);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.execute_candidate_bond_less);
				AddTypeDecoder<BaseVoid>(Call.cancel_candidate_bond_less);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.@delegate);
				AddTypeDecoder<BaseVoid>(Call.schedule_leave_delegators);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.execute_leave_delegators);
				AddTypeDecoder<BaseVoid>(Call.cancel_leave_delegators);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.schedule_revoke_delegation);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.delegator_bond_more);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.schedule_delegator_bond_less);
				AddTypeDecoder<BaseTuple<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(Call.execute_delegation_request);
				AddTypeDecoder<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.cancel_delegation_request);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseVec<BifrostPolkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(Call.hotfix_remove_delegation_requests_exited_candidates);
        }
    }
}
