{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "11": {
        "TypeId": 12,
        "TypeDef": "Compact"
      },
      "12": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "13": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "15": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "16": {
        "TypeId": 17,
        "TypeDef": "Sequence"
      },
      "17": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "18": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "19": {
        "TypeId": 20,
        "TypeDef": "Sequence"
      },
      "20": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 625
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 21
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 287
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 21
          },
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "21": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 22
              }
            ],
            "Index": 0
          },
          {
            "Name": "Indices",
            "TypeFields": [
              {
                "TypeName": "pallet_indices::Event<Runtime>",
                "TypeId": 31
              }
            ],
            "Index": 2
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 32
              }
            ],
            "Index": 5
          },
          {
            "Name": "TxPause",
            "TypeFields": [
              {
                "TypeName": "pallet_tx_pause::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 7
          },
          {
            "Name": "MultiBlockMigrations",
            "TypeFields": [
              {
                "TypeName": "pallet_migrations::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 8
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 41
              }
            ],
            "Index": 11
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 42
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "bifrost_parachain_staking::Event<Runtime>",
                "TypeId": 43
              }
            ],
            "Index": 25
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "pallet_conviction_voting::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 36
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime>",
                "TypeId": 52
              }
            ],
            "Index": 37
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "pallet_whitelist::Event<Runtime>",
                "TypeId": 520
              }
            ],
            "Index": 39
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 525
              }
            ],
            "Index": 40
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 526
              }
            ],
            "Index": 41
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 528
              }
            ],
            "Index": 42
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "pallet_message_queue::Event<Runtime>",
                "TypeId": 529
              }
            ],
            "Index": 44
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 531
              }
            ],
            "Index": 50
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 533
              }
            ],
            "Index": 51
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 534
              }
            ],
            "Index": 52
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 535
              }
            ],
            "Index": 53
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 536
              }
            ],
            "Index": 54
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "bifrost_vesting::Event<Runtime>",
                "TypeId": 537
              }
            ],
            "Index": 60
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 538
              }
            ],
            "Index": 61
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 539
              }
            ],
            "Index": 64
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Event",
                "TypeId": 540
              }
            ],
            "Index": 65
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "pallet_evm::Event<Runtime>",
                "TypeId": 549
              }
            ],
            "Index": 66
          },
          {
            "Name": "EVMAccounts",
            "TypeFields": [
              {
                "TypeName": "pallet_evm_accounts::Event<Runtime>",
                "TypeId": 551
              }
            ],
            "Index": 69
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 552
              }
            ],
            "Index": 70
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "orml_tokens::Event<Runtime>",
                "TypeId": 553
              }
            ],
            "Index": 71
          },
          {
            "Name": "UnknownTokens",
            "TypeFields": [
              {
                "TypeName": "orml_unknown_tokens::Event",
                "TypeId": 554
              }
            ],
            "Index": 73
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "orml_xcm::Event<Runtime>",
                "TypeId": 555
              }
            ],
            "Index": 74
          },
          {
            "Name": "ZenlinkProtocol",
            "TypeFields": [
              {
                "TypeName": "zenlink_protocol::Event<Runtime>",
                "TypeId": 556
              }
            ],
            "Index": 80
          },
          {
            "Name": "Ismp",
            "TypeFields": [
              {
                "TypeName": "pallet_ismp::Event<Runtime>",
                "TypeId": 557
              }
            ],
            "Index": 90
          },
          {
            "Name": "IsmpParachain",
            "TypeFields": [
              {
                "TypeName": "ismp_parachain::Event<Runtime>",
                "TypeId": 563
              }
            ],
            "Index": 91
          },
          {
            "Name": "Hyperbridge",
            "TypeFields": [
              {
                "TypeName": "pallet_hyperbridge::Event<Runtime>",
                "TypeId": 564
              }
            ],
            "Index": 92
          },
          {
            "Name": "TokenGateway",
            "TypeFields": [
              {
                "TypeName": "pallet_token_gateway::Event<Runtime>",
                "TypeId": 570
              }
            ],
            "Index": 94
          },
          {
            "Name": "FlexibleFee",
            "TypeFields": [
              {
                "TypeName": "bifrost_flexible_fee::Event<Runtime>",
                "TypeId": 572
              }
            ],
            "Index": 100
          },
          {
            "Name": "Salp",
            "TypeFields": [
              {
                "TypeName": "bifrost_salp::Event<Runtime>",
                "TypeId": 574
              }
            ],
            "Index": 105
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "bifrost_asset_registry::Event<Runtime>",
                "TypeId": 575
              }
            ],
            "Index": 114
          },
          {
            "Name": "VtokenMinting",
            "TypeFields": [
              {
                "TypeName": "bifrost_vtoken_minting::Event<Runtime>",
                "TypeId": 577
              }
            ],
            "Index": 115
          },
          {
            "Name": "Slp",
            "TypeFields": [
              {
                "TypeName": "bifrost_slp::Event<Runtime>",
                "TypeId": 579
              }
            ],
            "Index": 116
          },
          {
            "Name": "XcmInterface",
            "TypeFields": [
              {
                "TypeName": "bifrost_xcm_interface::Event<Runtime>",
                "TypeId": 589
              }
            ],
            "Index": 117
          },
          {
            "Name": "TokenConversion",
            "TypeFields": [
              {
                "TypeName": "bifrost_vstoken_conversion::Event<Runtime>",
                "TypeId": 590
              }
            ],
            "Index": 118
          },
          {
            "Name": "Farming",
            "TypeFields": [
              {
                "TypeName": "bifrost_farming::Event<Runtime>",
                "TypeId": 591
              }
            ],
            "Index": 119
          },
          {
            "Name": "SystemStaking",
            "TypeFields": [
              {
                "TypeName": "bifrost_system_staking::Event<Runtime>",
                "TypeId": 592
              }
            ],
            "Index": 120
          },
          {
            "Name": "FeeShare",
            "TypeFields": [
              {
                "TypeName": "bifrost_fee_share::Event<Runtime>",
                "TypeId": 593
              }
            ],
            "Index": 122
          },
          {
            "Name": "CrossInOut",
            "TypeFields": [
              {
                "TypeName": "bifrost_cross_in_out::Event<Runtime>",
                "TypeId": 596
              }
            ],
            "Index": 123
          },
          {
            "Name": "BbBNC",
            "TypeFields": [
              {
                "TypeName": "bb_bnc::Event<Runtime>",
                "TypeId": 597
              }
            ],
            "Index": 124
          },
          {
            "Name": "Slpx",
            "TypeFields": [
              {
                "TypeName": "bifrost_slpx::Event<Runtime>",
                "TypeId": 601
              }
            ],
            "Index": 125
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>",
                "TypeId": 604
              }
            ],
            "Index": 126
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance2>",
                "TypeId": 607
              }
            ],
            "Index": 127
          },
          {
            "Name": "StableAsset",
            "TypeFields": [
              {
                "TypeName": "bifrost_stable_asset::Event<Runtime>",
                "TypeId": 608
              }
            ],
            "Index": 128
          },
          {
            "Name": "VtokenVoting",
            "TypeFields": [
              {
                "TypeName": "bifrost_vtoken_voting::Event<Runtime>",
                "TypeId": 609
              }
            ],
            "Index": 130
          },
          {
            "Name": "LendMarket",
            "TypeFields": [
              {
                "TypeName": "lend_market::Event<Runtime>",
                "TypeId": 610
              }
            ],
            "Index": 131
          },
          {
            "Name": "Prices",
            "TypeFields": [
              {
                "TypeName": "pallet_prices::Event<Runtime>",
                "TypeId": 611
              }
            ],
            "Index": 132
          },
          {
            "Name": "Oracle",
            "TypeFields": [
              {
                "TypeName": "orml_oracle::Event<Runtime, orml_oracle::Instance1>",
                "TypeId": 612
              }
            ],
            "Index": 133
          },
          {
            "Name": "OracleMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance3>",
                "TypeId": 614
              }
            ],
            "Index": 134
          },
          {
            "Name": "LeverageStaking",
            "TypeFields": [
              {
                "TypeName": "leverage_staking::Event<Runtime>",
                "TypeId": 615
              }
            ],
            "Index": 135
          },
          {
            "Name": "ChannelCommission",
            "TypeFields": [
              {
                "TypeName": "bifrost_channel_commission::Event<Runtime>",
                "TypeId": 616
              }
            ],
            "Index": 136
          },
          {
            "Name": "CloudsConvert",
            "TypeFields": [
              {
                "TypeName": "bifrost_clouds_convert::Event<Runtime>",
                "TypeId": 617
              }
            ],
            "Index": 137
          },
          {
            "Name": "BuyBack",
            "TypeFields": [
              {
                "TypeName": "bifrost_buy_back::Event<Runtime>",
                "TypeId": 618
              }
            ],
            "Index": 138
          },
          {
            "Name": "SlpV2",
            "TypeFields": [
              {
                "TypeName": "bifrost_slp_v2::Event<Runtime>",
                "TypeId": 620
              }
            ],
            "Index": 139
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "22": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 26
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An upgrade was authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "23": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 24
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 25
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "24": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 27
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 28
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 29
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 30
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 18
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "28": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "Variants": [
          {
            "Name": "IndexAssigned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A account index was assigned."
            ]
          },
          {
            "Name": "IndexFreed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A account index has been freed up (unassigned)."
            ]
          },
          {
            "Name": "IndexFrozen",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A account index has been frozen to its current account ID."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "32": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 13
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 33
              }
            ],
            "Index": 5,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "33": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "34": {
        "Variants": [
          {
            "Name": "CallPaused",
            "TypeFields": [
              {
                "Name": "full_name",
                "TypeName": "RuntimeCallNameOf<T>",
                "TypeId": 35
              }
            ],
            "Index": 0,
            "Docs": [
              "This pallet, or a specific call is now paused."
            ]
          },
          {
            "Name": "CallUnpaused",
            "TypeFields": [
              {
                "Name": "full_name",
                "TypeName": "RuntimeCallNameOf<T>",
                "TypeId": 35
              }
            ],
            "Index": 1,
            "Docs": [
              "This pallet, or a specific call is now unpaused."
            ]
          }
        ],
        "Path": [
          "pallet_tx_pause",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "35": {
        "TypeIds": [
          36,
          36
        ],
        "TypeDef": "Tuple"
      },
      "36": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "37": {
        "Variants": [
          {
            "Name": "UpgradeStarted",
            "TypeFields": [
              {
                "Name": "migrations",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The number of migrations that this upgrade contains.",
                  "",
                  "This can be used to design a progress indicator in combination with counting the",
                  "`MigrationCompleted` and `MigrationSkipped` events."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A Runtime upgrade started.",
              "",
              "Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`."
            ]
          },
          {
            "Name": "UpgradeCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The current runtime upgrade completed.",
              "",
              "This implies that all of its migrations completed successfully as well."
            ]
          },
          {
            "Name": "UpgradeFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Runtime upgrade failed.",
              "",
              "This is very bad and will require governance intervention."
            ]
          },
          {
            "Name": "MigrationSkipped",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the skipped migration within the [`Config::Migrations`] list."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A migration was skipped since it was already executed in the past."
            ]
          },
          {
            "Name": "MigrationAdvanced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A migration progressed."
            ]
          },
          {
            "Name": "MigrationCompleted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A Migration completed."
            ]
          },
          {
            "Name": "MigrationFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A Migration failed.",
              "",
              "This implies that the whole upgrade failed and governance intervention is required."
            ]
          },
          {
            "Name": "HistoricCleared",
            "TypeFields": [
              {
                "Name": "next_cursor",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 38,
                "Docs": [
                  "Should be passed to `clear_historic` in a successive call."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "The set of historical migrations has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Variant"
      },
      "39": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 40
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          },
          {
            "Name": "TotalIssuanceForced",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "new",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The `TotalIssuance` was forcefully changed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "40": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "41": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "42": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "43": {
        "Variants": [
          {
            "Name": "NewRound",
            "TypeFields": [
              {
                "Name": "starting_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "selected_collators_number",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "total_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Started new round."
            ]
          },
          {
            "Name": "JoinedCollatorCandidates",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Account joined the set of collator candidates."
            ]
          },
          {
            "Name": "CollatorChosen",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "collator_account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "total_exposed_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Candidate selected for collators. Total Exposed Amount includes all delegations."
            ]
          },
          {
            "Name": "CandidateBondLessRequested",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Candidate requested to decrease a self bond."
            ]
          },
          {
            "Name": "CandidateBondedMore",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Candidate has increased a self bond."
            ]
          },
          {
            "Name": "CandidateBondedLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Candidate has decreased a self bond."
            ]
          },
          {
            "Name": "CandidateWentOffline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Candidate temporarily leave the set of collator candidates without unbonding."
            ]
          },
          {
            "Name": "CandidateBackOnline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Candidate rejoins the set of collator candidates."
            ]
          },
          {
            "Name": "CandidateScheduledExit",
            "TypeFields": [
              {
                "Name": "exit_allowed_round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Candidate has requested to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateExit",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancelled request to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateBondLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Cancelled request to decrease candidate's bond."
            ]
          },
          {
            "Name": "CandidateLeft",
            "TypeFields": [
              {
                "Name": "ex_candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "unlocked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Candidate has left the set of candidates."
            ]
          },
          {
            "Name": "DelegationDecreaseScheduled",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "Delegator requested to decrease a bond for the collator candidate."
            ]
          },
          {
            "Name": "DelegationIncreased",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 13
          },
          {
            "Name": "DelegationDecreased",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 14
          },
          {
            "Name": "DelegatorExitScheduled",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Delegator requested to leave the set of delegators."
            ]
          },
          {
            "Name": "DelegationRevocationScheduled",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Delegator requested to revoke delegation."
            ]
          },
          {
            "Name": "DelegatorLeft",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Delegator has left the set of delegators."
            ]
          },
          {
            "Name": "DelegationRevoked",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Delegation revoked."
            ]
          },
          {
            "Name": "DelegationKicked",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Delegation kicked."
            ]
          },
          {
            "Name": "DelegatorExitCancelled",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 20,
            "Docs": [
              "Cancelled a pending request to exit the set of delegators."
            ]
          },
          {
            "Name": "CancelledDelegationRequest",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "cancelled_request",
                "TypeName": "CancelledScheduledRequest<BalanceOf<T>>",
                "TypeId": 44
              },
              {
                "Name": "collator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 21,
            "Docs": [
              "Cancelled request to change an existing delegation."
            ]
          },
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "locked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "delegator_position",
                "TypeName": "DelegatorAdded<BalanceOf<T>>",
                "TypeId": 46
              }
            ],
            "Index": 22,
            "Docs": [
              "New delegation (increase of the existing one)."
            ]
          },
          {
            "Name": "DelegatorLeftCandidate",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "total_candidate_staked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Delegation from candidate state has been remove."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "rewards",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Paid the account (delegator or collator) the balance as liquid rewards."
            ]
          },
          {
            "Name": "ReservedForParachainBond",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Transferred to account which holds funds reserved for parachain bond."
            ]
          },
          {
            "Name": "ParachainBondAccountSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "new",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 26,
            "Docs": [
              "Account (re)set for parachain bond treasury."
            ]
          },
          {
            "Name": "ParachainBondReservePercentSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Percent",
                "TypeId": 47
              },
              {
                "Name": "new",
                "TypeName": "Percent",
                "TypeId": 47
              }
            ],
            "Index": 27,
            "Docs": [
              "Percent of inflation reserved for parachain bond (re)set."
            ]
          },
          {
            "Name": "InflationSet",
            "TypeFields": [
              {
                "Name": "annual_min",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "annual_ideal",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "annual_max",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "round_min",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "round_ideal",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "round_max",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 28,
            "Docs": [
              "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"
            ]
          },
          {
            "Name": "StakeExpectationsSet",
            "TypeFields": [
              {
                "Name": "expect_min",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expect_ideal",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expect_max",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 29,
            "Docs": [
              "Staking expectations set."
            ]
          },
          {
            "Name": "TotalSelectedSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 30,
            "Docs": [
              "Set total selected candidates to this value."
            ]
          },
          {
            "Name": "CollatorCommissionSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 31,
            "Docs": [
              "Set collator commission to this value."
            ]
          },
          {
            "Name": "BlocksPerRoundSet",
            "TypeFields": [
              {
                "Name": "current_round",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "first_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "new_per_round_inflation_min",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "new_per_round_inflation_ideal",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "new_per_round_inflation_max",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 32,
            "Docs": [
              "Set blocks per round"
            ]
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "44": {
        "TypeFields": [
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 4
          },
          {
            "Name": "action",
            "TypeName": "DelegationAction<Balance>",
            "TypeId": 45
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "delegation_requests",
          "CancelledScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "45": {
        "Variants": [
          {
            "Name": "Revoke",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "delegation_requests",
          "DelegationAction"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "46": {
        "Variants": [
          {
            "Name": "AddedToTop",
            "TypeFields": [
              {
                "Name": "new_total",
                "TypeName": "B",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "AddedToBottom",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "DelegatorAdded"
        ],
        "TypeParams": [
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "47": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "48": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "49": {
        "Variants": [
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An account has delegated their vote to another account. \\[who, target\\]"
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 50
              }
            ],
            "Index": 2,
            "Docs": [
              "An account that has voted"
            ]
          },
          {
            "Name": "VoteRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 50
              }
            ],
            "Index": 3,
            "Docs": [
              "A vote that been removed"
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "50": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 51
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "SplitAbstain",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "abstain",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "51": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "52": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 519,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "53": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "54": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 518
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 55
          },
          {
            "Name": "H",
            "TypeId": 517
          }
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 56
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 60
              }
            ],
            "Index": 1
          },
          {
            "Name": "Indices",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 2
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 65
              }
            ],
            "Index": 5
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 79
              }
            ],
            "Index": 6
          },
          {
            "Name": "TxPause",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TxPause, Runtime>",
                "TypeId": 80
              }
            ],
            "Index": 7
          },
          {
            "Name": "MultiBlockMigrations",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiBlockMigrations, Runtime>",
                "TypeId": 81
              }
            ],
            "Index": 8
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 90
              }
            ],
            "Index": 10
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 94
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                "TypeId": 97
              }
            ],
            "Index": 25
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                "TypeId": 100
              }
            ],
            "Index": 36
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                "TypeId": 103
              }
            ],
            "Index": 37
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                "TypeId": 128
              }
            ],
            "Index": 39
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 129
              }
            ],
            "Index": 40
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 130
              }
            ],
            "Index": 41
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 225
              }
            ],
            "Index": 42
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                "TypeId": 226
              }
            ],
            "Index": 44
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 228
              }
            ],
            "Index": 50
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 230
              }
            ],
            "Index": 51
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 233
              }
            ],
            "Index": 52
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 236
              }
            ],
            "Index": 53
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 239
              }
            ],
            "Index": 54
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 282
              }
            ],
            "Index": 60
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 284
              }
            ],
            "Index": 61
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 286
              }
            ],
            "Index": 64
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                "TypeId": 288
              }
            ],
            "Index": 65
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                "TypeId": 300
              }
            ],
            "Index": 66
          },
          {
            "Name": "DynamicFee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicFee, Runtime>",
                "TypeId": 304
              }
            ],
            "Index": 68
          },
          {
            "Name": "EVMAccounts",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVMAccounts, Runtime>",
                "TypeId": 305
              }
            ],
            "Index": 69
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                "TypeId": 306
              }
            ],
            "Index": 70
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>",
                "TypeId": 312
              }
            ],
            "Index": 71
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>",
                "TypeId": 313
              }
            ],
            "Index": 74
          },
          {
            "Name": "ZenlinkProtocol",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ZenlinkProtocol, Runtime>",
                "TypeId": 314
              }
            ],
            "Index": 80
          },
          {
            "Name": "Ismp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ismp, Runtime>",
                "TypeId": 320
              }
            ],
            "Index": 90
          },
          {
            "Name": "IsmpParachain",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<IsmpParachain, Runtime>",
                "TypeId": 357
              }
            ],
            "Index": 91
          },
          {
            "Name": "TokenGateway",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TokenGateway, Runtime>",
                "TypeId": 361
              }
            ],
            "Index": 94
          },
          {
            "Name": "FlexibleFee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FlexibleFee, Runtime>",
                "TypeId": 380
              }
            ],
            "Index": 100
          },
          {
            "Name": "Salp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Salp, Runtime>",
                "TypeId": 386
              }
            ],
            "Index": 105
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>",
                "TypeId": 389
              }
            ],
            "Index": 114
          },
          {
            "Name": "VtokenMinting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VtokenMinting, Runtime>",
                "TypeId": 392
              }
            ],
            "Index": 115
          },
          {
            "Name": "Slp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slp, Runtime>",
                "TypeId": 396
              }
            ],
            "Index": 116
          },
          {
            "Name": "XcmInterface",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmInterface, Runtime>",
                "TypeId": 434
              }
            ],
            "Index": 117
          },
          {
            "Name": "TokenConversion",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TokenConversion, Runtime>",
                "TypeId": 438
              }
            ],
            "Index": 118
          },
          {
            "Name": "Farming",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Farming, Runtime>",
                "TypeId": 442
              }
            ],
            "Index": 119
          },
          {
            "Name": "SystemStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SystemStaking, Runtime>",
                "TypeId": 448
              }
            ],
            "Index": 120
          },
          {
            "Name": "FeeShare",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FeeShare, Runtime>",
                "TypeId": 449
              }
            ],
            "Index": 122
          },
          {
            "Name": "CrossInOut",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CrossInOut, Runtime>",
                "TypeId": 456
              }
            ],
            "Index": 123
          },
          {
            "Name": "BbBNC",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BbBNC, Runtime>",
                "TypeId": 457
              }
            ],
            "Index": 124
          },
          {
            "Name": "Slpx",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slpx, Runtime>",
                "TypeId": 459
              }
            ],
            "Index": 125
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>",
                "TypeId": 470
              }
            ],
            "Index": 126
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>",
                "TypeId": 471
              }
            ],
            "Index": 127
          },
          {
            "Name": "StablePool",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StablePool, Runtime>",
                "TypeId": 472
              }
            ],
            "Index": 129
          },
          {
            "Name": "VtokenVoting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VtokenVoting, Runtime>",
                "TypeId": 477
              }
            ],
            "Index": 130
          },
          {
            "Name": "LendMarket",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LendMarket, Runtime>",
                "TypeId": 483
              }
            ],
            "Index": 131
          },
          {
            "Name": "Prices",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Prices, Runtime>",
                "TypeId": 491
              }
            ],
            "Index": 132
          },
          {
            "Name": "Oracle",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Oracle, Runtime>",
                "TypeId": 492
              }
            ],
            "Index": 133
          },
          {
            "Name": "OracleMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OracleMembership, Runtime>",
                "TypeId": 496
              }
            ],
            "Index": 134
          },
          {
            "Name": "LeverageStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LeverageStaking, Runtime>",
                "TypeId": 497
              }
            ],
            "Index": 135
          },
          {
            "Name": "ChannelCommission",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChannelCommission, Runtime>",
                "TypeId": 498
              }
            ],
            "Index": 136
          },
          {
            "Name": "CloudsConvert",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CloudsConvert, Runtime>",
                "TypeId": 499
              }
            ],
            "Index": 137
          },
          {
            "Name": "BuyBack",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BuyBack, Runtime>",
                "TypeId": 500
              }
            ],
            "Index": 138
          },
          {
            "Name": "SlpV2",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SlpV2, Runtime>",
                "TypeId": 501
              }
            ],
            "Index": 139
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "56": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "Can be executed by every `origin`."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "Note that runtime upgrades will not run if this is called with a not-increasing spec",
              "version!"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 57
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 59
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 14
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "authorize_upgrade_without_checks",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
              "example that the spec name remains the same and that the version number increases. Not",
              "recommended for normal use. Use `authorize_upgrade` instead.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "apply_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 11,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
              "the new `code` in the same block or attempt to schedule the upgrade.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "57": {
        "TypeId": 58,
        "TypeDef": "Sequence"
      },
      "58": {
        "TypeIds": [
          14,
          14
        ],
        "TypeDef": "Tuple"
      },
      "59": {
        "TypeId": 14,
        "TypeDef": "Sequence"
      },
      "60": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "[`Config::MinimumPeriod`].",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
              "that changing the complexity of this call could result exhausting the resources in a",
              "block to execute any other calls.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "61": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Assign an previously unassigned index.",
              "",
              "Payment: `Deposit` is reserved from the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be claimed. This must not be in use.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Assign an index already owned by the sender to another account. The balance reservation",
              "is effectively transferred to the new account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be re-assigned. This must be owned by the sender.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "free",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Free up an index owned by the sender.",
              "",
              "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
              "",
              "- `index`: the index to be freed. This must be owned by the sender.",
              "",
              "Emits `IndexFreed` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              },
              {
                "Name": "freeze",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Force an index to an account. This doesn't require a deposit. If the index is already",
              "held, then any deposit is reimbursed to its current owner.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `index`: the index to be (re-)assigned.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Freeze an index so it will always point to the sender account. This consumes the",
              "deposit.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must have a",
              "non-frozen account `index`.",
              "",
              "- `index`: the index to be frozen in place.",
              "",
              "Emits `IndexFrozen` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 64
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "64": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "65": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 66
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "66": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 67
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 69
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 71
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 73
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "67": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 68
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 13
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "68": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "69": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 70
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "70": {
        "TypeFields": [
          {
            "TypeId": 59
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "TypeId": 72,
        "TypeDef": "Sequence"
      },
      "72": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "TypeFields": [
          {
            "TypeId": 77
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 74
          },
          {
            "Name": "V",
            "TypeId": 75
          }
        ],
        "TypeDef": "Composite"
      },
      "74": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "75": {
        "TypeId": 76,
        "TypeDef": "Sequence"
      },
      "76": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "alloc::vec::Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeId": 78,
        "TypeDef": "Sequence"
      },
      "78": {
        "TypeIds": [
          74,
          75
        ],
        "TypeDef": "Tuple"
      },
      "79": {
        "Variants": null,
        "Path": [
          "staging_parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "80": {
        "Variants": [
          {
            "Name": "pause",
            "TypeFields": [
              {
                "Name": "full_name",
                "TypeName": "RuntimeCallNameOf<T>",
                "TypeId": 35
              }
            ],
            "Index": 0,
            "Docs": [
              "Pause a call.",
              "",
              "Can only be called by [`Config::PauseOrigin`].",
              "Emits an [`Event::CallPaused`] event on success."
            ]
          },
          {
            "Name": "unpause",
            "TypeFields": [
              {
                "Name": "ident",
                "TypeName": "RuntimeCallNameOf<T>",
                "TypeId": 35
              }
            ],
            "Index": 1,
            "Docs": [
              "Un-pause a call.",
              "",
              "Can only be called by [`Config::UnpauseOrigin`].",
              "Emits an [`Event::CallUnpaused`] event on success."
            ]
          }
        ],
        "Path": [
          "pallet_tx_pause",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "81": {
        "Variants": [
          {
            "Name": "force_set_cursor",
            "TypeFields": [
              {
                "Name": "cursor",
                "TypeName": "Option<CursorOf<T>>",
                "TypeId": 82
              }
            ],
            "Index": 0,
            "Docs": [
              "Allows root to set a cursor to forcefully start, stop or forward the migration process.",
              "",
              "Should normally not be needed and is only in place as emergency measure. Note that",
              "restarting the migration process in this manner will not call the",
              "[`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event."
            ]
          },
          {
            "Name": "force_set_active_cursor",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "inner_cursor",
                "TypeName": "Option<RawCursorOf<T>>",
                "TypeId": 86
              },
              {
                "Name": "started_at",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 1,
            "Docs": [
              "Allows root to set an active cursor to forcefully start/forward the migration process.",
              "",
              "This is an edge-case version of [`Self::force_set_cursor`] that allows to set the",
              "`started_at` value to the next block number. Otherwise this would not be possible, since",
              "`force_set_cursor` takes an absolute block number. Setting `started_at` to `None`",
              "indicates that the current block number plus one should be used."
            ]
          },
          {
            "Name": "force_onboard_mbms",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Forces the onboarding of the migrations.",
              "",
              "This process happens automatically on a runtime upgrade. It is in place as an emergency",
              "measurement. The cursor needs to be `None` for this to succeed."
            ]
          },
          {
            "Name": "clear_historic",
            "TypeFields": [
              {
                "Name": "selector",
                "TypeName": "HistoricCleanupSelector<IdentifierOf<T>>",
                "TypeId": 88
              }
            ],
            "Index": 3,
            "Docs": [
              "Clears the `Historic` set.",
              "",
              "`map_cursor` must be set to the last value that was returned by the",
              "`HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a",
              "way that will result in a sensible weight."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "82": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 83
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 83
          }
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "TypeName": "ActiveCursor<Cursor, BlockNumber>",
                "TypeId": 85
              }
            ],
            "Index": 0
          },
          {
            "Name": "Stuck",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_migrations",
          "MigrationCursor"
        ],
        "TypeParams": [
          {
            "Name": "Cursor",
            "TypeId": 84
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "inner_cursor",
            "TypeName": "Option<Cursor>",
            "TypeId": 86
          },
          {
            "Name": "started_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_migrations",
          "ActiveCursor"
        ],
        "TypeParams": [
          {
            "Name": "Cursor",
            "TypeId": 84
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 84
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 84
          }
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "88": {
        "Variants": [
          {
            "Name": "Specific",
            "TypeFields": [
              {
                "TypeName": "Vec<Id>",
                "TypeId": 89
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wildcard",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "Option<u32>",
                "TypeId": 87
              },
              {
                "Name": "previous_cursor",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 38
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_migrations",
          "HistoricCleanupSelector"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 36
          }
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "TypeId": 36,
        "TypeDef": "Sequence"
      },
      "90": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              }
            ],
            "Index": 6,
            "Docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibility of churn)."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_adjust_total_issuance",
            "TypeFields": [
              {
                "Name": "direction",
                "TypeName": "AdjustmentDirection",
                "TypeId": 93
              },
              {
                "Name": "delta",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 9,
            "Docs": [
              "Adjust the total issuance in a saturating way.",
              "",
              "Can only be called by root and always needs a positive `delta`.",
              "",
              "# Example"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 91
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Burn the specified liquid free balance from the origin account.",
              "",
              "If the origin's account ends up below the existential deposit as a result",
              "of the burn and `keep_alive` is false, the account will be reaped.",
              "",
              "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
              "this `burn` operation will reduce total issuance by the amount _burned_."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "91": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "92": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "93": {
        "Variants": [
          {
            "Name": "Increase",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AdjustmentDirection"
        ],
        "TypeDef": "Variant"
      },
      "94": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 95
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "95": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 96
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "opaque",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "97": {
        "Variants": [
          {
            "Name": "set_staking_expectations",
            "TypeFields": [
              {
                "Name": "expectations",
                "TypeName": "Range<BalanceOf<T>>",
                "TypeId": 98
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the expectations for total staked. These expectations determine the issuance for",
              "the round according to logic in `fn compute_issuance`"
            ]
          },
          {
            "Name": "set_inflation",
            "TypeFields": [
              {
                "Name": "schedule",
                "TypeName": "Range<Perbill>",
                "TypeId": 99
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the annual inflation rate to derive per-round inflation"
            ]
          },
          {
            "Name": "set_parachain_bond_account",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the account that will hold funds set aside for parachain bond"
            ]
          },
          {
            "Name": "set_parachain_bond_reserve_percent",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Percent",
                "TypeId": 47
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the percent of inflation set aside for parachain bond"
            ]
          },
          {
            "Name": "set_total_selected",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the total number of collator candidates selected per round",
              "- changes are not applied until the start of the next round"
            ]
          },
          {
            "Name": "set_collator_commission",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the commission for all collators"
            ]
          },
          {
            "Name": "set_blocks_per_round",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set blocks per round",
              "- if called with `new` less than length of current round, will transition immediately",
              "in the next block",
              "- also updates per-round inflation config"
            ]
          },
          {
            "Name": "join_candidates",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Join the set of collator candidates"
            ]
          },
          {
            "Name": "schedule_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Request to leave the set of candidates. If successful, the account is immediately",
              "removed from the candidate pool to prevent selection as a collator."
            ]
          },
          {
            "Name": "execute_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate_delegation_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Execute leave candidates request"
            ]
          },
          {
            "Name": "cancel_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Cancel open request to leave candidates",
              "- only callable by collator account",
              "- result upon successful call is the candidate is active in the candidate pool"
            ]
          },
          {
            "Name": "go_offline",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Temporarily leave the set of collator candidates without unbonding"
            ]
          },
          {
            "Name": "go_online",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Rejoin the set of collator candidates if previously had called `go_offline`"
            ]
          },
          {
            "Name": "candidate_bond_more",
            "TypeFields": [
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Increase collator candidate self bond by `more`"
            ]
          },
          {
            "Name": "schedule_candidate_bond_less",
            "TypeFields": [
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Request by collator candidate to decrease self bond by `less`"
            ]
          },
          {
            "Name": "execute_candidate_bond_less",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 15,
            "Docs": [
              "Execute pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "cancel_candidate_bond_less",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Cancel pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_delegation_count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "delegation_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 17,
            "Docs": [
              "If caller is not a delegator and not a collator, then join the set of delegators",
              "If caller is a delegator, then makes delegation to change their delegation state"
            ]
          },
          {
            "Name": "schedule_leave_delegators",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "DEPRECATED use batch util with schedule_revoke_delegation for all delegations",
              "Request to leave the set of delegators. If successful, the caller is scheduled to be",
              "allowed to exit via a [DelegationAction::Revoke] towards all existing delegations.",
              "Success forbids future delegation requests until the request is invoked or cancelled."
            ]
          },
          {
            "Name": "execute_leave_delegators",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "delegation_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 19,
            "Docs": [
              "DEPRECATED use batch util with execute_delegation_request for all delegations",
              "Execute the right to exit the set of delegators and revoke all ongoing delegations."
            ]
          },
          {
            "Name": "cancel_leave_delegators",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "DEPRECATED use batch util with cancel_delegation_request for all delegations",
              "Cancel a pending request to exit the set of delegators. Success clears the pending exit",
              "request (thereby resetting the delay upon another `leave_delegators` call)."
            ]
          },
          {
            "Name": "schedule_revoke_delegation",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 21,
            "Docs": [
              "Request to revoke an existing delegation. If successful, the delegation is scheduled",
              "to be allowed to be revoked via the `execute_delegation_request` extrinsic."
            ]
          },
          {
            "Name": "delegator_bond_more",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 22,
            "Docs": [
              "Bond more for delegators wrt a specific collator candidate."
            ]
          },
          {
            "Name": "schedule_delegator_bond_less",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Request bond less for delegators wrt a specific collator candidate."
            ]
          },
          {
            "Name": "execute_delegation_request",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 24,
            "Docs": [
              "Execute pending request to change an existing delegation"
            ]
          },
          {
            "Name": "cancel_delegation_request",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 25,
            "Docs": [
              "Cancel request to change an existing delegation."
            ]
          },
          {
            "Name": "hotfix_remove_delegation_requests_exited_candidates",
            "TypeFields": [
              {
                "Name": "candidates",
                "TypeName": "Vec<AccountIdOf<T>>",
                "TypeId": 92
              }
            ],
            "Index": 26,
            "Docs": [
              "Hotfix to remove existing empty entries for candidates that have left."
            ]
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "98": {
        "TypeFields": [
          {
            "Name": "min",
            "TypeName": "T",
            "TypeId": 6
          },
          {
            "Name": "ideal",
            "TypeName": "T",
            "TypeId": 6
          },
          {
            "Name": "max",
            "TypeName": "T",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "inflation",
          "Range"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "TypeFields": [
          {
            "Name": "min",
            "TypeName": "T",
            "TypeId": 48
          },
          {
            "Name": "ideal",
            "TypeName": "T",
            "TypeId": 48
          },
          {
            "Name": "max",
            "TypeName": "T",
            "TypeId": 48
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "inflation",
          "Range"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 48
          }
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 50
              }
            ],
            "Index": 0,
            "Docs": [
              "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `poll_index`: The index of the poll to vote for.",
              "- `vote`: The vote configuration.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter has voted on."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 53
              },
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 101
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account for a",
              "particular class of polls.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed through",
              "    `remove_vote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
              "  to this function are required.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 53
              }
            ],
            "Index": 2,
            "Docs": [
              "Undelegate the voting power of the sending account for a particular class of polls.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued has passed.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "- `class`: The class of polls to remove the delegation from.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 53
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the lock caused by prior voting/delegating which has expired within a particular",
              "class.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `class`: The class of polls to unlock.",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Option<ClassOf<T, I>>",
                "TypeId": 102
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If:",
              "- the poll was cancelled, or",
              "- the poll is ongoing, or",
              "- the poll has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the poll has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for poll `index`.",
              "",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
              "  which have finished or are cancelled, this must be `Some`.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 53
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the poll was cancelled, because the voter lost the poll or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for poll",
              "  `index`.",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: The class of the poll.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "101": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 53
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 53
          }
        ],
        "TypeDef": "Variant"
      },
      "103": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 104
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<BlockNumberFor<T>>",
                "TypeId": 126
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53
              }
            ],
            "Index": 6,
            "Docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 127
              }
            ],
            "Index": 8,
            "Docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "104": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 105
              }
            ],
            "Index": 0
          },
          {
            "Name": "Origins",
            "TypeFields": [
              {
                "TypeName": "custom_origins::Origin",
                "TypeId": 106
              }
            ],
            "Index": 38
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 107
              }
            ],
            "Index": 41
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 123
              }
            ],
            "Index": 42
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Origin",
                "TypeId": 124
              }
            ],
            "Index": 65
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "105": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "106": {
        "Variants": [
          {
            "Name": "WhitelistedCaller",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FellowshipAdmin",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ReferendumCanceller",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ReferendumKiller",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LiquidStaking",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "SALPAdmin",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "FellowshipInitiates",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Fellows",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "FellowshipExperts",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FellowshipMasters",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "Fellowship1Dan",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Fellowship2Dan",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Fellowship3Dan",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Fellowship4Dan",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Fellowship5Dan",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Fellowship6Dan",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "Fellowship7Dan",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "Fellowship8Dan",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "Fellowship9Dan",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "TechAdmin",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "CoreAdmin",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "TreasurySpend",
            "TypeFields": null,
            "Index": 21
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "governance",
          "origins",
          "custom_origins",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "107": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "108": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 109
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "location",
          "Location"
        ],
        "TypeDef": "Composite"
      },
      "109": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 1]>",
                "TypeId": 110
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 2]>",
                "TypeId": 116
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 3]>",
                "TypeId": 117
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 4]>",
                "TypeId": 118
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 5]>",
                "TypeId": 119
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 6]>",
                "TypeId": 120
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 7]>",
                "TypeId": 121
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 8]>",
                "TypeId": 122
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "110": {
        "Length": 1,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "111": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 112
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 112
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 112
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 64
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 114
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 115
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 113
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 113
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 113
          }
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "114": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "116": {
        "Length": 2,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "117": {
        "Length": 3,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "118": {
        "Length": 4,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "119": {
        "Length": 5,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "120": {
        "Length": 6,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "121": {
        "Length": 7,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "122": {
        "Length": 8,
        "TypeId": 111,
        "TypeDef": "Array"
      },
      "123": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 74
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "124": {
        "Variants": [
          {
            "Name": "EthereumTransaction",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_ethereum",
          "RawOrigin"
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 64
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "126": {
        "Variants": [
          {
            "Name": "At",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "After",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "schedule",
          "DispatchTime"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "whitelist_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "remove_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1
          },
          {
            "Name": "dispatch_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "call_encoded_len",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "call_weight_witness",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "dispatch_whitelisted_call_with_preimage",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "129": {
        "Variants": [
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages which must be in the queue for the other side to be",
              "told to suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages which must be in the queue after which we drop any",
              "further messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages which the queue must be reduced to before it signals",
              "that message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "130": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 144
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "**This function is deprecated: Use `limited_teleport_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                "TypeId": 212
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than",
              "the maximum amount of weight that the message could take to be executed, then no",
              "execution attempt will be made."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<Location>",
                "TypeId": 108
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 87
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "force_suspension",
            "TypeFields": [
              {
                "Name": "suspended",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Set or unset the global suspension state of the XCM executor.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `suspended`: `true` to suspend, `false` to resume."
            ]
          },
          {
            "Name": "transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 11,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve, or through teleports.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
              "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
              "operation will fail and the sent assets may be at risk.",
              "",
              "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
              "to `dest`, no limitations imposed on `fees`.",
              " - for local reserve: transfer assets to sovereign account of destination chain and",
              "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
              "   `beneficiary`.",
              " - for destination reserve: burn local assets and forward a notification to `dest` chain",
              "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
              "   to `beneficiary`.",
              " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
              "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
              "   and deposit reserve-based assets to `beneficiary`.",
              " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
              "   assets and deposit them to `beneficiary`.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
              "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
              "  from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "claim_assets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              }
            ],
            "Index": 12,
            "Docs": [
              "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
              "",
              "- `origin`: Anyone can call this extrinsic.",
              "- `assets`: The exact assets that were trapped. Use the version to specify what version",
              "was the latest when they were trapped.",
              "- `beneficiary`: The location/account where the claimed assets will be deposited."
            ]
          },
          {
            "Name": "transfer_assets_using_type_and_then",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "assets_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 223
              },
              {
                "Name": "remote_fees_id",
                "TypeName": "Box<VersionedAssetId>",
                "TypeId": 224
              },
              {
                "Name": "fees_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 223
              },
              {
                "Name": "custom_xcm_on_dest",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 144
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 13,
            "Docs": [
              "Transfer assets from the local chain to the destination chain using explicit transfer",
              "types for assets and fees.",
              "",
              "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
              "provide the `assets_transfer_type` to be used for `assets`:",
              " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
              "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
              "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
              "   the remote `reserve` is Asset Hub.",
              " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
              "   mint/teleport assets and deposit them to `beneficiary`.",
              "",
              "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
              "buy execution using transferred `assets` identified by `remote_fees_id`.",
              "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
              "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
              "specified through `fees_transfer_type`.",
              "",
              "The caller needs to specify what should happen to the transferred assets once they reach",
              "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
              "contains the instructions to execute on `dest` as a final step.",
              "  This is usually as simple as:",
              "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
              "  but could be something more exotic like sending the `assets` even further.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
              "  parachain across a bridge to another ecosystem destination.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
              "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
              "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
              "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
              "  transfer, which also determines what happens to the assets on the destination chain.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "131": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Location",
                "TypeId": 108
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedLocation"
        ],
        "TypeDef": "Variant"
      },
      "132": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 133
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "133": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              },
              {
                "TypeName": "Junction",
                "TypeId": 134
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "134": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 135
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 135
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 135
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 64
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 136
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 137
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 138
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 136
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "136": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 136
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "138": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 140
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "141": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 64
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 114
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 115
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 143
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "142": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 143
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 143
          }
        ],
        "TypeDef": "Variant"
      },
      "143": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 145
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 166
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 146
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "TypeId": 147,
        "TypeDef": "Sequence"
      },
      "147": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 156
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 160
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 161
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 133
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 150
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 165
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 145
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 145
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "148": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 149
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "TypeId": 150,
        "TypeDef": "Sequence"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 151
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 152
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "152": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 153
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "153": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 154
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 155
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "154": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "155": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "156": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 157
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "157": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 158
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 158
          }
        ],
        "TypeDef": "Variant"
      },
      "158": {
        "TypeIds": [
          4,
          159
        ],
        "TypeDef": "Tuple"
      },
      "159": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 12
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "160": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 163
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "163": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 151
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 164
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "164": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "166": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 167
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "167": {
        "TypeId": 168,
        "TypeDef": "Sequence"
      },
      "168": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 175
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 186
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 161
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 166
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 166
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 143
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "169": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 170
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "170": {
        "TypeId": 171,
        "TypeDef": "Sequence"
      },
      "171": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 172
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 173
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "172": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "173": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 174
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "174": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 154
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 155
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "175": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 179
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "176": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 177
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 177
          }
        ],
        "TypeDef": "Variant"
      },
      "177": {
        "TypeIds": [
          4,
          178
        ],
        "TypeDef": "Tuple"
      },
      "178": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "179": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 182
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 180
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "180": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 181
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 181
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 63
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "181": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "TypeId": 180,
        "TypeDef": "Sequence"
      },
      "183": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 184
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 139
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 139
          }
        ],
        "TypeDef": "Variant"
      },
      "186": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "187": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 189
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "189": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 172
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 190
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 172
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 190
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "190": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "191": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "192": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 193
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "TypeId": 194,
        "TypeDef": "Sequence"
      },
      "194": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 186
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 161
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 109
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 192
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 192
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 113
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "TypeFields": [
          {
            "TypeName": "Vec<Asset>",
            "TypeId": 196
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Assets"
        ],
        "TypeDef": "Composite"
      },
      "196": {
        "TypeId": 197,
        "TypeDef": "Sequence"
      },
      "197": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 198
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 199
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Asset"
        ],
        "TypeDef": "Composite"
      },
      "198": {
        "TypeFields": [
          {
            "TypeName": "Location",
            "TypeId": 108
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetId"
        ],
        "TypeDef": "Composite"
      },
      "199": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 200
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "200": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 91
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 154
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 155
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "201": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 202
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "202": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 205
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 203
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "203": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 204
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 204
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 63
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "204": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeId": 203,
        "TypeDef": "Sequence"
      },
      "206": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 108
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 108
          }
        ],
        "TypeDef": "Variant"
      },
      "207": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "Location",
            "TypeId": 108
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "208": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildAsset",
                "TypeId": 209
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "209": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 198
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 210
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 198
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 210
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildAsset"
        ],
        "TypeDef": "Variant"
      },
      "210": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "211": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Assets",
                "TypeId": 195
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssets"
        ],
        "TypeDef": "Variant"
      },
      "212": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 213
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 217
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 220
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "213": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 214
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "214": {
        "TypeId": 215,
        "TypeDef": "Sequence"
      },
      "215": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 156
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 160
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 216
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 133
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 148
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 145
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 162
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 150
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 165
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 213
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 213
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 148
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 218
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeId": 219,
        "TypeDef": "Sequence"
      },
      "219": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 175
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 186
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 216
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 188
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 217
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 217
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 169
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 169
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 187
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 143
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 166
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 171
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "220": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 221
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "221": {
        "TypeId": 222,
        "TypeDef": "Sequence"
      },
      "222": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 186
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 216
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 109
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 208
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 220
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 220
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 176
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 183
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 207
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 113
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "223": {
        "Variants": [
          {
            "Name": "Teleport",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LocalReserve",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DestinationReserve",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "RemoteReserve",
            "TypeFields": [
              {
                "TypeName": "VersionedLocation",
                "TypeId": 131
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm_executor",
          "traits",
          "asset_transfer",
          "TransferType"
        ],
        "TypeDef": "Variant"
      },
      "224": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 172
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::AssetId",
                "TypeId": 198
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "225": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "226": {
        "Variants": [
          {
            "Name": "reap_page",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Remove a page which has no more messages remaining to be processed or is stale."
            ]
          },
          {
            "Name": "execute_overweight",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227
              },
              {
                "Name": "page",
                "TypeName": "PageIndex",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "T::Size",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute an overweight message.",
              "",
              "Temporary processing errors will be propagated whereas permanent errors are treated",
              "as success condition.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `message_origin`: The origin from which the message to be executed arrived.",
              "- `page`: The page in the queue in which the message to be executed is sitting.",
              "- `index`: The index into the queue of the message to be executed.",
              "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
              "  of the message.",
              "",
              "Benchmark complexity considerations: O(index + weight_limit)."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "227": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parent",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Sibling",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 74
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "cumulus_primitives_core",
          "AggregateMessageOrigin"
        ],
        "TypeDef": "Variant"
      },
      "228": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 229
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 229
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 104
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 229
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "229": {
        "TypeId": 55,
        "TypeDef": "Sequence"
      },
      "230": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 231
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 231
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 231
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 231
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          },
          {
            "Name": "set_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
              "be retried after `period` blocks, for a total amount of `retries` retries or until it",
              "succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "set_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
              "will be retried after `period` blocks, for a total amount of `retries` retries or until",
              "it succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "cancel_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              }
            ],
            "Index": 8,
            "Docs": [
              "Removes the retry configuration of a task."
            ]
          },
          {
            "Name": "cancel_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancel the retry configuration of a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "231": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 232
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 232
          }
        ],
        "TypeDef": "Variant"
      },
      "232": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "233": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 234
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 234
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "234": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 235
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 235
          }
        ],
        "TypeDef": "Variant"
      },
      "235": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "IdentityJudgement",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "236": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 237
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 55
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 237
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 238
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "237": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 238
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 238
          }
        ],
        "TypeDef": "Variant"
      },
      "238": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "239": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<T::IdentityInformation>",
                "TypeId": 240
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 274
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Registrars::<T>::get().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "fields",
                "TypeName": "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 276
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is",
              "  provided.",
              "",
              "Note: Judgements do not apply to a username.",
              "",
              "Emits `JudgementGiven` if successful."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 243
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 243
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          },
          {
            "Name": "add_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "suffix",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "allocation",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Add an `AccountId` with permission to grant usernames with a given `suffix` appended.",
              "",
              "The authority can grant up to `allocation` usernames. To top up their allocation, they",
              "should just issue (or request via governance) a new `add_username_authority` call."
            ]
          },
          {
            "Name": "remove_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 16,
            "Docs": [
              "Remove `authority` from the username authorities."
            ]
          },
          {
            "Name": "set_username_for",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "username",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "signature",
                "TypeName": "Option<T::OffchainSignature>",
                "TypeId": 277
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the username for `who`. Must be called by a username authority.",
              "",
              "The authority must have an `allocation`. Users can either pre-sign their usernames or",
              "accept them later.",
              "",
              "Usernames must:",
              "  - Only contain lowercase ASCII characters or digits.",
              "  - When combined with the suffix of the issuing authority be _less than_ the",
              "    `MaxUsernameLength`."
            ]
          },
          {
            "Name": "accept_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 18,
            "Docs": [
              "Accept a given username that an `authority` granted. The call must include the full",
              "username, as in `username.suffix`."
            ]
          },
          {
            "Name": "remove_expired_approval",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 19,
            "Docs": [
              "Remove an expired username approval. The username was approved by an authority but never",
              "accepted by the user and must now be beyond its expiration. The call must include the",
              "full username, as in `username.suffix`."
            ]
          },
          {
            "Name": "set_primary_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 20,
            "Docs": [
              "Set a given username as the primary. The username should include the suffix."
            ]
          },
          {
            "Name": "remove_dangling_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 21,
            "Docs": [
              "Remove a username that corresponds to an account with no identity. Exists when a user",
              "gets a username but then calls `clear_identity`."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "240": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 241
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 273
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 243
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 243
          }
        ],
        "Path": [
          "pallet_identity",
          "legacy",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "241": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 272
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 242
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "242": {
        "TypeIds": [
          243,
          243
        ],
        "TypeDef": "Tuple"
      },
      "243": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 244
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 245
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 246
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 247
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 18
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 248
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 249
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 250
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 154
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 251
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 252
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 253
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 254
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 255
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 256
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 257
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 155
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 258
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 259
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 260
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 64
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 261
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 264
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 265
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 266
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 267
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 268
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 269
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 270
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 271
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "244": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "245": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "246": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "247": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "248": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "249": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "250": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "251": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "252": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "253": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "254": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "255": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "256": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "257": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "258": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "259": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "260": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "261": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "262": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "263": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "264": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "265": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "266": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "267": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "268": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "269": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "270": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "271": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "272": {
        "TypeId": 242,
        "TypeDef": "Sequence"
      },
      "273": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 64
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 64
          }
        ],
        "TypeDef": "Variant"
      },
      "274": {
        "TypeId": 275,
        "TypeDef": "Sequence"
      },
      "275": {
        "TypeIds": [
          0,
          243
        ],
        "TypeDef": "Tuple"
      },
      "276": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "277": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 278
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 278
          }
        ],
        "TypeDef": "Variant"
      },
      "278": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 279
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 279
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 280
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "279": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "280": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "281": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 1,
            "Docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 283
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 283
              }
            ],
            "Index": 3,
            "Docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "init_vesting_start_at",
            "TypeFields": [
              {
                "Name": "vesting_start_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 5
          },
          {
            "Name": "set_vesting_per_block",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "per_block",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6
          },
          {
            "Name": "force_set_cliff",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "cliff_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ]
          }
        ],
        "Path": [
          "bifrost_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "283": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "284": {
        "Variants": [
          {
            "Name": "spend_local",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 91
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
              "",
              "### Details",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary.",
              "",
              "### Parameters",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "## Events",
              "",
              "Emits [`Event::SpendApproved`] if successful."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "The original deposit will no longer be returned.",
              "",
              "### Parameters",
              "- `proposal_id`: The index of a proposal",
              "",
              "### Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "### Errors",
              "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
              "  approval queue, i.e., the proposal has not been approved. This could also mean the",
              "  proposal does not exist altogether, thus there is no way it would have been approved",
              "  in the first place."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "asset_kind",
                "TypeName": "Box<T::AssetKind>",
                "TypeId": 285
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 91
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<BeneficiaryLookupOf<T, I>>",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 5,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
              "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
              "for assertion using the [`Config::BalanceConverter`].",
              "",
              "## Details",
              "",
              "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
              "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
              "the [`Config::PayoutPeriod`].",
              "",
              "### Parameters",
              "- `asset_kind`: An indicator of the specific asset class to be spent.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The beneficiary of the spend.",
              "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
              "  the past if the resulting spend has not yet expired according to the",
              "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
              "  approval.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendApproved`] if successful."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Claim a spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed",
              "",
              "## Details",
              "",
              "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
              "[`Config::PayoutPeriod`] from the `valid_from` block.",
              "In case of a payout failure, the spend status must be updated with the `check_status`",
              "dispatchable before retrying with the current function.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::Paid`] if successful."
            ]
          },
          {
            "Name": "check_status",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Check the status of the spend and remove it from the storage if processed.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "",
              "The status check is a prerequisite for retrying a failed payout.",
              "If a spend has either succeeded or expired, it is removed from the storage by this",
              "function. In such instances, transaction fees are refunded.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
              "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
            ]
          },
          {
            "Name": "void_spend",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Void previously approved spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "A spend void is only possible if the payout has not been attempted yet.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendVoided`] if successful."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "285": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "286": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          },
          {
            "Name": "ensure_updated",
            "TypeFields": [
              {
                "Name": "hashes",
                "TypeName": "Vec<T::Hash>",
                "TypeId": 287
              }
            ],
            "Index": 4,
            "Docs": [
              "Ensure that the a bulk of pre-images is upgraded.",
              "",
              "The caller pays no fee if at least 90% of pre-images were successfully updated."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "287": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "288": {
        "Variants": [
          {
            "Name": "transact",
            "TypeFields": [
              {
                "Name": "transaction",
                "TypeName": "Transaction",
                "TypeId": 289
              }
            ],
            "Index": 0,
            "Docs": [
              "Transact an Ethereum transaction."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "289": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "LegacyTransaction",
                "TypeId": 290
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930Transaction",
                "TypeId": 296
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559Transaction",
                "TypeId": 299
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionV2"
        ],
        "TypeDef": "Variant"
      },
      "290": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 293
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 14
          },
          {
            "Name": "signature",
            "TypeName": "TransactionSignature",
            "TypeId": 294
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "LegacyTransaction"
        ],
        "TypeDef": "Composite"
      },
      "291": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 292
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "292": {
        "Length": 4,
        "TypeId": 12,
        "TypeDef": "Array"
      },
      "293": {
        "Variants": [
          {
            "Name": "Call",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 0
          },
          {
            "Name": "Create",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionAction"
        ],
        "TypeDef": "Variant"
      },
      "294": {
        "TypeFields": [
          {
            "Name": "v",
            "TypeName": "TransactionRecoveryId",
            "TypeId": 295
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 13
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionSignature"
        ],
        "TypeDef": "Composite"
      },
      "295": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionRecoveryId"
        ],
        "TypeDef": "Composite"
      },
      "296": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 293
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 14
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 297
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 13
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP2930Transaction"
        ],
        "TypeDef": "Composite"
      },
      "297": {
        "TypeId": 298,
        "TypeDef": "Sequence"
      },
      "298": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "Address",
            "TypeId": 125
          },
          {
            "Name": "storage_keys",
            "TypeName": "Vec<H256>",
            "TypeId": 287
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "AccessListItem"
        ],
        "TypeDef": "Composite"
      },
      "299": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "max_priority_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "max_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 293
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 14
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 297
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 13
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP1559Transaction"
        ],
        "TypeDef": "Composite"
      },
      "300": {
        "Variants": [
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Withdraw balance from EVM into currency/balances pallet."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "target",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "input",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 302
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 302
              }
            ],
            "Index": 2,
            "Docs": [
              "Issue an EVM create operation. This is similar to a contract creation transaction in",
              "Ethereum."
            ]
          },
          {
            "Name": "create2",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "salt",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 301
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 302
              }
            ],
            "Index": 3,
            "Docs": [
              "Issue an EVM create2 operation."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "301": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 291
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 291
          }
        ],
        "TypeDef": "Variant"
      },
      "302": {
        "TypeId": 303,
        "TypeDef": "Sequence"
      },
      "303": {
        "TypeIds": [
          125,
          287
        ],
        "TypeDef": "Tuple"
      },
      "304": {
        "Variants": [
          {
            "Name": "note_min_gas_price_target",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "U256",
                "TypeId": 291
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_dynamic_fee",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "305": {
        "Variants": [
          {
            "Name": "bind_evm_address",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Binds a Substrate address to EVM address.",
              "After binding, the EVM is able to convert an EVM address to the original Substrate",
              "address. Without binding, the EVM converts an EVM address to a truncated Substrate",
              "address, which doesn't correspond to the origin address.",
              "",
              "Binding an address is not necessary for interacting with the EVM.",
              "",
              "Parameters:",
              "- `origin`: Substrate account binding an address",
              "",
              "Emits `EvmAccountBound` event when successful."
            ]
          },
          {
            "Name": "add_contract_deployer",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 125
              }
            ],
            "Index": 1,
            "Docs": [
              "Adds an EVM address to the list of addresses that are allowed to deploy smart contracts.",
              "",
              "Parameters:",
              "- `origin`: Substrate account whitelisting an address. Must be `ControllerOrigin`.",
              "- `address`: EVM address that is whitelisted",
              "",
              "Emits `DeployerAdded` event when successful."
            ]
          },
          {
            "Name": "remove_contract_deployer",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 125
              }
            ],
            "Index": 2,
            "Docs": [
              "Removes an EVM address from the list of addresses that are allowed to deploy smart",
              "contracts.",
              "",
              "Parameters:",
              "- `origin`: Substrate account removing the EVM address from the whitelist. Must be",
              "  `ControllerOrigin`.",
              "- `address`: EVM address that is removed from the whitelist",
              "",
              "Emits `DeployerRemoved` event when successful."
            ]
          },
          {
            "Name": "renounce_contract_deployer",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Removes the account's EVM address from the list of addresses that are allowed to deploy",
              "smart contracts. Based on the best practices, this extrinsic can be called by any",
              "whitelisted account to renounce their own permission.",
              "",
              "Parameters:",
              "- `origin`: Substrate account removing their EVM address from the whitelist.",
              "",
              "Emits `DeployerRemoved` event when successful."
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "306": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer native currencies.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 309
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer `Asset`.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer native currencies specifying the fee and amount as",
              "separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the amount to be spent to pay for execution in destination",
              "chain. Both fee and amount will be subtracted form the callers",
              "balance.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 309
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 309
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 3,
            "Docs": [
              "Transfer `Asset` specifying the fee and amount as separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the Asset to be spent to pay for execution in",
              "destination chain. Both fee and amount will be subtracted form the",
              "callers balance For now we only accept fee and asset having the same",
              "`Location` id.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 310
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer several currencies specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the currencies tuple that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 211
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 191
              }
            ],
            "Index": 5,
            "Docs": [
              "Transfer several `Asset` specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the Assets that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "307": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              }
            ],
            "Index": 0
          },
          {
            "Name": "VToken",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              }
            ],
            "Index": 1
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              }
            ],
            "Index": 2
          },
          {
            "Name": "Stable",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              }
            ],
            "Index": 3
          },
          {
            "Name": "VSToken",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              }
            ],
            "Index": 4
          },
          {
            "Name": "VSBond",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              }
            ],
            "Index": 5
          },
          {
            "Name": "LPToken",
            "TypeFields": [
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "TokenSymbol",
                "TypeId": 308
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "ForeignAsset",
            "TypeFields": [
              {
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              }
            ],
            "Index": 7
          },
          {
            "Name": "Token2",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "VToken2",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "VSToken2",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "VSBond2",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 2
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              }
            ],
            "Index": 11
          },
          {
            "Name": "StableLpToken",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 12
          },
          {
            "Name": "BLP",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 13
          },
          {
            "Name": "Lend",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 2
              }
            ],
            "Index": 14
          }
        ],
        "Path": [
          "bifrost_primitives",
          "currency",
          "CurrencyId"
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "Variants": [
          {
            "Name": "ASG",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "BNC",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "KUSD",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "DOT",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "KSM",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ETH",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "KAR",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ZLK",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "PHA",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "RMRK",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "MOVR",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "bifrost_primitives",
          "currency",
          "TokenSymbol"
        ],
        "TypeDef": "Variant"
      },
      "309": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 150
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 171
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Asset",
                "TypeId": 197
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAsset"
        ],
        "TypeDef": "Variant"
      },
      "310": {
        "TypeId": 311,
        "TypeDef": "Sequence"
      },
      "311": {
        "TypeIds": [
          307,
          6
        ],
        "TypeDef": "Tuple"
      },
      "312": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "It will decrease the total issuance of the system by the",
              "`TransferFee`. If the sender's account is below the existential",
              "deposit as a result of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer all remaining balance to the given account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_",
              "balances. This means that any locked, reserved, or existential",
              "deposits (when `keep_alive` is `true`), will not be transferred by",
              "this function. To ensure that this function results in a killed",
              "account, you might need to prepare the account by removing any",
              "reference counters, storage deposits, etc...",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `keep_alive`: A boolean to determine if the `transfer_all`",
              "  operation should send all of the funds the account has, causing",
              "  the sender account to be killed (false), or transfer everything",
              "  except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 2,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer",
              "will not kill the origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 3,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source",
              "account may be specified.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The sender of the transfer.",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 91
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 91
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
              "will also decrease the total issuance of the system",
              "(`TotalIssuance`). If the new free or reserved balance is below the",
              "existential deposit, it will reap the `AccountInfo`.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "313": {
        "Variants": [
          {
            "Name": "send_as_sovereign",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 144
              }
            ],
            "Index": 0,
            "Docs": [
              "Send an XCM message as parachain sovereign."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "314": {
        "Variants": [
          {
            "Name": "set_fee_receiver",
            "TypeFields": [
              {
                "Name": "send_to",
                "TypeName": "Option<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 315
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the new receiver of the protocol fee.",
              "",
              "# Arguments",
              "",
              "- `send_to`:",
              "(1) Some(receiver): it turn on the protocol fee and the new receiver account.",
              "(2) None: it turn off the protocol fee."
            ]
          },
          {
            "Name": "set_fee_point",
            "TypeFields": [
              {
                "Name": "fee_point",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the protocol fee point.",
              "",
              "# Arguments",
              "",
              "- `fee_point`:",
              "0 means that all exchange fees belong to the liquidity provider.",
              "30 means that all exchange fees belong to the fee receiver."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalance",
                "TypeId": 91
              }
            ],
            "Index": 2,
            "Docs": [
              "Move some assets from one holder to another.",
              "",
              "# Arguments",
              "",
              "- `asset_id`: The foreign id.",
              "- `target`: The receiver of the foreign.",
              "- `amount`: The amount of the foreign to transfer."
            ]
          },
          {
            "Name": "create_pair",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "fee_recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              }
            ],
            "Index": 3,
            "Docs": [
              "Create pair by two assets.",
              "",
              "The order of foreign dot effect result.",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up Pair",
              "- `asset_1`: Asset which make up Pair"
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "amount_0_desired",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_1_desired",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_0_min",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_1_min",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Provide liquidity to a pair.",
              "",
              "The order of foreign dot effect result.",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up pair",
              "- `asset_1`: Asset which make up pair",
              "- `amount_0_desired`: Maximum amount of asset_0 added to the pair",
              "- `amount_1_desired`: Maximum amount of asset_1 added to the pair",
              "- `amount_0_min`: Minimum amount of asset_0 added to the pair",
              "- `amount_1_min`: Minimum amount of asset_1 added to the pair",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "remove_liquidity",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "liquidity",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_0_min",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_1_min",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 5,
            "Docs": [
              "Extract liquidity.",
              "",
              "The order of foreign dot effect result.",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up pair",
              "- `asset_1`: Asset which make up pair",
              "- `amount_asset_0_min`: Minimum amount of asset_0 to exact",
              "- `amount_asset_1_min`: Minimum amount of asset_1 to exact",
              "- `recipient`: Account that accepts withdrawal of assets",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "swap_exact_assets_for_assets",
            "TypeFields": [
              {
                "Name": "amount_in",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_out_min",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "path",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 317
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "Sell amount of foreign by path.",
              "",
              "# Arguments",
              "",
              "- `amount_in`: Amount of the foreign will be sold",
              "- `amount_out_min`: Minimum amount of target foreign",
              "- `path`: path can convert to pairs.",
              "- `recipient`: Account that receive the target foreign",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "swap_assets_for_exact_assets",
            "TypeFields": [
              {
                "Name": "amount_out",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_in_max",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "path",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 317
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 7,
            "Docs": [
              "Buy amount of foreign by path.",
              "",
              "# Arguments",
              "",
              "- `amount_out`: Amount of the foreign will be bought",
              "- `amount_in_max`: Maximum amount of sold foreign",
              "- `path`: path can convert to pairs.",
              "- `recipient`: Account that receive the target foreign",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "bootstrap_create",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "target_supply_0",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "target_supply_1",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "capacity_supply_0",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "capacity_supply_1",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "end",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 317
              },
              {
                "Name": "limits",
                "TypeName": "Vec<(T::AssetId, AssetBalance)>",
                "TypeId": 318
              }
            ],
            "Index": 8,
            "Docs": [
              "Create bootstrap pair",
              "",
              "The order of asset don't affect result.",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair",
              "- `target_supply_0`: Target amount of asset_0 total contribute",
              "- `target_supply_0`: Target amount of asset_1 total contribute",
              "- `capacity_supply_0`: The max amount of asset_0 total contribute",
              "- `capacity_supply_1`: The max amount of asset_1 total contribute",
              "- `end`: The earliest ending block."
            ]
          },
          {
            "Name": "bootstrap_contribute",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "amount_0_contribute",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "amount_1_contribute",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 9,
            "Docs": [
              "Contribute some asset to a bootstrap pair",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair",
              "- `amount_0_contribute`: The amount of asset_0 contribute to this bootstrap pair",
              "- `amount_1_contribute`: The amount of asset_1 contribute to this bootstrap pair",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "bootstrap_claim",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              }
            ],
            "Index": 10,
            "Docs": [
              "Claim lp asset from a bootstrap pair",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair",
              "- `deadline`: Height of the cutoff block of this transaction"
            ]
          },
          {
            "Name": "bootstrap_end",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              }
            ],
            "Index": 11,
            "Docs": [
              "End a bootstrap pair",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair"
            ]
          },
          {
            "Name": "bootstrap_update",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "target_supply_0",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "target_supply_1",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "capacity_supply_0",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "capacity_supply_1",
                "TypeName": "AssetBalance",
                "TypeId": 91
              },
              {
                "Name": "end",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 317
              },
              {
                "Name": "limits",
                "TypeName": "Vec<(T::AssetId, AssetBalance)>",
                "TypeId": 318
              }
            ],
            "Index": 12,
            "Docs": [
              "update a bootstrap pair",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair",
              "- `min_contribution_0`: The new min amount of asset_0 contribute",
              "- `min_contribution_0`: The new min amount of asset_1 contribute",
              "- `target_supply_0`: The new target amount of asset_0 total contribute",
              "- `target_supply_0`: The new target amount of asset_1 total contribute",
              "- `capacity_supply_0`: The new max amount of asset_0 total contribute",
              "- `capacity_supply_1`: The new max amount of asset_1 total contribute",
              "- `end`: The earliest ending block."
            ]
          },
          {
            "Name": "bootstrap_refund",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              }
            ],
            "Index": 13,
            "Docs": [
              "Contributor refund from disable bootstrap pair",
              "",
              "# Arguments",
              "",
              "- `asset_0`: Asset which make up bootstrap pair",
              "- `asset_1`: Asset which make up bootstrap pair"
            ]
          },
          {
            "Name": "bootstrap_charge_reward",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "charge_rewards",
                "TypeName": "Vec<(T::AssetId, AssetBalance)>",
                "TypeId": 318
              }
            ],
            "Index": 14
          },
          {
            "Name": "bootstrap_withdraw_reward",
            "TypeFields": [
              {
                "Name": "asset_0",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "asset_1",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              }
            ],
            "Index": 15
          },
          {
            "Name": "set_new_fee_receiver",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "Name": "send_to",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              }
            ],
            "Index": 16
          }
        ],
        "Path": [
          "zenlink_protocol",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "315": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 62
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 62
          }
        ],
        "TypeDef": "Variant"
      },
      "316": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "asset_type",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "asset_index",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "zenlink_protocol",
          "primitives",
          "AssetId"
        ],
        "TypeDef": "Composite"
      },
      "317": {
        "TypeId": 316,
        "TypeDef": "Sequence"
      },
      "318": {
        "TypeId": 319,
        "TypeDef": "Sequence"
      },
      "319": {
        "TypeIds": [
          316,
          6
        ],
        "TypeDef": "Tuple"
      },
      "320": {
        "Variants": [
          {
            "Name": "handle_unsigned",
            "TypeFields": [
              {
                "Name": "messages",
                "TypeName": "Vec<Message>",
                "TypeId": 321
              }
            ],
            "Index": 0,
            "Docs": [
              "Execute the provided batch of ISMP messages, this will short-circuit and revert if any",
              "of the provided messages are invalid. This is an unsigned extrinsic that permits anyone",
              "execute ISMP messages for free, provided they have valid proofs and the messages have",
              "not been previously processed.",
              "",
              "The dispatch origin for this call must be an unsigned one.",
              "",
              "- `messages`: the messages to handle or process.",
              "",
              "Emits different message events based on the Message received if successful."
            ]
          },
          {
            "Name": "create_consensus_client",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "CreateConsensusState",
                "TypeId": 345
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a consensus client, using a subjectively chosen consensus state. This can also",
              "be used to overwrite an existing consensus state. The dispatch origin for this",
              "call must be `T::AdminOrigin`.",
              "",
              "- `message`: [`CreateConsensusState`] struct.",
              "",
              "Emits [`Event::ConsensusClientCreated`] if successful."
            ]
          },
          {
            "Name": "update_consensus_state",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpdateConsensusState",
                "TypeId": 353
              }
            ],
            "Index": 3,
            "Docs": [
              "Modify the unbonding period and challenge period for a consensus state.",
              "The dispatch origin for this call must be `T::AdminOrigin`.",
              "",
              "- `message`: `UpdateConsensusState` struct."
            ]
          },
          {
            "Name": "fund_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "FundMessageParams<T::Balance>",
                "TypeId": 355
              }
            ],
            "Index": 4,
            "Docs": [
              "Add more funds to a message (request or response) to be used for delivery and execution.",
              "",
              "Should not be called on a message that has been completed (delivered or timed-out) as",
              "those funds will be lost forever."
            ]
          }
        ],
        "Path": [
          "pallet_ismp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "321": {
        "TypeId": 322,
        "TypeDef": "Sequence"
      },
      "322": {
        "Variants": [
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusMessage",
                "TypeId": 323
              }
            ],
            "Index": 0
          },
          {
            "Name": "FraudProof",
            "TypeFields": [
              {
                "TypeName": "FraudProofMessage",
                "TypeId": 324
              }
            ],
            "Index": 1
          },
          {
            "Name": "Request",
            "TypeFields": [
              {
                "TypeName": "RequestMessage",
                "TypeId": 325
              }
            ],
            "Index": 2
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "ResponseMessage",
                "TypeId": 332
              }
            ],
            "Index": 3
          },
          {
            "Name": "Timeout",
            "TypeFields": [
              {
                "TypeName": "TimeoutMessage",
                "TypeId": 343
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "Message"
        ],
        "TypeDef": "Variant"
      },
      "323": {
        "TypeFields": [
          {
            "Name": "consensus_proof",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "consensus_state_id",
            "TypeName": "ConsensusStateId",
            "TypeId": 18
          },
          {
            "Name": "signer",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "ConsensusMessage"
        ],
        "TypeDef": "Composite"
      },
      "324": {
        "TypeFields": [
          {
            "Name": "proof_1",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "proof_2",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "consensus_state_id",
            "TypeName": "ConsensusStateId",
            "TypeId": 18
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "FraudProofMessage"
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "TypeFields": [
          {
            "Name": "requests",
            "TypeName": "Vec<PostRequest>",
            "TypeId": 326
          },
          {
            "Name": "proof",
            "TypeName": "Proof",
            "TypeId": 329
          },
          {
            "Name": "signer",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "RequestMessage"
        ],
        "TypeDef": "Composite"
      },
      "326": {
        "TypeId": 327,
        "TypeDef": "Sequence"
      },
      "327": {
        "TypeFields": [
          {
            "Name": "source",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "dest",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "nonce",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "from",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "to",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "timeout_timestamp",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "body",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "router",
          "PostRequest"
        ],
        "TypeDef": "Composite"
      },
      "328": {
        "Variants": [
          {
            "Name": "Evm",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Polkadot",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Kusama",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          },
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "ConsensusStateId",
                "TypeId": 18
              }
            ],
            "Index": 3
          },
          {
            "Name": "Tendermint",
            "TypeFields": [
              {
                "TypeName": "ConsensusStateId",
                "TypeId": 18
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "ismp",
          "host",
          "StateMachine"
        ],
        "TypeDef": "Variant"
      },
      "329": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "StateMachineHeight",
            "TypeId": 330
          },
          {
            "Name": "proof",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "Proof"
        ],
        "TypeDef": "Composite"
      },
      "330": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "StateMachineId",
            "TypeId": 331
          },
          {
            "Name": "height",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ismp",
          "consensus",
          "StateMachineHeight"
        ],
        "TypeDef": "Composite"
      },
      "331": {
        "TypeFields": [
          {
            "Name": "state_id",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "consensus_state_id",
            "TypeName": "ConsensusStateId",
            "TypeId": 18
          }
        ],
        "Path": [
          "ismp",
          "consensus",
          "StateMachineId"
        ],
        "TypeDef": "Composite"
      },
      "332": {
        "TypeFields": [
          {
            "Name": "datagram",
            "TypeName": "RequestResponse",
            "TypeId": 333
          },
          {
            "Name": "proof",
            "TypeName": "Proof",
            "TypeId": 329
          },
          {
            "Name": "signer",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "ResponseMessage"
        ],
        "TypeDef": "Composite"
      },
      "333": {
        "Variants": [
          {
            "Name": "Request",
            "TypeFields": [
              {
                "TypeName": "Vec<Request>",
                "TypeId": 334
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "Vec<Response>",
                "TypeId": 337
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ismp",
          "router",
          "RequestResponse"
        ],
        "TypeDef": "Variant"
      },
      "334": {
        "TypeId": 335,
        "TypeDef": "Sequence"
      },
      "335": {
        "Variants": [
          {
            "Name": "Post",
            "TypeFields": [
              {
                "TypeName": "PostRequest",
                "TypeId": 327
              }
            ],
            "Index": 0
          },
          {
            "Name": "Get",
            "TypeFields": [
              {
                "TypeName": "GetRequest",
                "TypeId": 336
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ismp",
          "router",
          "Request"
        ],
        "TypeDef": "Variant"
      },
      "336": {
        "TypeFields": [
          {
            "Name": "source",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "dest",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "nonce",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "from",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "keys",
            "TypeName": "Vec<Vec<u8>>",
            "TypeId": 59
          },
          {
            "Name": "height",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "context",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "timeout_timestamp",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ismp",
          "router",
          "GetRequest"
        ],
        "TypeDef": "Composite"
      },
      "337": {
        "TypeId": 338,
        "TypeDef": "Sequence"
      },
      "338": {
        "Variants": [
          {
            "Name": "Post",
            "TypeFields": [
              {
                "TypeName": "PostResponse",
                "TypeId": 339
              }
            ],
            "Index": 0
          },
          {
            "Name": "Get",
            "TypeFields": [
              {
                "TypeName": "GetResponse",
                "TypeId": 340
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ismp",
          "router",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "339": {
        "TypeFields": [
          {
            "Name": "post",
            "TypeName": "PostRequest",
            "TypeId": 327
          },
          {
            "Name": "response",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "timeout_timestamp",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ismp",
          "router",
          "PostResponse"
        ],
        "TypeDef": "Composite"
      },
      "340": {
        "TypeFields": [
          {
            "Name": "get",
            "TypeName": "GetRequest",
            "TypeId": 336
          },
          {
            "Name": "values",
            "TypeName": "Vec<StorageValue>",
            "TypeId": 341
          }
        ],
        "Path": [
          "ismp",
          "router",
          "GetResponse"
        ],
        "TypeDef": "Composite"
      },
      "341": {
        "TypeId": 342,
        "TypeDef": "Sequence"
      },
      "342": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "value",
            "TypeName": "Option<Vec<u8>>",
            "TypeId": 38
          }
        ],
        "Path": [
          "ismp",
          "router",
          "StorageValue"
        ],
        "TypeDef": "Composite"
      },
      "343": {
        "Variants": [
          {
            "Name": "Post",
            "TypeFields": [
              {
                "Name": "requests",
                "TypeName": "Vec<Request>",
                "TypeId": 334
              },
              {
                "Name": "timeout_proof",
                "TypeName": "Proof",
                "TypeId": 329
              }
            ],
            "Index": 0
          },
          {
            "Name": "PostResponse",
            "TypeFields": [
              {
                "Name": "responses",
                "TypeName": "Vec<PostResponse>",
                "TypeId": 344
              },
              {
                "Name": "timeout_proof",
                "TypeName": "Proof",
                "TypeId": 329
              }
            ],
            "Index": 1
          },
          {
            "Name": "Get",
            "TypeFields": [
              {
                "Name": "requests",
                "TypeName": "Vec<Request>",
                "TypeId": 334
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "TimeoutMessage"
        ],
        "TypeDef": "Variant"
      },
      "344": {
        "TypeId": 339,
        "TypeDef": "Sequence"
      },
      "345": {
        "TypeFields": [
          {
            "Name": "consensus_state",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "consensus_client_id",
            "TypeName": "ConsensusClientId",
            "TypeId": 18
          },
          {
            "Name": "consensus_state_id",
            "TypeName": "ConsensusStateId",
            "TypeId": 18
          },
          {
            "Name": "unbonding_period",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "challenge_periods",
            "TypeName": "BTreeMap<StateMachine, u64>",
            "TypeId": 346
          },
          {
            "Name": "state_machine_commitments",
            "TypeName": "Vec<(StateMachineId, StateCommitmentHeight)>",
            "TypeId": 349
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "CreateConsensusState"
        ],
        "TypeDef": "Composite"
      },
      "346": {
        "TypeFields": [
          {
            "TypeId": 347
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 328
          },
          {
            "Name": "V",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "347": {
        "TypeId": 348,
        "TypeDef": "Sequence"
      },
      "348": {
        "TypeIds": [
          328,
          12
        ],
        "TypeDef": "Tuple"
      },
      "349": {
        "TypeId": 350,
        "TypeDef": "Sequence"
      },
      "350": {
        "TypeIds": [
          331,
          351
        ],
        "TypeDef": "Tuple"
      },
      "351": {
        "TypeFields": [
          {
            "Name": "commitment",
            "TypeName": "StateCommitment",
            "TypeId": 352
          },
          {
            "Name": "height",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ismp",
          "messaging",
          "StateCommitmentHeight"
        ],
        "TypeDef": "Composite"
      },
      "352": {
        "TypeFields": [
          {
            "Name": "timestamp",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "overlay_root",
            "TypeName": "Option<H256>",
            "TypeId": 127
          },
          {
            "Name": "state_root",
            "TypeName": "H256",
            "TypeId": 13
          }
        ],
        "Path": [
          "ismp",
          "consensus",
          "StateCommitment"
        ],
        "TypeDef": "Composite"
      },
      "353": {
        "TypeFields": [
          {
            "Name": "consensus_state_id",
            "TypeName": "ConsensusStateId",
            "TypeId": 18
          },
          {
            "Name": "unbonding_period",
            "TypeName": "Option<u64>",
            "TypeId": 354
          },
          {
            "Name": "challenge_periods",
            "TypeName": "BTreeMap<StateMachine, u64>",
            "TypeId": 346
          }
        ],
        "Path": [
          "pallet_ismp",
          "utils",
          "UpdateConsensusState"
        ],
        "TypeDef": "Composite"
      },
      "354": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "355": {
        "TypeFields": [
          {
            "Name": "commitment",
            "TypeName": "MessageCommitment",
            "TypeId": 356
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_ismp",
          "utils",
          "FundMessageParams"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "Variants": [
          {
            "Name": "Request",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ismp",
          "utils",
          "MessageCommitment"
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "Variants": [
          {
            "Name": "update_parachain_consensus",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ConsensusMessage",
                "TypeId": 323
              }
            ],
            "Index": 0,
            "Docs": [
              "This allows block builders submit parachain consensus proofs as inherents. If the",
              "provided [`ConsensusMessage`] is not for a parachain, this call will fail."
            ]
          },
          {
            "Name": "add_parachain",
            "TypeFields": [
              {
                "Name": "para_ids",
                "TypeName": "Vec<ParachainData>",
                "TypeId": 358
              }
            ],
            "Index": 1,
            "Docs": [
              "Add some new parachains to the parachains whitelist"
            ]
          },
          {
            "Name": "remove_parachain",
            "TypeFields": [
              {
                "Name": "para_ids",
                "TypeName": "Vec<u32>",
                "TypeId": 360
              }
            ],
            "Index": 2,
            "Docs": [
              "Removes some parachains from the parachains whitelist"
            ]
          }
        ],
        "Path": [
          "ismp_parachain",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "358": {
        "TypeId": 359,
        "TypeDef": "Sequence"
      },
      "359": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "slot_duration",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "ismp_parachain",
          "ParachainData"
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "361": {
        "Variants": [
          {
            "Name": "teleport",
            "TypeFields": [
              {
                "Name": "params",
                "TypeName": "TeleportParams<CurrencyId, BalanceOf<T>>",
                "TypeId": 362
              }
            ],
            "Index": 0,
            "Docs": [
              "Teleports a registered asset",
              "locks the asset and dispatches a request to token gateway on the destination"
            ]
          },
          {
            "Name": "set_token_gateway_addresses",
            "TypeFields": [
              {
                "Name": "addresses",
                "TypeName": "BTreeMap<StateMachine, Vec<u8>>",
                "TypeId": 363
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the token gateway address for specified chains"
            ]
          },
          {
            "Name": "create_erc6160_asset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "AssetRegistration<CurrencyId>",
                "TypeId": 366
              },
              {
                "Name": "native",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 2,
            "Docs": [
              "Registers a multi-chain ERC6160 asset. The asset should not already exist.",
              "",
              "This works by dispatching a request to the TokenGateway module on each requested chain",
              "to create the asset.",
              "`native` should be true if this asset originates from this chain"
            ]
          },
          {
            "Name": "update_erc6160_asset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "GatewayAssetUpdate",
                "TypeId": 372
              }
            ],
            "Index": 3,
            "Docs": [
              "Registers a multi-chain ERC6160 asset. The asset should not already exist.",
              "",
              "This works by dispatching a request to the TokenGateway module on each requested chain",
              "to create the asset."
            ]
          },
          {
            "Name": "set_whitelist_addresses",
            "TypeFields": [
              {
                "Name": "addresses",
                "TypeName": "BTreeMap<StateMachine, Vec<Vec<u8>>>",
                "TypeId": 377
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_token_gateway",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "362": {
        "TypeFields": [
          {
            "Name": "asset_id",
            "TypeName": "AssetId",
            "TypeId": 307
          },
          {
            "Name": "destination",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "recepient",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "timeout",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "token_gateway",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "relayer_fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "redeem",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "call_data",
            "TypeName": "Option<Vec<u8>>",
            "TypeId": 38
          }
        ],
        "Path": [
          "pallet_token_gateway",
          "types",
          "TeleportParams"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 307
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "363": {
        "TypeFields": [
          {
            "TypeId": 364
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 328
          },
          {
            "Name": "V",
            "TypeId": 14
          }
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeId": 365,
        "TypeDef": "Sequence"
      },
      "365": {
        "TypeIds": [
          328,
          14
        ],
        "TypeDef": "Tuple"
      },
      "366": {
        "TypeFields": [
          {
            "Name": "local_id",
            "TypeName": "AssetId",
            "TypeId": 307
          },
          {
            "Name": "reg",
            "TypeName": "token_gateway_primitives::GatewayAssetRegistration",
            "TypeId": 367
          }
        ],
        "Path": [
          "pallet_token_gateway",
          "types",
          "AssetRegistration"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 307
          }
        ],
        "TypeDef": "Composite"
      },
      "367": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, ConstU32<50>>",
            "TypeId": 368
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedVec<u8, ConstU32<20>>",
            "TypeId": 369
          },
          {
            "Name": "chains",
            "TypeName": "Vec<StateMachine>",
            "TypeId": 370
          },
          {
            "Name": "minimum_balance",
            "TypeName": "Option<u128>",
            "TypeId": 371
          }
        ],
        "Path": [
          "token_gateway_primitives",
          "GatewayAssetRegistration"
        ],
        "TypeDef": "Composite"
      },
      "368": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeId": 328,
        "TypeDef": "Sequence"
      },
      "371": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "372": {
        "TypeFields": [
          {
            "Name": "asset_id",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "add_chains",
            "TypeName": "BoundedVec<StateMachine, ConstU32<100>>",
            "TypeId": 373
          },
          {
            "Name": "remove_chains",
            "TypeName": "BoundedVec<StateMachine, ConstU32<100>>",
            "TypeId": 373
          },
          {
            "Name": "new_admins",
            "TypeName": "BoundedVec<(StateMachine, H160), ConstU32<100>>",
            "TypeId": 374
          }
        ],
        "Path": [
          "token_gateway_primitives",
          "GatewayAssetUpdate"
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 370
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 328
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "374": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 376
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 375
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "375": {
        "TypeIds": [
          328,
          125
        ],
        "TypeDef": "Tuple"
      },
      "376": {
        "TypeId": 375,
        "TypeDef": "Sequence"
      },
      "377": {
        "TypeFields": [
          {
            "TypeId": 378
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 328
          },
          {
            "Name": "V",
            "TypeId": 59
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 379,
        "TypeDef": "Sequence"
      },
      "379": {
        "TypeIds": [
          328,
          59
        ],
        "TypeDef": "Tuple"
      },
      "380": {
        "Variants": [
          {
            "Name": "set_user_default_fee_currency",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              }
            ],
            "Index": 0,
            "Docs": [
              "Set user default fee currency",
              "Parameters:",
              "- `maybe_fee_currency`: The currency id to be set as the default fee currency.",
              " If `None`, the user default fee currency will be removed."
            ]
          },
          {
            "Name": "set_default_fee_currency_list",
            "TypeFields": [
              {
                "Name": "currency_list",
                "TypeName": "BoundedVec<CurrencyId, T::MaxFeeCurrencyOrderListLen>",
                "TypeId": 382
              }
            ],
            "Index": 1,
            "Docs": [
              "Set universal fee currency order list",
              "Parameters:",
              "- `default_list`: The currency id list to be set as the universal fee currency order",
              "  list."
            ]
          },
          {
            "Name": "set_extra_fee",
            "TypeFields": [
              {
                "Name": "raw_call_name",
                "TypeName": "RawCallName",
                "TypeId": 281
              },
              {
                "Name": "fee_info",
                "TypeName": "Option<(CurrencyId, BalanceOf<T>, T::AccountId)>",
                "TypeId": 384
              }
            ],
            "Index": 2,
            "Docs": [
              "Set universal fee currency order list",
              "Parameters:",
              "- `raw_call_name`: The raw call name to be set as the extra fee call.",
              "- `fee_info`: The currency id, fee amount and receiver to be set as the extra fee."
            ]
          },
          {
            "Name": "dispatch_permit",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "deadline",
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "Name": "v",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "r",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "s",
                "TypeName": "H256",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatch EVM permit.",
              "The main purpose of this function is to allow EVM accounts to pay for the transaction",
              "fee in non-native currency by allowing them to self-dispatch pre-signed permit.",
              "The EVM fee is paid in the currency set for the account."
            ]
          }
        ],
        "Path": [
          "bifrost_flexible_fee",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "381": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 307
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          }
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "383": {
        "TypeId": 307,
        "TypeDef": "Sequence"
      },
      "384": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 385
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 385
          }
        ],
        "TypeDef": "Variant"
      },
      "385": {
        "TypeIds": [
          307,
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "386": {
        "Variants": [
          {
            "Name": "fund_retire",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              }
            ],
            "Index": 4
          },
          {
            "Name": "fund_end",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              }
            ],
            "Index": 5
          },
          {
            "Name": "edit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              },
              {
                "Name": "cap",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "raised",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "first_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              },
              {
                "Name": "last_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              },
              {
                "Name": "fund_status",
                "TypeName": "Option<FundStatus>",
                "TypeId": 387
              }
            ],
            "Index": 7,
            "Docs": [
              "Edit the configuration for an in-progress crowdloan.",
              "",
              "Can only be called by Root origin."
            ]
          },
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              }
            ],
            "Index": 14,
            "Docs": [
              "Withdraw full balance of the parachain.",
              "- `index`: The parachain to whose crowdloan the contribution was made."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              },
              {
                "Name": "first_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              },
              {
                "Name": "last_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 15
          },
          {
            "Name": "redeem",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 16
          },
          {
            "Name": "dissolve_refunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              },
              {
                "Name": "first_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              },
              {
                "Name": "last_slot",
                "TypeName": "LeasePeriod",
                "TypeId": 63
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a fund after the retirement period has ended and all funds have been returned."
            ]
          },
          {
            "Name": "dissolve",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 63
              }
            ],
            "Index": 18,
            "Docs": [
              "Remove a fund after the retirement period has ended and all funds have been returned."
            ]
          },
          {
            "Name": "buyback_vstoken_by_stable_pool",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "currency_id_in",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 21
          }
        ],
        "Path": [
          "bifrost_salp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "387": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 388
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 388
          }
        ],
        "TypeDef": "Variant"
      },
      "388": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Retired",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "RefundWithdrew",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "RedeemWithdrew",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "FailedToContinue",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "End",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "bifrost_salp",
          "FundStatus"
        ],
        "TypeDef": "Variant"
      },
      "389": {
        "Variants": [
          {
            "Name": "register_token_metadata",
            "TypeFields": [
              {
                "Name": "metadata",
                "TypeName": "Box<AssetMetadata<BalanceOf<T>>>",
                "TypeId": 390
              }
            ],
            "Index": 2
          },
          {
            "Name": "register_vtoken_metadata",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "register_location",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 6
          },
          {
            "Name": "force_set_location",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 131
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 7
          },
          {
            "Name": "update_currency_metadata",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "asset_name",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 38
              },
              {
                "Name": "asset_symbol",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 38
              },
              {
                "Name": "asset_decimals",
                "TypeName": "Option<u8>",
                "TypeId": 391
              },
              {
                "Name": "asset_minimal_balance",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "bifrost_asset_registry",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "390": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "symbol",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "minimal_balance",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_primitives",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          }
        ],
        "TypeDef": "Variant"
      },
      "392": {
        "Variants": [
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "Option<u32>",
                "TypeId": 87
              }
            ],
            "Index": 0,
            "Docs": [
              "Mint v_currency by transferring currency to entrance_account.",
              "The minted v_currency will be deposited to the minter's account.",
              "Parameters:",
              "- `currency_id`: The currency to mint.",
              "- `currency_amount`: The amount of currency to mint.",
              "- `remark`: The remark of minting.",
              "- `channel_id`: The channel id of minting."
            ]
          },
          {
            "Name": "redeem",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyIdOf<T>>",
                "TypeId": 381
              },
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Redeem currency by burning v_currency. But need to wait for the unlock period.",
              "The redeemed currency will be transferred to the redeemer's account.",
              "Parameters:",
              "- `v_currency_id`: The v_currency to redeem.",
              "- `v_currency_amount`: The amount of v_currency to redeem."
            ]
          },
          {
            "Name": "rebond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Already redeemed currency by burning v_currency. But need to wait for the unlock period.",
              "In unlock period, you call rebond to cancel the redeem.",
              "Parameters:",
              "- `currency_id`: The currency to rebond.",
              "- `currency_amount`: The amount of currency to rebond. The amount should be less than or",
              "  equal to the redeem amount."
            ]
          },
          {
            "Name": "rebond_by_unlock_id",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "unlock_id",
                "TypeName": "UnlockId",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Same function as Rebond. But need to provide unlock_id.",
              "Parameters:",
              "- `currency_id`: The currency to rebond.",
              "- `unlock_id`: The unlock_id to rebond."
            ]
          },
          {
            "Name": "set_unlock_duration",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "unlock_duration",
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the unlock duration for a currency.",
              "Parameters:",
              "- `currency_id`: The currency to set unlock duration.",
              "- `unlock_duration`: The unlock duration to set."
            ]
          },
          {
            "Name": "set_minimum_mint",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "minimum_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the minimum mint amount for a currency.",
              "Parameters:",
              "- `currency_id`: The currency to set minimum mint amount.",
              "- `minimum_amount`: The minimum mint amount to set."
            ]
          },
          {
            "Name": "set_minimum_redeem",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "minimum_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the minimum redeem amount for a currency.",
              "Parameters:",
              "- `currency_id`: The currency to set minimum redeem amount.",
              "- `minimum_amount`: The minimum redeem amount to set."
            ]
          },
          {
            "Name": "add_support_rebond_token",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 7,
            "Docs": [
              "Support a token to rebond.",
              "Parameters:",
              "- `currency_id`: The currency to support rebond."
            ]
          },
          {
            "Name": "remove_support_rebond_token",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the support of a token to rebond.",
              "Parameters:",
              "- `currency_id`: The currency to remove support rebond."
            ]
          },
          {
            "Name": "set_fees",
            "TypeFields": [
              {
                "Name": "mint_fee",
                "TypeName": "Permill",
                "TypeId": 394
              },
              {
                "Name": "redeem_fee",
                "TypeName": "Permill",
                "TypeId": 394
              }
            ],
            "Index": 9,
            "Docs": [
              "Set the fees for mint and redeem.",
              "Parameters:",
              "- `mint_fee`: The fee for mint.",
              "- `redeem_fee`: The fee for redeem."
            ]
          },
          {
            "Name": "set_hook_iteration_limit",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Set the hook iteration limit.",
              "Parameters:",
              "- `limit`: The hook iteration limit."
            ]
          },
          {
            "Name": "set_unlocking_total",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Set the total amount of tokens that are currently locked for unlocking.",
              "Parameters:",
              "- `currency_id`: The currency to set unlocking total.",
              "- `currency_amount`: The total amount of tokens that are currently locked for unlocking."
            ]
          },
          {
            "Name": "set_min_time_unit",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 12,
            "Docs": [
              "Set the minimum time unit for a currency.",
              "Parameters:",
              "- `currency_id`: The currency to set minimum time unit.",
              "- `time_unit`: The minimum time unit to set."
            ]
          },
          {
            "Name": "set_ongoing_time_unit",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 13,
            "Docs": [
              "Set the ongoing time unit for a currency.",
              "Parameters:",
              "- `currency_id`: The currency to set ongoing time unit.",
              "- `time_unit`: The ongoing time unit to set."
            ]
          },
          {
            "Name": "mint_with_lock",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "Option<u32>",
                "TypeId": 87
              }
            ],
            "Index": 14
          },
          {
            "Name": "unlock_incentive_minted_vtoken",
            "TypeFields": [
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 15,
            "Docs": [
              "Unlock the vtoken minted in an incentive mode",
              "Parameters:",
              "- `v_currency_id`: The v_currency to unlock."
            ]
          },
          {
            "Name": "set_incentive_coef",
            "TypeFields": [
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "new_coef_op",
                "TypeName": "Option<u128>",
                "TypeId": 371
              }
            ],
            "Index": 16,
            "Docs": [
              "Set the incentive coefficient for a vtoken when minted in an incentive mode",
              "Parameters:",
              "- `v_currency_id`: The v_currency to set incentive coefficient.",
              "- `new_coef_op`: The new incentive coefficient to set."
            ]
          },
          {
            "Name": "set_vtoken_incentive_lock_blocks",
            "TypeFields": [
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "new_blockes_op",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the locked blocks for a vtoken when minted in an incentive mode",
              "Parameters:",
              "- `v_currency_id`: The v_currency to set locked blocks.",
              "- `new_blockes_op`: The new locked blocks to set."
            ]
          },
          {
            "Name": "set_supported_eth",
            "TypeFields": [
              {
                "Name": "eths",
                "TypeName": "BoundedVec<CurrencyId, ConstU32<10>>",
                "TypeId": 395
              }
            ],
            "Index": 18,
            "Docs": [
              "Set Supported eths.",
              "Parameters:",
              "- `eths`: The supported eths."
            ]
          }
        ],
        "Path": [
          "bifrost_vtoken_minting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "393": {
        "Variants": [
          {
            "Name": "Era",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "SlashingSpan",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Round",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "Kblock",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "Hour",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "bifrost_primitives",
          "time_unit",
          "TimeUnit"
        ],
        "TypeDef": "Variant"
      },
      "394": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "395": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "396": {
        "Variants": [
          {
            "Name": "initialize_delegator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_location",
                "TypeName": "Option<Box<MultiLocation>>",
                "TypeId": 397
              }
            ],
            "Index": 0,
            "Docs": [
              "*****************************",
              "****** Outer Calls ******",
              "*****************************",
              "",
              "Delegator initialization work. Generate a new delegator and return its ID."
            ]
          },
          {
            "Name": "bond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 1,
            "Docs": [
              "First time bonding some amount to a delegator."
            ]
          },
          {
            "Name": "bond_extra",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 2,
            "Docs": [
              "Bond extra amount to a delegator."
            ]
          },
          {
            "Name": "unbond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 3,
            "Docs": [
              "Decrease some amount to a delegator. Leave no less than the minimum delegator",
              "requirement."
            ]
          },
          {
            "Name": "unbond_all",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 4,
            "Docs": [
              "Unbond all the active amount of a delegator."
            ]
          },
          {
            "Name": "rebond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              },
              {
                "Name": "amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 5,
            "Docs": [
              "Rebond some unlocking amount to a delegator."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "targets",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 6,
            "Docs": [
              "Delegate to some validator set."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "targets",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 7,
            "Docs": [
              "Re-delegate existing delegation to a new validator set."
            ]
          },
          {
            "Name": "redelegate",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "targets",
                "TypeName": "Option<Vec<MultiLocation>>",
                "TypeId": 401
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 8,
            "Docs": [
              "Re-delegate existing delegation to a new validator set."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "validator",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "when",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 9,
            "Docs": [
              "Initiate payout for a certain delegator."
            ]
          },
          {
            "Name": "liquidize",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "when",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              },
              {
                "Name": "amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 10,
            "Docs": [
              "Withdraw the due payout into free balance."
            ]
          },
          {
            "Name": "chill",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 11,
            "Docs": [
              "Initiate payout for a certain delegator."
            ]
          },
          {
            "Name": "transfer_back",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "to",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 12
          },
          {
            "Name": "transfer_to",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "to",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 13
          },
          {
            "Name": "convert_asset",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "if_from_currency",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "weight_and_fee",
                "TypeName": "Option<(Weight, BalanceOf<T>)>",
                "TypeId": 398
              }
            ],
            "Index": 14
          },
          {
            "Name": "increase_token_pool",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 15
          },
          {
            "Name": "decrease_token_pool",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 16
          },
          {
            "Name": "update_ongoing_time_unit",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 17
          },
          {
            "Name": "refund_currency_due_unbond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 18
          },
          {
            "Name": "supplement_fee_reserve",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "dest",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 19
          },
          {
            "Name": "charge_host_fee_and_tune_vtoken_exchange_rate",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "pool_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "delegator_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "who",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 20,
            "Docs": [
              "Charge staking host fee, tune vtoken/token exchange rate, and update delegator ledger",
              "for single delegator."
            ]
          },
          {
            "Name": "set_operate_origin",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Option<AccountIdOf<T>>",
                "TypeId": 403
              }
            ],
            "Index": 22,
            "Docs": [
              "*****************************",
              "****** Storage Setters ******",
              "*****************************",
              "Update storage OperateOrigins<T>."
            ]
          },
          {
            "Name": "set_fee_source",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who_and_fee",
                "TypeName": "Option<(MultiLocation, BalanceOf<T>)>",
                "TypeId": 404
              }
            ],
            "Index": 23,
            "Docs": [
              "Update storage FeeSources<T>."
            ]
          },
          {
            "Name": "add_delegator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 406
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 24,
            "Docs": [
              "Update storage DelegatorsIndex2Multilocation<T> ��� DelegatorsMultilocation2Index<T>."
            ]
          },
          {
            "Name": "remove_delegator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 25,
            "Docs": [
              "Update storage DelegatorsIndex2Multilocation<T> ��� DelegatorsMultilocation2Index<T>."
            ]
          },
          {
            "Name": "add_validator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 26,
            "Docs": [
              "Update storage Validators<T>."
            ]
          },
          {
            "Name": "remove_validator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 27,
            "Docs": [
              "Update storage Validators<T>."
            ]
          },
          {
            "Name": "set_validators_by_delegator",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "validators",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              }
            ],
            "Index": 28,
            "Docs": [
              "Update storage ValidatorsByDelegator<T>."
            ]
          },
          {
            "Name": "set_delegator_ledger",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              },
              {
                "Name": "ledger",
                "TypeName": "Box<Option<Ledger<BalanceOf<T>>>>",
                "TypeId": 407
              }
            ],
            "Index": 29,
            "Docs": [
              "Update storage DelegatorLedgers<T>."
            ]
          },
          {
            "Name": "set_minimums_and_maximums",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "constraints",
                "TypeName": "Option<MinimumsMaximums<BalanceOf<T>>>",
                "TypeId": 426
              }
            ],
            "Index": 30,
            "Docs": [
              "Update storage MinimumsAndMaximums<T>."
            ]
          },
          {
            "Name": "set_currency_delays",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "maybe_delays",
                "TypeName": "Option<Delays>",
                "TypeId": 428
              }
            ],
            "Index": 31,
            "Docs": [
              "Update storage Delays<T>."
            ]
          },
          {
            "Name": "set_hosting_fees",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "maybe_fee_set",
                "TypeName": "Option<(Permill, MultiLocation)>",
                "TypeId": 430
              }
            ],
            "Index": 32,
            "Docs": [
              "Set HostingFees storage."
            ]
          },
          {
            "Name": "set_currency_tune_exchange_rate_limit",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "maybe_tune_exchange_rate_limit",
                "TypeName": "Option<(u32, Permill)>",
                "TypeId": 432
              }
            ],
            "Index": 33,
            "Docs": [
              "Set  CurrencyTuneExchangeRateLimit<T> storage."
            ]
          },
          {
            "Name": "set_ongoing_time_unit_update_interval",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "maybe_interval",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 34,
            "Docs": [
              "Set  OngoingTimeUnitUpdateInterval<T> storage."
            ]
          },
          {
            "Name": "add_supplement_fee_account_to_whitelist",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 35
          },
          {
            "Name": "remove_supplement_fee_account_from_whitelist",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 36
          },
          {
            "Name": "confirm_delegator_ledger_query_response",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 37,
            "Docs": [
              "********************************************************************",
              "*************Outer Confirming Xcm queries functions ****************",
              "********************************************************************"
            ]
          },
          {
            "Name": "fail_delegator_ledger_query_response",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 38
          },
          {
            "Name": "confirm_validators_by_delegator_query_response",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 39
          },
          {
            "Name": "fail_validators_by_delegator_query_response",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 40
          },
          {
            "Name": "confirm_delegator_ledger",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 175
              }
            ],
            "Index": 41
          },
          {
            "Name": "confirm_validators_by_delegator",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 175
              }
            ],
            "Index": 42
          },
          {
            "Name": "reset_validators",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_list",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              }
            ],
            "Index": 43,
            "Docs": [
              "Reset the whole storage Validators<T>."
            ]
          },
          {
            "Name": "set_validator_boost_list",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_list",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              }
            ],
            "Index": 44,
            "Docs": [
              "Reset the whole storage Validator_boost_list<T>."
            ]
          },
          {
            "Name": "add_to_validator_boost_list",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 45
          },
          {
            "Name": "remove_from_validator_boot_list",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 139
              }
            ],
            "Index": 46,
            "Docs": [
              "Update storage Validator_boost_list<T>."
            ]
          },
          {
            "Name": "convert_treasury_vtoken",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 47
          },
          {
            "Name": "clean_outdated_validator_boost_list",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "page",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 48
          }
        ],
        "Path": [
          "bifrost_slp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "397": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 139
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 139
          }
        ],
        "TypeDef": "Variant"
      },
      "398": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 399
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 399
          }
        ],
        "TypeDef": "Variant"
      },
      "399": {
        "TypeIds": [
          10,
          6
        ],
        "TypeDef": "Tuple"
      },
      "400": {
        "TypeId": 139,
        "TypeDef": "Sequence"
      },
      "401": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 400
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 400
          }
        ],
        "TypeDef": "Variant"
      },
      "402": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 393
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 393
          }
        ],
        "TypeDef": "Variant"
      },
      "403": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "404": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 405
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 405
          }
        ],
        "TypeDef": "Variant"
      },
      "405": {
        "TypeIds": [
          139,
          6
        ],
        "TypeDef": "Tuple"
      },
      "406": {
        "TypeId": 53,
        "TypeDef": "Compact"
      },
      "407": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 408
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 408
          }
        ],
        "TypeDef": "Variant"
      },
      "408": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "SubstrateLedger<Balance>",
                "TypeId": 409
              }
            ],
            "Index": 0
          },
          {
            "Name": "Moonbeam",
            "TypeFields": [
              {
                "TypeName": "OneToManyLedger<Balance>",
                "TypeId": 412
              }
            ],
            "Index": 1
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "OneToManyLedger<Balance>",
                "TypeId": 412
              }
            ],
            "Index": 2
          },
          {
            "Name": "Filecoin",
            "TypeFields": [
              {
                "TypeName": "FilecoinLedger<Balance>",
                "TypeId": 423
              }
            ],
            "Index": 3
          },
          {
            "Name": "Phala",
            "TypeFields": [
              {
                "TypeName": "PhalaLedger<Balance>",
                "TypeId": 424
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "Ledger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "409": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "active",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlocking",
            "TypeName": "Vec<UnlockChunk<Balance>>",
            "TypeId": 410
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "polkadot_primitives",
          "SubstrateLedger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "TypeId": 411,
        "TypeDef": "Sequence"
      },
      "411": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlock_time",
            "TypeName": "TimeUnit",
            "TypeId": 393
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "polkadot_primitives",
          "UnlockChunk"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "delegations",
            "TypeName": "BTreeMap<MultiLocation, Balance>",
            "TypeId": 413
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "less_total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "requests",
            "TypeName": "Vec<OneToManyScheduledRequest<Balance>>",
            "TypeId": 415
          },
          {
            "Name": "request_briefs",
            "TypeName": "BTreeMap<MultiLocation, (TimeUnit, Balance)>",
            "TypeId": 418
          },
          {
            "Name": "status",
            "TypeName": "OneToManyDelegatorStatus",
            "TypeId": 422
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "OneToManyLedger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "TypeFields": [
          {
            "TypeId": 414
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 139
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "TypeId": 405,
        "TypeDef": "Sequence"
      },
      "415": {
        "TypeId": 416,
        "TypeDef": "Sequence"
      },
      "416": {
        "TypeFields": [
          {
            "Name": "validator",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "when_executable",
            "TypeName": "TimeUnit",
            "TypeId": 393
          },
          {
            "Name": "action",
            "TypeName": "OneToManyDelegationAction<Balance>",
            "TypeId": 417
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "OneToManyScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "417": {
        "Variants": [
          {
            "Name": "Revoke",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "OneToManyDelegationAction"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "418": {
        "TypeFields": [
          {
            "TypeId": 420
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 139
          },
          {
            "Name": "V",
            "TypeId": 419
          }
        ],
        "TypeDef": "Composite"
      },
      "419": {
        "TypeIds": [
          393,
          6
        ],
        "TypeDef": "Tuple"
      },
      "420": {
        "TypeId": 421,
        "TypeDef": "Sequence"
      },
      "421": {
        "TypeIds": [
          139,
          419
        ],
        "TypeDef": "Tuple"
      },
      "422": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "OneToManyDelegatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "423": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "initial_pledge",
            "TypeName": "Balance",
            "TypeId": 91
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "filecoin_primitives",
          "FilecoinLedger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "424": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "active_shares",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlocking_shares",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlocking_time_unit",
            "TypeName": "Option<TimeUnit>",
            "TypeId": 402
          },
          {
            "Name": "bonded_pool_id",
            "TypeName": "Option<u64>",
            "TypeId": 354
          },
          {
            "Name": "bonded_pool_collection_id",
            "TypeName": "Option<u32>",
            "TypeId": 87
          },
          {
            "Name": "bonded_is_vault",
            "TypeName": "Option<bool>",
            "TypeId": 425
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "phala_primitives",
          "PhalaLedger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Variant"
      },
      "426": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 427
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 427
          }
        ],
        "TypeDef": "Variant"
      },
      "427": {
        "TypeFields": [
          {
            "Name": "delegator_bonded_minimum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "bond_extra_minimum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unbond_minimum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "rebond_minimum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unbond_record_maximum",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "validators_back_maximum",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "delegator_active_staking_maximum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "validators_reward_maximum",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "delegation_amount_minimum",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "delegators_maximum",
            "TypeName": "u16",
            "TypeId": 406
          },
          {
            "Name": "validators_maximum",
            "TypeName": "u16",
            "TypeId": 406
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "MinimumsMaximums"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 429
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 429
          }
        ],
        "TypeDef": "Variant"
      },
      "429": {
        "TypeFields": [
          {
            "Name": "unlock_delay",
            "TypeName": "TimeUnit",
            "TypeId": 393
          },
          {
            "Name": "leave_delegators_delay",
            "TypeName": "TimeUnit",
            "TypeId": 393
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "Delays"
        ],
        "TypeDef": "Composite"
      },
      "430": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 431
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 431
          }
        ],
        "TypeDef": "Variant"
      },
      "431": {
        "TypeIds": [
          394,
          139
        ],
        "TypeDef": "Tuple"
      },
      "432": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 433
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 433
          }
        ],
        "TypeDef": "Variant"
      },
      "433": {
        "TypeIds": [
          4,
          394
        ],
        "TypeDef": "Tuple"
      },
      "434": {
        "Variants": [
          {
            "Name": "update_xcm_dest_weight_and_fee",
            "TypeFields": [
              {
                "Name": "updates",
                "TypeName": "Vec<(CurrencyId, XcmOperationType, Weight, BalanceOf<T>)>",
                "TypeId": 435
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the xcm_dest_weight and fee for XCM operation of XcmInterface.",
              "",
              "Parameters:",
              "- `updates`: vec of tuple: (XcmOperationType, WeightChange, FeeChange)."
            ]
          },
          {
            "Name": "transfer_ethereum_assets",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_xcm_interface",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "435": {
        "TypeId": 436,
        "TypeDef": "Sequence"
      },
      "436": {
        "TypeIds": [
          307,
          437,
          10,
          6
        ],
        "TypeDef": "Tuple"
      },
      "437": {
        "Variants": [
          {
            "Name": "UmpContributeTransact",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StatemineTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Bond",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "WithdrawUnbonded",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "BondExtra",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Unbond",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Rebond",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Delegate",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Payout",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Liquidize",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "TransferBack",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "TransferTo",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Chill",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Undelegate",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "CancelLeave",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "XtokensTransferBack",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "ExecuteLeave",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "ConvertAsset",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "Vote",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "RemoveVote",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SupplementaryFee",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "EthereumTransfer",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "TeleportAssets",
            "TypeFields": null,
            "Index": 23
          }
        ],
        "Path": [
          "bifrost_primitives",
          "XcmOperationType"
        ],
        "TypeDef": "Variant"
      },
      "438": {
        "Variants": [
          {
            "Name": "vsbond_convert_to_vstoken",
            "TypeFields": [
              {
                "Name": "vs_bond_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "minimum_vstoken",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "vstoken_convert_to_vsbond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vstoken_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "minimum_vsbond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "set_exchange_fee",
            "TypeFields": [
              {
                "Name": "exchange_fee",
                "TypeName": "VstokenConversionExchangeFee<BalanceOf<T>>",
                "TypeId": 439
              }
            ],
            "Index": 2
          },
          {
            "Name": "set_exchange_rate",
            "TypeFields": [
              {
                "Name": "lease",
                "TypeName": "i32",
                "TypeId": 440
              },
              {
                "Name": "exchange_rate",
                "TypeName": "VstokenConversionExchangeRate",
                "TypeId": 441
              }
            ],
            "Index": 3
          },
          {
            "Name": "set_relaychain_lease",
            "TypeFields": [
              {
                "Name": "lease",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "bifrost_vstoken_conversion",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "439": {
        "TypeFields": [
          {
            "Name": "vstoken_exchange_fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "vsbond_exchange_fee_of_vstoken",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_vstoken_conversion",
          "primitives",
          "VstokenConversionExchangeFee"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "440": {
        "Primitive": "I32",
        "TypeDef": "Primitive"
      },
      "441": {
        "TypeFields": [
          {
            "Name": "vsbond_convert_to_vstoken",
            "TypeName": "Percent",
            "TypeId": 47
          },
          {
            "Name": "vstoken_convert_to_vsbond",
            "TypeName": "Percent",
            "TypeId": 47
          }
        ],
        "Path": [
          "bifrost_vstoken_conversion",
          "primitives",
          "VstokenConversionExchangeRate"
        ],
        "TypeDef": "Composite"
      },
      "442": {
        "Variants": [
          {
            "Name": "create_farming_pool",
            "TypeFields": [
              {
                "Name": "tokens_proportion",
                "TypeName": "Vec<(CurrencyIdOf<T>, Perbill)>",
                "TypeId": 443
              },
              {
                "Name": "basic_rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310
              },
              {
                "Name": "gauge_init",
                "TypeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>",
                "TypeId": 445
              },
              {
                "Name": "min_deposit_to_start",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "after_block_to_start",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "withdraw_limit_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "claim_limit_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "withdraw_limit_count",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a farming pool.",
              "",
              "The state of the pool will be set to `Ongoing` if the current block number is greater",
              "than or equal to the field `after_block_to_start` or the total shares of the pool is",
              "greater than or equal to the field `min_deposit_to_start`.",
              "",
              "- `tokens_proportion`: The proportion of each token in the pool.",
              "- `basic_rewards`: The basic reward of each token in the pool.",
              "- `gauge_init`: The initial gauge pool info.",
              "- `min_deposit_to_start`: The minimum deposit to start the pool.",
              "- `after_block_to_start`: The block number to start the pool.",
              "- `withdraw_limit_time`: The block number to limit the withdraw.",
              "- `claim_limit_time`: The block number to limit the claim.",
              "- `withdraw_limit_count`: The count to limit the withdraw."
            ]
          },
          {
            "Name": "charge",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310
              }
            ],
            "Index": 1,
            "Docs": [
              "Charge the pool.",
              "",
              "Transfer the rewards from the exchanger to the pool. It will charge the rewards to the",
              "gauge pool if the `if_gauge` is true, otherwise it will charge the rewards to the",
              "farming pool.",
              "",
              "- `pid`: The pool id.",
              "- `rewards`: The rewards to charge.",
              "- `if_gauge`: If the rewards are for the gauge pool."
            ]
          },
          {
            "Name": "deposit",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "add_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Deposit the pool.",
              "",
              "Mint the share to the exchanger and transfer the tokens to the pool. The state of the",
              "pool should be `Ongoing` or `Charged`. The current block number should be greater than",
              "or equal to the field `after_block_to_start` if the state of the pool is `Charged`.",
              "",
              "- `pid`: The pool id.",
              "- `add_value`: The value to deposit."
            ]
          },
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "remove_value",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 3,
            "Docs": [
              "Withdraw from the pool.",
              "",
              "The state of the pool should be `Ongoing`, `Charged` or `Dead`.",
              "User's withdraw limit count should be less than the field `withdraw_limit_count`.",
              "It will remove the share from the user, but not transfer the tokens to the user",
              "immediately.",
              "",
              "- `pid`: The pool id.",
              "- `remove_value`: The value to withdraw."
            ]
          },
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Claim the rewards from the pool.",
              "",
              "The state of the pool should be `Ongoing` or `Dead`.",
              "The user should not claim the rewards within the field `claim_limit_time`.",
              "It will claim the rewards to the user, and transfer the tokens to the user immediately.",
              "",
              "- `pid`: The pool id."
            ]
          },
          {
            "Name": "withdraw_claim",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Withdraw the claim from the pool.",
              "",
              "It will immediately transfer the withdrawable tokens to the user.",
              "",
              "- `pid`: The pool id."
            ]
          },
          {
            "Name": "force_retire_pool",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Force retire the pool.",
              "",
              "The state of the pool should be `Dead`.",
              "It will retire the pool and transfer the withdrawable tokens to the users.",
              "",
              "- `pid`: The pool id."
            ]
          },
          {
            "Name": "set_retire_limit",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set the retire limit.",
              "",
              "- `limit`: The retire limit."
            ]
          },
          {
            "Name": "close_pool",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Close the pool.",
              "",
              "Change the state of the pool to `Dead` before retiring the pool.",
              "",
              "- `pid`: The pool id."
            ]
          },
          {
            "Name": "reset_pool",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "basic_rewards",
                "TypeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>",
                "TypeId": 445
              },
              {
                "Name": "min_deposit_to_start",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "after_block_to_start",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "withdraw_limit_time",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "claim_limit_time",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "withdraw_limit_count",
                "TypeName": "Option<u8>",
                "TypeId": 391
              },
              {
                "Name": "gauge_init",
                "TypeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>",
                "TypeId": 445
              }
            ],
            "Index": 9,
            "Docs": [
              "Reuse retired pools",
              "",
              "- `pid`: The pool id.",
              "- `basic_rewards`: The basic reward of each token in the pool.",
              "- `min_deposit_to_start`: The minimum deposit to start the pool.",
              "- `after_block_to_start`: The block number to start the pool.",
              "- `withdraw_limit_time`: The block number to limit the withdraw.",
              "- `claim_limit_time`: The block number to limit the claim.",
              "- `withdraw_limit_count`: The count to limit the withdraw.",
              "- `gauge_init`: The initial gauge pool info."
            ]
          },
          {
            "Name": "kill_pool",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Kill the pool after retired.",
              "",
              "- `pid`: The pool id."
            ]
          },
          {
            "Name": "edit_pool",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "basic_rewards",
                "TypeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>",
                "TypeId": 445
              },
              {
                "Name": "withdraw_limit_time",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "claim_limit_time",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "gauge_basic_rewards",
                "TypeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>",
                "TypeId": 445
              },
              {
                "Name": "withdraw_limit_count",
                "TypeName": "Option<u8>",
                "TypeId": 391
              }
            ],
            "Index": 11,
            "Docs": [
              "Edit the pool at the state of `Retired`, `Ongoing`, `Charged` or `UnCharged`."
            ]
          },
          {
            "Name": "force_gauge_claim",
            "TypeFields": [
              {
                "Name": "gid",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "Force claim the rewards from the gauge pool.",
              "",
              "Control origin can force claim the rewards from the gauge pool to the users.",
              "",
              "- `gid`: The gauge pool id."
            ]
          },
          {
            "Name": "add_boost_pool_whitelist",
            "TypeFields": [
              {
                "Name": "whitelist",
                "TypeName": "Vec<PoolId>",
                "TypeId": 360
              }
            ],
            "Index": 14,
            "Docs": [
              "Add whitelist and take effect immediately",
              "",
              "- `whitelist`: The whitelist to add"
            ]
          },
          {
            "Name": "set_next_round_whitelist",
            "TypeFields": [
              {
                "Name": "whitelist",
                "TypeName": "Vec<PoolId>",
                "TypeId": 360
              }
            ],
            "Index": 15,
            "Docs": [
              "Whitelist for next round in effect",
              "",
              "- `whitelist`: The whitelist for the next round"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "vote_list",
                "TypeName": "Vec<(PoolId, Percent)>",
                "TypeId": 446
              }
            ],
            "Index": 16,
            "Docs": [
              "Vote for the pool",
              "",
              "- `vote_list`: The vote list for the pool"
            ]
          },
          {
            "Name": "start_boost_round",
            "TypeFields": [
              {
                "Name": "round_length",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 17,
            "Docs": [
              "Start the boost round",
              "",
              "- `round_length`: The length of the round"
            ]
          },
          {
            "Name": "end_boost_round",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Force end of boost round"
            ]
          },
          {
            "Name": "charge_boost",
            "TypeFields": [
              {
                "Name": "rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310
              }
            ],
            "Index": 19,
            "Docs": [
              "Charge the boost rewards to the FarmingBoost account",
              "",
              "- `rewards`: The rewards to charge"
            ]
          },
          {
            "Name": "refresh",
            "TypeFields": null,
            "Index": 20
          }
        ],
        "Path": [
          "bifrost_farming",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "443": {
        "TypeId": 444,
        "TypeDef": "Sequence"
      },
      "444": {
        "TypeIds": [
          307,
          48
        ],
        "TypeDef": "Tuple"
      },
      "445": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 310
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 310
          }
        ],
        "TypeDef": "Variant"
      },
      "446": {
        "TypeId": 447,
        "TypeDef": "Sequence"
      },
      "447": {
        "TypeIds": [
          4,
          47
        ],
        "TypeDef": "Tuple"
      },
      "448": {
        "Variants": [
          {
            "Name": "token_config",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "exec_delay",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "system_stakable_base",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 0,
            "Docs": [
              "Update token config���take effect when next round begins"
            ]
          },
          {
            "Name": "delete_token",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Update token config���take effect when next round begins"
            ]
          },
          {
            "Name": "refresh_token_info",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 2,
            "Docs": [
              "refresh token info���query farming pallet, and update TokenInfo, change to new",
              "config���ignore exec_delay, execute immediately"
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 3,
            "Docs": [
              "payout to receiving account"
            ]
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "449": {
        "Variants": [
          {
            "Name": "create_distribution",
            "TypeFields": [
              {
                "Name": "token_type",
                "TypeName": "BoundedVec<CurrencyId, ConstU32<32>>",
                "TypeId": 450
              },
              {
                "Name": "tokens_proportion",
                "TypeName": "BoundedVec<(AccountIdOf<T>, Perbill), ConstU32<256>>",
                "TypeId": 451
              },
              {
                "Name": "if_auto",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a distribution",
              "",
              "- `token_type`: The token types involved in this distribution",
              "- `tokens_proportion`: The proportion of the token distribution",
              "- `if_auto`: Whether the distribution is automatic"
            ]
          },
          {
            "Name": "edit_distribution",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4
              },
              {
                "Name": "token_type",
                "TypeName": "Option<BoundedVec<CurrencyId, ConstU32<32>>>",
                "TypeId": 454
              },
              {
                "Name": "tokens_proportion",
                "TypeName": "Option<BoundedVec<(AccountIdOf<T>, Perbill), ConstU32<256>>>",
                "TypeId": 455
              },
              {
                "Name": "if_auto",
                "TypeName": "Option<bool>",
                "TypeId": 425
              }
            ],
            "Index": 1,
            "Docs": [
              "Edit the distribution",
              "",
              "- `distribution_id`: Distribution ID",
              "- `token_type`: The token types involved in this distribution",
              "- `tokens_proportion`: The proportion of the token distribution",
              "- `if_auto`: Whether the distribution is automatic"
            ]
          },
          {
            "Name": "set_era_length",
            "TypeFields": [
              {
                "Name": "era_length",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the era length",
              "",
              "- `era_length`: The interval between distribution executions"
            ]
          },
          {
            "Name": "execute_distribute",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute the distribution",
              "",
              "- `distribution_id`: Distribution ID"
            ]
          },
          {
            "Name": "delete_distribution",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Delete the distribution",
              "",
              "- `distribution_id`: Distribution ID"
            ]
          },
          {
            "Name": "set_usd_config",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4
              },
              {
                "Name": "target_value",
                "TypeName": "u128",
                "TypeId": 6
              },
              {
                "Name": "interval",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "target_account_id",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "USD Standard Accumulation Logic Configuration, can be overridden by the governance",
              "",
              "- `distribution_id`: Distribution ID",
              "- `target_value`: Target's USD based value",
              "- `interval`: The interval of the cumulative clearing operation",
              "- `target_account_id`: When the cumulative dollar value falls below the target_value,",
              "  the funds will be transferred to the target_account_id"
            ]
          }
        ],
        "Path": [
          "bifrost_fee_share",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "450": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 453
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 452
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeIds": [
          0,
          48
        ],
        "TypeDef": "Tuple"
      },
      "453": {
        "TypeId": 452,
        "TypeDef": "Sequence"
      },
      "454": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 450
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 450
          }
        ],
        "TypeDef": "Variant"
      },
      "455": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 451
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 451
          }
        ],
        "TypeDef": "Variant"
      },
      "456": {
        "Variants": [
          {
            "Name": "cross_out",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 1,
            "Docs": [
              "Destroy some balance from an account and issue cross-out event."
            ]
          },
          {
            "Name": "register_linked_account",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "foreign_location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 132
              }
            ],
            "Index": 2
          },
          {
            "Name": "change_outer_linked_account",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "foreign_location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 132
              },
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "deregister_currency_for_cross_in_out",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 5
          },
          {
            "Name": "add_to_register_whitelist",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 8
          },
          {
            "Name": "remove_from_register_whitelist",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 9
          },
          {
            "Name": "set_crossing_minimum_amount",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "cross_in_minimum",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "cross_out_minimum",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10
          }
        ],
        "Path": [
          "bifrost_cross_in_out",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "457": {
        "Variants": [
          {
            "Name": "set_config",
            "TypeFields": [
              {
                "Name": "min_mint",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "min_block",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "max_positions_per_block",
                "TypeName": "Option<u32>",
                "TypeId": 87
              }
            ],
            "Index": 0,
            "Docs": [
              "Set configuration.",
              "",
              "Set the minimum number of tokens and minimum time that users can lock.",
              "",
              "- `min_mint`: The minimum mint balance",
              "- `min_block`: The minimum lockup time"
            ]
          },
          {
            "Name": "create_lock",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "unlock_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Create a lock.",
              "",
              "If the signer already has a position, the position will not be extended. it will be",
              "created a new position until the maximum number of positions is reached.",
              "",
              "- `value`: The amount of tokens to lock",
              "- `unlock_time`: The lockup time"
            ]
          },
          {
            "Name": "increase_amount",
            "TypeFields": [
              {
                "Name": "position",
                "TypeName": "PositionId",
                "TypeId": 6
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Increase the lock amount.",
              "",
              "If the signer does not have the position, it doesn't work and the position will not be",
              "created. Only the position existed and owned by the signer, the locking amount will be",
              "increased.",
              "",
              "- `position`: The lock position",
              "- `value`: The amount of tokens to increase"
            ]
          },
          {
            "Name": "increase_unlock_time",
            "TypeFields": [
              {
                "Name": "position",
                "TypeName": "PositionId",
                "TypeId": 6
              },
              {
                "Name": "time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Increase the unlock time.",
              "",
              "If the signer does not have the position, it doesn't work and the position will not be",
              "created. Only the position existed and owned by the signer, the locking time will be",
              "increased.",
              "",
              "- `position`: The lock position",
              "- `time`: Additional lock time"
            ]
          },
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "position",
                "TypeName": "PositionId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Withdraw the locked tokens after unlock time.",
              "",
              "- `position`: The lock position"
            ]
          },
          {
            "Name": "notify_rewards",
            "TypeFields": [
              {
                "Name": "incentive_from",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "rewards_duration",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<CurrencyIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 5,
            "Docs": [
              "Notify rewards.",
              "",
              "Set the incentive controller and rewards token type for future round. Reward duration",
              "should be one round interval. It will notify the rewards from incentive controller to",
              "the system account and start a new round immediately, and the next round will auto start",
              "at now + rewards_duration.",
              "",
              "- `incentive_from`: The incentive controller",
              "- `rewards_duration`: The rewards duration",
              "- `rewards`: The rewards"
            ]
          },
          {
            "Name": "get_rewards",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Get rewards for the signer."
            ]
          },
          {
            "Name": "redeem_unlock",
            "TypeFields": [
              {
                "Name": "position",
                "TypeName": "PositionId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Fast unlocking, handling fee applies",
              "",
              "When users want to redeem early regardless of cost, they can use this call.",
              "",
              "- `position`: The lock position"
            ]
          },
          {
            "Name": "set_markup_coefficient",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "markup",
                "TypeName": "FixedU128",
                "TypeId": 458
              },
              {
                "Name": "hardcap",
                "TypeName": "FixedU128",
                "TypeId": 458
              },
              {
                "Name": "rwi",
                "TypeName": "FixedU128",
                "TypeId": 458
              }
            ],
            "Index": 8,
            "Docs": [
              "Set markup configurations.",
              "",
              "- `currency_id`: The token type",
              "- `markup`: The markup coefficient",
              "- `hardcap`: The markup hardcap"
            ]
          },
          {
            "Name": "deposit_markup",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Deposit markup.",
              "",
              "Deposit the token to the system account for the markup.",
              "",
              "- `currency_id`: The token type",
              "- `value`: The amount of tokens to deposit"
            ]
          },
          {
            "Name": "withdraw_markup",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 10,
            "Docs": [
              "Withdraw markup.",
              "",
              "Withdraw the token from the system account for the markup.",
              "",
              "- `currency_id`: The token type"
            ]
          },
          {
            "Name": "refresh",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 11,
            "Docs": [
              "Refresh the markup.",
              "",
              "Any user can call this function to refresh the markup coefficient. The maximum number of",
              "accounts that can be refreshed in one execution is MarkupRefreshLimit.",
              "",
              "- `currency_id`: The token type"
            ]
          }
        ],
        "Path": [
          "bb_bnc",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "458": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "Variants": [
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "target_chain",
                "TypeName": "TargetChain<AccountIdOf<T>>",
                "TypeId": 460
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "vtoken mint and transfer to target chain",
              "Parameters:",
              "- `currency_id`: The currency id of the token to be minted",
              "- `currency_amount`: The amount of the token to be minted",
              "- `target_chain`: The target chain to transfer the token to",
              "- `remark`: The remark of the order",
              "- `channel_id`: The channel id of the order"
            ]
          },
          {
            "Name": "redeem",
            "TypeFields": [
              {
                "Name": "maybe_currency_id",
                "TypeName": "Option<CurrencyIdOf<T>>",
                "TypeId": 381
              },
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "target_chain",
                "TypeName": "TargetChain<AccountIdOf<T>>",
                "TypeId": 460
              }
            ],
            "Index": 2,
            "Docs": [
              "vtoken redeem and transfer to target chain",
              "Parameters:",
              "- `v_currency_id`: The currency id of the vtoken to be redeemed",
              "- `v_currency_amount`: The amount of the vtoken to be redeemed",
              "- `target_chain`: The target chain to transfer the token to"
            ]
          },
          {
            "Name": "add_whitelist",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461
              },
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 4,
            "Docs": [
              "Add the contract account to the whitelist",
              "Parameters:",
              "- `support_chain`: The support chain of Slpx",
              "- `contract_address`: The contract address of the contract"
            ]
          },
          {
            "Name": "remove_whitelist",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461
              },
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove the contract account from the whitelist",
              "Parameters:",
              "- `support_chain`: The support chain of Slpx",
              "- `contract_address`: The contract address of the contract"
            ]
          },
          {
            "Name": "set_execution_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "execution_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the execution fee for the currency",
              "Parameters:",
              "- `currency_id`: The currency id of the token",
              "- `execution_fee`: The execution fee of the token"
            ]
          },
          {
            "Name": "set_transfer_to_fee",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461
              },
              {
                "Name": "transfer_to_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Set the transfer fee for the currency",
              "Parameters:",
              "- `support_chain`: The support chain of Slpx",
              "- `transfer_to_fee`: The transfer fee of the token"
            ]
          },
          {
            "Name": "support_xcm_oracle",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "is_support",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the currency to support the Ethereum call switch",
              "Parameters:",
              "- `currency_id`: The currency id of the token",
              "- `is_support`: Whether to support the Ethereum call switch"
            ]
          },
          {
            "Name": "set_xcm_oracle_configuration",
            "TypeFields": [
              {
                "Name": "xcm_fee",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "xcm_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "contract",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 9,
            "Docs": [
              "Set the Ethereum call configuration",
              "Parameters:",
              "- `xcm_fee`: The XCM fee of Sending Xcm",
              "- `xcm_weight`: The XCM weight of Sending Xcm",
              "- `period`: The period of Sending Xcm",
              "- `contract`: The address of XcmOracle"
            ]
          },
          {
            "Name": "set_currency_support_xcm_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "is_support",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Set the currency to support the XCM fee",
              "Parameters:",
              "- `currency_id`: The currency id of the token",
              "- `is_support`: Whether to support the XCM fee"
            ]
          },
          {
            "Name": "set_delay_block",
            "TypeFields": [
              {
                "Name": "delay_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Set the delay block, Order will be executed after the delay block.",
              "Parameters:",
              "- `delay_block`: The delay block"
            ]
          },
          {
            "Name": "force_add_order",
            "TypeFields": [
              {
                "Name": "source_chain_caller",
                "TypeName": "OrderCaller<T::AccountId>",
                "TypeId": 462
              },
              {
                "Name": "bifrost_chain_caller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "target_chain",
                "TypeName": "TargetChain<AccountIdOf<T>>",
                "TypeId": 460
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "Force add order",
              "Parameters:",
              "- `source_chain_caller`: The caller of the source chain",
              "- `bifrost_chain_caller`: The caller of the bifrost chain",
              "- `currency_id`: The currency id of the token",
              "- `target_chain`: The target chain to transfer the token to",
              "- `remark`: The remark of the order",
              "- `channel_id`: The channel id of the order"
            ]
          },
          {
            "Name": "mint_with_channel_id",
            "TypeFields": [
              {
                "Name": "evm_caller",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "target_chain",
                "TypeName": "TargetChain<AccountIdOf<T>>",
                "TypeId": 460
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "vtoken mint and transfer to target chain",
              "Parameters:",
              "- `evm_caller`: The caller of the EVM contract",
              "- `currency_id`: The currency id of the token to be minted",
              "- `target_chain`: The target chain to transfer the token to",
              "- `remark`: The remark of the order",
              "- `channel_id`: The channel id of the order"
            ]
          },
          {
            "Name": "evm_create_order",
            "TypeFields": [
              {
                "Name": "source_chain_caller",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "source_chain_id",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "source_chain_block_number",
                "TypeName": "u128",
                "TypeId": 6
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "send_to",
                "TypeName": "TargetChain<T::AccountId>",
                "TypeId": 460
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281
              },
              {
                "Name": "channel_id",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "EVM create order",
              "Parameters:",
              "- `source_chain_caller`: The caller of the source chain",
              "- `source_chain_id`: The source chain id",
              "- `source_chain_block_number`: The source chain block number",
              "- `currency_id`: The currency id of the token",
              "- `currency_amount`: The currency amount of the token",
              "- `send_to`: The target chain to transfer the token to",
              "- `remark`: The remark of the order",
              "- `channel_id`: The channel id of the order"
            ]
          },
          {
            "Name": "set_hyperbridge_oracle",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "timeout",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "tokens",
                "TypeName": "BoundedVec<(CurrencyId, H160), ConstU32<10>>",
                "TypeId": 463
              },
              {
                "Name": "payer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Parameters:",
              "- `chain_id`: The chain id of destination chain",
              "- `to`: The address of destination contract",
              "- `timeout`: The timeout of the oracle",
              "- `payer`: The payer of the oracle",
              "- `fee`: The fee of the oracle",
              "- `tokens`: The tokens of the oracle"
            ]
          },
          {
            "Name": "set_hydration_oracle",
            "TypeFields": [
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "fee",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "tokens",
                "TypeName": "BoundedVec<(CurrencyId, Location, Location), ConstU32<10>>",
                "TypeId": 466
              }
            ],
            "Index": 16,
            "Docs": [
              "Set Hydration Oracle Config",
              "Parameters:",
              "- `period`: The period of Sending Xcm",
              "- `tokens`: The tokens of the oracle"
            ]
          },
          {
            "Name": "async_mint",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "from_chain_id",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "slpx_input_v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Execute Async Mint"
            ]
          },
          {
            "Name": "update_async_mint_config",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "AsyncMintConfiguration<BlockNumberFor<T>>",
                "TypeId": 469
              }
            ],
            "Index": 20,
            "Docs": [
              "Update Async Mint configuration"
            ]
          },
          {
            "Name": "force_increase_hyperbridge_reserve",
            "TypeFields": [
              {
                "Name": "from_chain_id",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "additional_v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "Correct vToken reserves for Hyperbridge",
              "",
              "Parameters:",
              "- `chain_id`: The target chain ID for correction",
              "- `currency_id`: The currency ID of the vToken",
              "- `amount`: The amount of vToken to mint and transfer"
            ]
          }
        ],
        "Path": [
          "bifrost_slpx",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "460": {
        "Variants": [
          {
            "Name": "Astar",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 0
          },
          {
            "Name": "Moonbeam",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 1
          },
          {
            "Name": "Hydradx",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "Interlay",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "Manta",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4
          },
          {
            "Name": "HyperBridge",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "bifrost_primitives",
          "TargetChain"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "461": {
        "Variants": [
          {
            "Name": "Astar",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moonbeam",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Hydradx",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Interlay",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Manta",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "bifrost_primitives",
          "SupportChain"
        ],
        "TypeDef": "Variant"
      },
      "462": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Evm",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "OrderCaller"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "463": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 465
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 464
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeIds": [
          307,
          125
        ],
        "TypeDef": "Tuple"
      },
      "465": {
        "TypeId": 464,
        "TypeDef": "Sequence"
      },
      "466": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 468
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 467
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "467": {
        "TypeIds": [
          307,
          108,
          108
        ],
        "TypeDef": "Tuple"
      },
      "468": {
        "TypeId": 467,
        "TypeDef": "Sequence"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "max_issuance_ratio",
            "TypeName": "FixedU128",
            "TypeId": 458
          },
          {
            "Name": "block_interval",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "AsyncMintConfiguration"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 0,
            "Docs": [
              "Introduce a new member.",
              "",
              "- `origin`: Must be the `AddOrigin`.",
              "- `who`: Account of non-member which will become a member.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "promote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 1,
            "Docs": [
              "Increment the rank of an existing member by one.",
              "",
              "- `origin`: Must be the `PromoteOrigin`.",
              "- `who`: Account of existing member.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "demote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 2,
            "Docs": [
              "Decrement the rank of an existing member by one. If the member is already at rank zero,",
              "then they are removed entirely.",
              "",
              "- `origin`: Must be the `DemoteOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "",
              "Weight: `O(1)`, less if the member's index is highest in its rank."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "min_rank",
                "TypeName": "Rank",
                "TypeId": 53
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the member entirely.",
              "",
              "- `origin`: Must be the `RemoveOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "- `min_rank`: The rank of the member or greater.",
              "",
              "Weight: `O(min_rank)`."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "aye",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "- `origin`: Must be `Signed` by a member account.",
              "- `poll`: Index of a poll which is ongoing.",
              "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
              "",
              "Transaction fees are be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "",
              "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
            ]
          },
          {
            "Name": "cleanup_poll",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove votes from the given poll. It must have ended.",
              "",
              "- `origin`: Must be `Signed` by any account.",
              "- `poll_index`: Index of a poll which is completed and for which votes continue to",
              "  exist.",
              "- `max`: Maximum number of vote items from remove in this call.",
              "",
              "Transaction fees are waived if the operation is successful.",
              "",
              "Weight `O(max)` (less if there are fewer items to remove than `max`)."
            ]
          },
          {
            "Name": "exchange_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "new_who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 6,
            "Docs": [
              "Exchanges a member with a new account and the same existing rank.",
              "",
              "- `origin`: Must be the `ExchangeOrigin`.",
              "- `who`: Account of existing member of rank greater than zero to be exchanged.",
              "- `new_who`: New Account of existing member of rank greater than zero to exchanged to."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "471": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 104
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<BlockNumberFor<T>>",
                "TypeId": 126
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53
              }
            ],
            "Index": 6,
            "Docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 127
              }
            ],
            "Index": 8,
            "Docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "472": {
        "Variants": [
          {
            "Name": "create_pool",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<AssetIdOf<T>>",
                "TypeId": 383
              },
              {
                "Name": "precisions",
                "TypeName": "Vec<AtLeast64BitUnsignedOf<T>>",
                "TypeId": 473
              },
              {
                "Name": "mint_fee",
                "TypeName": "AtLeast64BitUnsignedOf<T>",
                "TypeId": 6
              },
              {
                "Name": "swap_fee",
                "TypeName": "AtLeast64BitUnsignedOf<T>",
                "TypeId": 6
              },
              {
                "Name": "redeem_fee",
                "TypeName": "AtLeast64BitUnsignedOf<T>",
                "TypeId": 6
              },
              {
                "Name": "initial_a",
                "TypeName": "AtLeast64BitUnsignedOf<T>",
                "TypeId": 6
              },
              {
                "Name": "fee_recipient",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "yield_recipient",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "precision",
                "TypeName": "AtLeast64BitUnsignedOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Creates a new liquidity pool with the specified parameters."
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473
              },
              {
                "Name": "min_mint_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Adds liquidity to an existing pool."
            ]
          },
          {
            "Name": "swap",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "i",
                "TypeName": "PoolTokenIndex",
                "TypeId": 4
              },
              {
                "Name": "j",
                "TypeName": "PoolTokenIndex",
                "TypeId": 4
              },
              {
                "Name": "dx",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "min_dy",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Swaps one asset for another in a specified pool."
            ]
          },
          {
            "Name": "redeem_proportion",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "min_redeem_amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473
              }
            ],
            "Index": 3,
            "Docs": [
              "Redeems a proportion of assets from a liquidity pool."
            ]
          },
          {
            "Name": "redeem_single",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "i",
                "TypeName": "PoolTokenIndex",
                "TypeId": 4
              },
              {
                "Name": "min_redeem_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_length",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Redeems a single asset from a liquidity pool."
            ]
          },
          {
            "Name": "redeem_multi",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473
              },
              {
                "Name": "max_redeem_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Redeems multiple assets from a liquidity pool."
            ]
          },
          {
            "Name": "modify_a",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6
              },
              {
                "Name": "future_a_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Modifies the parameter 'a' of a pool at a future block."
            ]
          },
          {
            "Name": "modify_fees",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "mint_fee",
                "TypeName": "Option<T::AtLeast64BitUnsigned>",
                "TypeId": 371
              },
              {
                "Name": "swap_fee",
                "TypeName": "Option<T::AtLeast64BitUnsigned>",
                "TypeId": 371
              },
              {
                "Name": "redeem_fee",
                "TypeName": "Option<T::AtLeast64BitUnsigned>",
                "TypeId": 371
              }
            ],
            "Index": 7,
            "Docs": [
              "Modifies the fees of a specified liquidity pool."
            ]
          },
          {
            "Name": "modify_recipients",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "fee_recipient",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 403
              },
              {
                "Name": "yield_recipient",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 403
              }
            ],
            "Index": 8,
            "Docs": [
              "Modifies the fee and yield recipients of a liquidity pool."
            ]
          },
          {
            "Name": "edit_token_rate",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "token_rate_info",
                "TypeName": "Vec<\n(AssetIdOf<T>,\n(AtLeast64BitUnsignedOf<T>, AtLeast64BitUnsignedOf<T>),)>",
                "TypeId": 474
              }
            ],
            "Index": 9,
            "Docs": [
              "Edits the token rates for the specified pool."
            ]
          },
          {
            "Name": "config_vtoken_auto_refresh",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "hardcap",
                "TypeName": "Permill",
                "TypeId": 394
              }
            ],
            "Index": 10,
            "Docs": [
              "Configures the auto-refresh settings for a given vToken.",
              "",
              "This method sets the hard cap for the specified vToken's token rate.",
              "Only an authorized origin can call this function."
            ]
          },
          {
            "Name": "remove_vtoken_auto_refresh",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 11,
            "Docs": [
              "Removes the auto-refresh configuration for a given vToken.",
              "",
              "This method deletes the hard cap setting for the specified vToken.",
              "Only an authorized origin can call this function."
            ]
          }
        ],
        "Path": [
          "bifrost_stable_pool",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "473": {
        "TypeId": 6,
        "TypeDef": "Sequence"
      },
      "474": {
        "TypeId": 475,
        "TypeDef": "Sequence"
      },
      "475": {
        "TypeIds": [
          307,
          476
        ],
        "TypeDef": "Tuple"
      },
      "476": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "477": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "vtoken_vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 478
              }
            ],
            "Index": 0
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "remove_delegator_vote",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "class",
                "TypeName": "PollClass",
                "TypeId": 406
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 63
              },
              {
                "Name": "derivative_index",
                "TypeName": "DerivativeIndex",
                "TypeId": 406
              }
            ],
            "Index": 2
          },
          {
            "Name": "kill_referendum",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "add_delegator",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "derivative_index",
                "TypeName": "DerivativeIndex",
                "TypeId": 406
              }
            ],
            "Index": 4
          },
          {
            "Name": "set_referendum_status",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 63
              },
              {
                "Name": "info",
                "TypeName": "ReferendumInfoOf<T>",
                "TypeId": 479
              }
            ],
            "Index": 5
          },
          {
            "Name": "set_vote_locking_period",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "locking_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6
          },
          {
            "Name": "set_undeciding_timeout",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "undeciding_timeout",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7
          },
          {
            "Name": "notify_vote",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              }
            ],
            "Index": 8
          },
          {
            "Name": "notify_remove_delegator_vote",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              }
            ],
            "Index": 10
          },
          {
            "Name": "set_vote_cap_ratio",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vote_cap_ratio",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 11
          },
          {
            "Name": "update_referendum_vote_status",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 63
              },
              {
                "Name": "new_status",
                "TypeName": "ReferendumVoteStatus",
                "TypeId": 482
              }
            ],
            "Index": 12,
            "Docs": [
              "Updates the status of a referendum vote.",
              "",
              "Emits an `ReferendumStatusUpdated` event if successful."
            ]
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "478": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 51
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "SplitAbstain",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "abstain",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "479": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<Moment, Tally>",
                "TypeId": 481
              }
            ],
            "Index": 0
          },
          {
            "Name": "Completed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Tally",
            "TypeId": 480
          }
        ],
        "TypeDef": "Variant"
      },
      "480": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "support",
            "TypeName": "Votes",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Votes",
            "TypeId": 6
          },
          {
            "Name": "Total"
          }
        ],
        "TypeDef": "Composite"
      },
      "481": {
        "TypeFields": [
          {
            "Name": "submitted",
            "TypeName": "Option<Moment>",
            "TypeId": 87
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 480
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Tally",
            "TypeId": 480
          }
        ],
        "TypeDef": "Composite"
      },
      "482": {
        "Variants": [
          {
            "Name": "Approved",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Rejected",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "ReferendumVoteStatus"
        ],
        "TypeDef": "Variant"
      },
      "483": {
        "Variants": [
          {
            "Name": "add_market",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "market",
                "TypeName": "Market<BalanceOf<T>>",
                "TypeId": 484
              }
            ],
            "Index": 0,
            "Docs": [
              "Stores a new market and its related currency. Returns `Err` if a currency",
              "is not attached to an existent market.",
              "",
              "All provided market states must be `Pending`, otherwise an error will be returned.",
              "",
              "If a currency is already attached to a market, then the market will be replaced",
              "by the new provided value.",
              "",
              "The lend token id and asset id are bound, the lend token id of new provided market",
              "cannot be duplicated with the existing one, otherwise it will return",
              "`InvalidLendTokenId`.",
              "",
              "- `asset_id`: Market related currency",
              "- `market`: The market that is going to be stored"
            ]
          },
          {
            "Name": "activate_market",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Activates a market. Returns `Err` if the market currency does not exist.",
              "",
              "If the market is already activated, does nothing.",
              "",
              "- `asset_id`: Market related currency"
            ]
          },
          {
            "Name": "update_rate_model",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "rate_model",
                "TypeName": "InterestRateModel",
                "TypeId": 485
              }
            ],
            "Index": 2,
            "Docs": [
              "Updates the rate model of a stored market. Returns `Err` if the market",
              "currency does not exist or the rate model is invalid.",
              "",
              "- `asset_id`: Market related currency",
              "- `rate_model`: The new rate model to be updated"
            ]
          },
          {
            "Name": "update_market",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "collateral_factor",
                "TypeName": "Option<Ratio>",
                "TypeId": 489
              },
              {
                "Name": "liquidation_threshold",
                "TypeName": "Option<Ratio>",
                "TypeId": 489
              },
              {
                "Name": "reserve_factor",
                "TypeName": "Option<Ratio>",
                "TypeId": 489
              },
              {
                "Name": "close_factor",
                "TypeName": "Option<Ratio>",
                "TypeId": 489
              },
              {
                "Name": "liquidate_incentive_reserved_factor",
                "TypeName": "Option<Ratio>",
                "TypeId": 489
              },
              {
                "Name": "liquidate_incentive",
                "TypeName": "Option<Rate>",
                "TypeId": 490
              },
              {
                "Name": "supply_cap",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "borrow_cap",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 3,
            "Docs": [
              "Updates a stored market. Returns `Err` if the market currency does not exist.",
              "",
              "- `asset_id`: market related currency",
              "- `collateral_factor`: the collateral utilization ratio",
              "- `reserve_factor`: fraction of interest currently set aside for reserves",
              "- `close_factor`: maximum liquidation ratio at one time",
              "- `liquidate_incentive`: liquidation incentive ratio",
              "- `cap`: market capacity"
            ]
          },
          {
            "Name": "force_update_market",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "market",
                "TypeName": "Market<BalanceOf<T>>",
                "TypeId": 484
              }
            ],
            "Index": 4,
            "Docs": [
              "Force updates a stored market. Returns `Err` if the market currency",
              "does not exist.",
              "",
              "- `asset_id`: market related currency",
              "- `market`: the new market parameters"
            ]
          },
          {
            "Name": "add_reward",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Add reward for the pallet account.",
              "",
              "- `amount`: Reward amount added"
            ]
          },
          {
            "Name": "withdraw_missing_reward",
            "TypeFields": [
              {
                "Name": "target_account",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Withdraw reward token from pallet account.",
              "",
              "The origin must conform to `UpdateOrigin`.",
              "",
              "- `target_account`: account receive reward token.",
              "- `amount`: Withdraw amount"
            ]
          },
          {
            "Name": "update_market_reward_speed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "supply_reward_per_block",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "borrow_reward_per_block",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 7,
            "Docs": [
              "Updates reward speed for the specified market",
              "",
              "The origin must conform to `UpdateOrigin`.",
              "",
              "- `asset_id`: Market related currency",
              "- `reward_per_block`: reward amount per block."
            ]
          },
          {
            "Name": "claim_reward",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Claim reward from all market."
            ]
          },
          {
            "Name": "claim_reward_for_market",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 9,
            "Docs": [
              "Claim reward from the specified market.",
              "",
              "- `asset_id`: Market related currency"
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "mint_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 10,
            "Docs": [
              "Sender supplies assets into the market and receives internal supplies in exchange.",
              "",
              "- `asset_id`: the asset to be deposited.",
              "- `mint_amount`: the amount to be deposited."
            ]
          },
          {
            "Name": "redeem",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 11,
            "Docs": [
              "Sender redeems some of internal supplies in exchange for the underlying asset.",
              "",
              "- `asset_id`: the asset to be redeemed.",
              "- `redeem_amount`: the amount to be redeemed."
            ]
          },
          {
            "Name": "redeem_all",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 12,
            "Docs": [
              "Sender redeems all of internal supplies in exchange for the underlying asset.",
              "",
              "- `asset_id`: the asset to be redeemed."
            ]
          },
          {
            "Name": "borrow",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "borrow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 13,
            "Docs": [
              "Sender borrows assets from the protocol to their own address.",
              "",
              "- `asset_id`: the asset to be borrowed.",
              "- `borrow_amount`: the amount to be borrowed."
            ]
          },
          {
            "Name": "repay_borrow",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "repay_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 14,
            "Docs": [
              "Sender repays some of their debts.",
              "",
              "- `asset_id`: the asset to be repaid.",
              "- `repay_amount`: the amount to be repaid."
            ]
          },
          {
            "Name": "repay_borrow_all",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 15,
            "Docs": [
              "Sender repays all of their debts.",
              "",
              "- `asset_id`: the asset to be repaid."
            ]
          },
          {
            "Name": "collateral_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "enable",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 16,
            "Docs": [
              "Set the collateral asset.",
              "",
              "- `asset_id`: the asset to be set.",
              "- `enable`: turn on/off the collateral option."
            ]
          },
          {
            "Name": "liquidate_borrow",
            "TypeFields": [
              {
                "Name": "borrower",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "liquidation_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "repay_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "collateral_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 17,
            "Docs": [
              "The sender liquidates the borrower's collateral.",
              "",
              "- `borrower`: the borrower to be liquidated.",
              "- `liquidation_asset_id`: the assert to be liquidated.",
              "- `repay_amount`: the amount to be repaid borrow.",
              "- `collateral_asset_id`: The collateral to seize from the borrower."
            ]
          },
          {
            "Name": "add_reserves",
            "TypeFields": [
              {
                "Name": "payer",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "add_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 18,
            "Docs": [
              "Add reserves by transferring from payer.",
              "",
              "May only be called from `T::ReserveOrigin`.",
              "",
              "- `payer`: the payer account.",
              "- `asset_id`: the assets to be added.",
              "- `add_amount`: the amount to be added."
            ]
          },
          {
            "Name": "reduce_reserves",
            "TypeFields": [
              {
                "Name": "receiver",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "reduce_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 19,
            "Docs": [
              "Reduces reserves by transferring to receiver.",
              "",
              "May only be called from `T::ReserveOrigin`.",
              "",
              "- `receiver`: the receiver account.",
              "- `asset_id`: the assets to be reduced.",
              "- `reduce_amount`: the amount to be reduced."
            ]
          },
          {
            "Name": "reduce_incentive_reserves",
            "TypeFields": [
              {
                "Name": "receiver",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 62
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 20,
            "Docs": [
              "Sender redeems some of internal supplies in exchange for the underlying asset.",
              "",
              "- `asset_id`: the asset to be redeemed.",
              "- `redeem_amount`: the amount to be redeemed."
            ]
          },
          {
            "Name": "update_liquidation_free_collateral",
            "TypeFields": [
              {
                "Name": "collaterals",
                "TypeName": "Vec<AssetIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 21,
            "Docs": [
              "Update liquidation free collateral.",
              "",
              "The `assets` won't be counted when do general"
            ]
          },
          {
            "Name": "add_market_bond",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "market_bond",
                "TypeName": "Vec<AssetIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 22
          }
        ],
        "Path": [
          "lend_market",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "484": {
        "TypeFields": [
          {
            "Name": "collateral_factor",
            "TypeName": "Ratio",
            "TypeId": 394
          },
          {
            "Name": "liquidation_threshold",
            "TypeName": "Ratio",
            "TypeId": 394
          },
          {
            "Name": "reserve_factor",
            "TypeName": "Ratio",
            "TypeId": 394
          },
          {
            "Name": "close_factor",
            "TypeName": "Ratio",
            "TypeId": 394
          },
          {
            "Name": "liquidate_incentive",
            "TypeName": "Rate",
            "TypeId": 458
          },
          {
            "Name": "liquidate_incentive_reserved_factor",
            "TypeName": "Ratio",
            "TypeId": 394
          },
          {
            "Name": "rate_model",
            "TypeName": "InterestRateModel",
            "TypeId": 485
          },
          {
            "Name": "state",
            "TypeName": "MarketState",
            "TypeId": 488
          },
          {
            "Name": "supply_cap",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "borrow_cap",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lend_token_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "Market"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "485": {
        "Variants": [
          {
            "Name": "Jump",
            "TypeFields": [
              {
                "TypeName": "JumpModel",
                "TypeId": 486
              }
            ],
            "Index": 0
          },
          {
            "Name": "Curve",
            "TypeFields": [
              {
                "TypeName": "CurveModel",
                "TypeId": 487
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "lend_market",
          "rate_model",
          "InterestRateModel"
        ],
        "TypeDef": "Variant"
      },
      "486": {
        "TypeFields": [
          {
            "Name": "base_rate",
            "TypeName": "Rate",
            "TypeId": 458
          },
          {
            "Name": "jump_rate",
            "TypeName": "Rate",
            "TypeId": 458
          },
          {
            "Name": "full_rate",
            "TypeName": "Rate",
            "TypeId": 458
          },
          {
            "Name": "jump_utilization",
            "TypeName": "Ratio",
            "TypeId": 394
          }
        ],
        "Path": [
          "lend_market",
          "rate_model",
          "JumpModel"
        ],
        "TypeDef": "Composite"
      },
      "487": {
        "TypeFields": [
          {
            "Name": "base_rate",
            "TypeName": "Rate",
            "TypeId": 458
          }
        ],
        "Path": [
          "lend_market",
          "rate_model",
          "CurveModel"
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Supervision",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "MarketState"
        ],
        "TypeDef": "Variant"
      },
      "489": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 394
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 394
          }
        ],
        "TypeDef": "Variant"
      },
      "490": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 458
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 458
          }
        ],
        "TypeDef": "Variant"
      },
      "491": {
        "Variants": [
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "price",
                "TypeName": "Price",
                "TypeId": 458
              }
            ],
            "Index": 0,
            "Docs": [
              "Set emergency price"
            ]
          },
          {
            "Name": "reset_price",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Reset emergency price"
            ]
          },
          {
            "Name": "set_foreign_asset",
            "TypeFields": [
              {
                "Name": "foreign_asset_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "asset_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 2,
            "Docs": [
              "Set foreign vault token mapping"
            ]
          }
        ],
        "Path": [
          "pallet_prices",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "492": {
        "Variants": [
          {
            "Name": "feed_values",
            "TypeFields": [
              {
                "Name": "values",
                "TypeName": "BoundedVec<(T::OracleKey, T::OracleValue), T::MaxFeedValues>",
                "TypeId": 493
              }
            ],
            "Index": 0,
            "Docs": [
              "Feed the external value.",
              "",
              "Require authorized operator."
            ]
          }
        ],
        "Path": [
          "orml_oracle",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "493": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 495
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 494
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "494": {
        "TypeIds": [
          307,
          458
        ],
        "TypeDef": "Tuple"
      },
      "495": {
        "TypeId": 494,
        "TypeDef": "Sequence"
      },
      "496": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 92
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 62
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "497": {
        "Variants": [
          {
            "Name": "flash_loan_deposit",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "rate",
                "TypeName": "Rate",
                "TypeId": 458
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposit flash loan",
              "",
              "Using borrowed funds to increase the amount of liquid staking (yield-bearing) assets.",
              "",
              "- `asset_id`: The asset id of the token",
              "- `rate`: Leverage rate"
            ]
          }
        ],
        "Path": [
          "leverage_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "498": {
        "Variants": [
          {
            "Name": "register_channel",
            "TypeFields": [
              {
                "Name": "channel_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "receive_account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "remove_channel",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "update_channel_receive_account",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "receive_account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "set_channel_commission_token",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "rate",
                "TypeName": "Percent",
                "TypeId": 47
              }
            ],
            "Index": 3
          },
          {
            "Name": "set_commission_tokens",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "commission_token_op",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              }
            ],
            "Index": 4
          },
          {
            "Name": "claim_commissions",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              }
            ],
            "Index": 5
          },
          {
            "Name": "set_channel_vtoken_shares",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "shares",
                "TypeName": "Permill",
                "TypeId": 394
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "bifrost_channel_commission",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "499": {
        "Variants": [
          {
            "Name": "clouds_to_vebnc",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expected_min_vebnc",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "charge_vbnc",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_clouds_convert",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "500": {
        "Variants": [
          {
            "Name": "set_vtoken",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "min_swap_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "proportion",
                "TypeName": "Permill",
                "TypeId": 394
              },
              {
                "Name": "buyback_duration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "add_liquidity_duration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "if_auto",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "destruction_ratio",
                "TypeName": "Option<Permill>",
                "TypeId": 489
              },
              {
                "Name": "bias",
                "TypeName": "Permill",
                "TypeId": 394
              }
            ],
            "Index": 0,
            "Docs": [
              "Configuration for setting up buybacks and adding liquidity."
            ]
          },
          {
            "Name": "charge",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Charge the buyback account."
            ]
          },
          {
            "Name": "remove_vtoken",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 2,
            "Docs": [
              "Remove the configuration of the buyback."
            ]
          }
        ],
        "Path": [
          "bifrost_buy_back",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "501": {
        "Variants": [
          {
            "Name": "set_protocol_configuration",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "configuration",
                "TypeName": "ProtocolConfiguration<T::AccountId>",
                "TypeId": 503
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the XCM fee for a specific XCM task.",
              "",
              "Can only be called by governance",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `configuration`: The staking protocol configuration."
            ]
          },
          {
            "Name": "add_delegator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Option<Delegator<T::AccountId>>",
                "TypeId": 505
              }
            ],
            "Index": 1,
            "Docs": [
              "Add a delegator to the staking protocol.",
              "",
              "Can only be called by governance",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: If delegator is None, the delegator will be derived from sovereign",
              "  account."
            ]
          },
          {
            "Name": "remove_delegator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              }
            ],
            "Index": 2,
            "Docs": [
              "Remove a delegator from the staking protocol.",
              "",
              "Can only be called by governance",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Delegator that need to be removed."
            ]
          },
          {
            "Name": "add_validator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AccountId>",
                "TypeId": 507
              }
            ],
            "Index": 3,
            "Docs": [
              "Add a validator to the staking protocol.",
              "",
              "Can only be called by governance",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `validator`: Validator that need to be added."
            ]
          },
          {
            "Name": "remove_validator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AccountId>",
                "TypeId": 507
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove a validator from the staking protocol.",
              "",
              "Can only be called by governance",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `validator`: Validator that need to be removed."
            ]
          },
          {
            "Name": "set_ledger",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "ledger",
                "TypeName": "Ledger",
                "TypeId": 509
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the update token exchange rate limit for a specific staking protocol.",
              "",
              "Can only be called by governance.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `ledger`: Ledger that need to be set."
            ]
          },
          {
            "Name": "transfer_to",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              },
              {
                "Name": "amount",
                "TypeName": "Option<Balance>",
                "TypeId": 371
              },
              {
                "Name": "dest",
                "TypeName": "Option<u32>",
                "TypeId": 87
              },
              {
                "Name": "fee",
                "TypeName": "Option<Balance>",
                "TypeId": 371
              }
            ],
            "Index": 6,
            "Docs": [
              "Transfer the staking token to remote chain.",
              "Transfer the free balance of the Entrance Account to the selected delegator.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed."
            ]
          },
          {
            "Name": "transfer_back",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Transfer the staking token back from remote chain.",
              "Transfer the amount of tokens from the selected delegator back to the entrance account.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `amount`: The amount of tokens to transfer back."
            ]
          },
          {
            "Name": "update_ongoing_time_unit",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              },
              {
                "Name": "time_uint_option",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              }
            ],
            "Index": 8,
            "Docs": [
              "Update the ongoing time unit for a specific staking protocol.",
              "Update frequency controlled by update_time_unit_interval.",
              "Less than update_time_unit_interval will report an error.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `time_uint_option`: If time_uint is None, the ongoing time unit will be increased by",
              "  one. Otherwise, the ongoing time unit will be updated to the specified time unit."
            ]
          },
          {
            "Name": "update_token_exchange_rate",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502
              },
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "pool_value",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "delegator_value",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Update the token exchange rate for a specific staking protocol.",
              "Update frequency controlled by update_exchange_rate_interval.",
              "Amount max update for token pool * max_update_token_exchange_rate.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `amount`: The amount of tokens to update the token exchange rate."
            ]
          },
          {
            "Name": "astar_dapp_staking",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "task",
                "TypeName": "DappStaking<T::AccountId>",
                "TypeId": 515
              }
            ],
            "Index": 10,
            "Docs": [
              "Manipulate a delegator to perform Dapp staking related operations.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `task`: The Dapp staking task."
            ]
          },
          {
            "Name": "notify_astar_dapp_staking",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              }
            ],
            "Index": 11,
            "Docs": [
              "Processing Xcm message execution results.",
              "",
              "Can be called by governance or xcm origin."
            ]
          },
          {
            "Name": "ethereum_staking",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "task",
                "TypeName": "EthereumStaking",
                "TypeId": 516
              }
            ],
            "Index": 12,
            "Docs": [
              "Manipulate a delegator to perform Dapp staking related operations.",
              "",
              "Can be called by governance or staking protocol operator.",
              "",
              "Parameters",
              "- `staking_protocol`: Slp supports staking protocols.",
              "- `delegator`: Select the delegator which is existed.",
              "- `task`: The Dapp staking task."
            ]
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "502": {
        "Variants": [
          {
            "Name": "AstarDappStaking",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MoonbeamParachainStaking",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "PolkadotStaking",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "EthereumStaking",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "polkadot",
          "StakingProtocol"
        ],
        "TypeDef": "Variant"
      },
      "503": {
        "TypeFields": [
          {
            "Name": "xcm_task_fee",
            "TypeName": "XcmFee",
            "TypeId": 504
          },
          {
            "Name": "protocol_fee_rate",
            "TypeName": "Permill",
            "TypeId": 394
          },
          {
            "Name": "unlock_period",
            "TypeName": "TimeUnit",
            "TypeId": 393
          },
          {
            "Name": "operator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "max_update_token_exchange_rate",
            "TypeName": "Permill",
            "TypeId": 394
          },
          {
            "Name": "update_time_unit_interval",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "update_exchange_rate_interval",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "ProtocolConfiguration"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "504": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "XcmFee"
        ],
        "TypeDef": "Composite"
      },
      "505": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 506
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 506
          }
        ],
        "TypeDef": "Variant"
      },
      "506": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "Delegator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "507": {
        "Variants": [
          {
            "Name": "AstarDappStaking",
            "TypeFields": [
              {
                "TypeName": "AstarValidator<AccountId>",
                "TypeId": 508
              }
            ],
            "Index": 0
          },
          {
            "Name": "MoonbeamParachainStaking",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 1
          },
          {
            "Name": "PolkadotStaking",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "EthereumStaking",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "polkadot",
          "Validator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "508": {
        "Variants": [
          {
            "Name": "Evm",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wasm",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "astar_dapp_staking",
          "types",
          "AstarValidator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "509": {
        "Variants": [
          {
            "Name": "AstarDappStaking",
            "TypeFields": [
              {
                "TypeName": "AstarDappStakingLedger",
                "TypeId": 510
              }
            ],
            "Index": 0
          },
          {
            "Name": "EthereumStaking",
            "TypeFields": [
              {
                "TypeName": "EthereumStakingLedger",
                "TypeId": 514
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "polkadot",
          "Ledger"
        ],
        "TypeDef": "Variant"
      },
      "510": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlocking",
            "TypeName": "BoundedVec<AstarUnlockingRecord, ConstU32<8>>",
            "TypeId": 511
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "astar_dapp_staking",
          "types",
          "AstarDappStakingLedger"
        ],
        "TypeDef": "Composite"
      },
      "511": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 513
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 512
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "512": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "unlock_time",
            "TypeName": "TimeUnit",
            "TypeId": 393
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "astar_dapp_staking",
          "types",
          "AstarUnlockingRecord"
        ],
        "TypeDef": "Composite"
      },
      "513": {
        "TypeId": 512,
        "TypeDef": "Sequence"
      },
      "514": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 91
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "ethereum_staking",
          "types",
          "EthereumStakingLedger"
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "Variants": [
          {
            "Name": "Lock",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 7
          },
          {
            "Name": "Unlock",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 8
          },
          {
            "Name": "ClaimUnlocked",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "RelockUnlocking",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Stake",
            "TypeFields": [
              {
                "TypeName": "AstarValidator<AccountId>",
                "TypeId": 508
              },
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 11
          },
          {
            "Name": "Unstake",
            "TypeFields": [
              {
                "TypeName": "AstarValidator<AccountId>",
                "TypeId": 508
              },
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 12
          },
          {
            "Name": "ClaimStakerRewards",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ClaimBonusReward",
            "TypeFields": [
              {
                "TypeName": "AstarValidator<AccountId>",
                "TypeId": 508
              }
            ],
            "Index": 14
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "astar_dapp_staking",
          "types",
          "DappStaking"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "516": {
        "Variants": [
          {
            "Name": "Stake",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 0
          },
          {
            "Name": "Unstake",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 91
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "ethereum_staking",
          "types",
          "EthereumStaking"
        ],
        "TypeDef": "Variant"
      },
      "517": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "518": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "519": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "support",
            "TypeName": "Votes",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Votes",
            "TypeId": 6
          },
          {
            "Name": "Total"
          }
        ],
        "TypeDef": "Composite"
      },
      "520": {
        "Variants": [
          {
            "Name": "CallWhitelisted",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "WhitelistedCallRemoved",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1
          },
          {
            "Name": "WhitelistedCallDispatched",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResultWithPostInfo",
                "TypeId": 521
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "521": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 522
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 524
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 522
          },
          {
            "Name": "E",
            "TypeId": 524
          }
        ],
        "TypeDef": "Variant"
      },
      "522": {
        "TypeFields": [
          {
            "Name": "actual_weight",
            "TypeName": "Option<Weight>",
            "TypeId": 523
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 25
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PostDispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "523": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "524": {
        "TypeFields": [
          {
            "Name": "post_info",
            "TypeName": "Info",
            "TypeId": 522
          },
          {
            "Name": "error",
            "TypeName": "DispatchError",
            "TypeId": 26
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchErrorWithPostInfo"
        ],
        "TypeParams": [
          {
            "Name": "Info",
            "TypeId": 522
          }
        ],
        "TypeDef": "Composite"
      },
      "525": {
        "Variants": [
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "526": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "outcome",
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 527
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted."
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent."
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out."
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call."
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully."
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "actual_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "max_budgeted_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification",
              "could not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result."
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call."
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`."
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_location",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed."
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 211
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap."
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "result",
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included."
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention."
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 178
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it."
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "VersionedLocation",
                "TypeId": 131
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format."
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_querier",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "maybe_actual_querier",
                "TypeName": "Option<Location>",
                "TypeId": 206
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included."
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain send us XCM version change notifications."
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change",
              "notifications."
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "Name": "paying",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "fees",
                "TypeName": "Assets",
                "TypeId": 195
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`)."
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 211
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap"
            ]
          },
          {
            "Name": "VersionMigrationFinished",
            "TypeFields": [
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "A XCM version migration finished."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "527": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 178
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 178
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "528": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 527
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "529": {
        "Variants": [
          {
            "Name": "ProcessingFailed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "error",
                "TypeName": "ProcessMessageError",
                "TypeId": 530,
                "Docs": [
                  "The error that occurred.",
                  "",
                  "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ]
          },
          {
            "Name": "Processed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10,
                "Docs": [
                  "How much weight was used to process the message."
                ]
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 8,
                "Docs": [
                  "Whether the message was processed.",
                  "",
                  "Note that this does not mean that the underlying `MessageProcessor` was internally",
                  "successful. It *solely* means that the MQ pallet will treat this as a success",
                  "condition and discard the message. Any internal error needs to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Message is processed."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The page of the message."
                ]
              },
              {
                "Name": "message_index",
                "TypeName": "T::Size",
                "TypeId": 4,
                "Docs": [
                  "The index of the message within the page."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Message placed in overweight queue."
            ]
          },
          {
            "Name": "PageReaped",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 227,
                "Docs": [
                  "The queue of the page."
                ]
              },
              {
                "Name": "index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The index of the page."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "This page was reaped."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "530": {
        "Variants": [
          {
            "Name": "BadFormat",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Corrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Overweight",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "Yield",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "StackLimitReached",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "messages",
          "ProcessMessageError"
        ],
        "TypeDef": "Variant"
      },
      "531": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 532
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "532": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 285
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 26
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 285
          },
          {
            "Name": "E",
            "TypeId": 26
          }
        ],
        "TypeDef": "Variant"
      },
      "533": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 532
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "RetrySet",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 3,
            "Docs": [
              "Set a retry configuration for some task."
            ]
          },
          {
            "Name": "RetryCancelled",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel a retry configuration for some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              }
            ],
            "Index": 5,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              }
            ],
            "Index": 6,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "RetryFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              }
            ],
            "Index": 7,
            "Docs": [
              "The given task was unable to be retried since the agenda is full at that block or there",
              "was not enough weight to reschedule it."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 232
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 33
              }
            ],
            "Index": 8,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "534": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 532
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 53
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 235
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "535": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 238
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 238
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 532
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 238
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "536": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          },
          {
            "Name": "AuthorityAdded",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "A username authority was added."
            ]
          },
          {
            "Name": "AuthorityRemoved",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "A username authority was removed."
            ]
          },
          {
            "Name": "UsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 12,
            "Docs": [
              "A username was set for `who`."
            ]
          },
          {
            "Name": "UsernameQueued",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              },
              {
                "Name": "expiration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A username was queued, but `who` must accept it prior to `expiration`."
            ]
          },
          {
            "Name": "PreapprovalExpired",
            "TypeFields": [
              {
                "Name": "whose",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "A queued username passed its expiration without being claimed and was removed."
            ]
          },
          {
            "Name": "PrimaryUsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 15,
            "Docs": [
              "A username was set as a primary and can be looked up from `who`."
            ]
          },
          {
            "Name": "DanglingUsernameRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 281
              }
            ],
            "Index": 16,
            "Docs": [
              "A dangling username (as in, a username corresponding to an account that has removed its",
              "identity) has been removed."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "537": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "bifrost_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "538": {
        "Variants": [
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          },
          {
            "Name": "AssetSpendApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "asset_kind",
                "TypeName": "T::AssetKind",
                "TypeId": 285
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::Beneficiary",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "expire_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "A new asset spend proposal has been approved."
            ]
          },
          {
            "Name": "AssetSpendVoided",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "An approved spend was voided."
            ]
          },
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 285
              }
            ],
            "Index": 9,
            "Docs": [
              "A payment happened."
            ]
          },
          {
            "Name": "PaymentFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 285
              }
            ],
            "Index": 10,
            "Docs": [
              "A payment failed and can be retried."
            ]
          },
          {
            "Name": "SpendProcessed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "A spend was processed and removed from the storage. It might have been successfully",
              "paid or it may have expired."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "539": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "540": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "transaction_hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "exit_reason",
                "TypeName": "ExitReason",
                "TypeId": 541
              },
              {
                "Name": "extra_data",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "An ethereum transaction was successfully executed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "541": {
        "Variants": [
          {
            "Name": "Succeed",
            "TypeFields": [
              {
                "TypeName": "ExitSucceed",
                "TypeId": 542
              }
            ],
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 543
              }
            ],
            "Index": 1
          },
          {
            "Name": "Revert",
            "TypeFields": [
              {
                "TypeName": "ExitRevert",
                "TypeId": 547
              }
            ],
            "Index": 2
          },
          {
            "Name": "Fatal",
            "TypeFields": [
              {
                "TypeName": "ExitFatal",
                "TypeId": 548
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitReason"
        ],
        "TypeDef": "Variant"
      },
      "542": {
        "Variants": [
          {
            "Name": "Stopped",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Returned",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Suicided",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitSucceed"
        ],
        "TypeDef": "Variant"
      },
      "543": {
        "Variants": [
          {
            "Name": "StackUnderflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StackOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InvalidJump",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "InvalidRange",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DesignatedInvalid",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CallTooDeep",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CreateCollision",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CreateContractLimit",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidCode",
            "TypeFields": [
              {
                "TypeName": "Opcode",
                "TypeId": 544
              }
            ],
            "Index": 15
          },
          {
            "Name": "OutOfOffset",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "OutOfFund",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "PCUnderflow",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "CreateEmpty",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 545
              }
            ],
            "Index": 13
          },
          {
            "Name": "MaxNonce",
            "TypeFields": null,
            "Index": 14
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitError"
        ],
        "TypeDef": "Variant"
      },
      "544": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "evm_core",
          "opcode",
          "Opcode"
        ],
        "TypeDef": "Composite"
      },
      "545": {
        "TypeFields": [
          {
            "TypeId": 546
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 546
          }
        ],
        "TypeDef": "Composite"
      },
      "546": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "547": {
        "Variants": [
          {
            "Name": "Reverted",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitRevert"
        ],
        "TypeDef": "Variant"
      },
      "548": {
        "Variants": [
          {
            "Name": "NotSupported",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "UnhandledInterrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CallErrorAsFatal",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 543
              }
            ],
            "Index": 2
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 545
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitFatal"
        ],
        "TypeDef": "Variant"
      },
      "549": {
        "Variants": [
          {
            "Name": "Log",
            "TypeFields": [
              {
                "Name": "log",
                "TypeName": "Log",
                "TypeId": 550
              }
            ],
            "Index": 0,
            "Docs": [
              "Ethereum events from contracts."
            ]
          },
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 1,
            "Docs": [
              "A contract has been created at given address."
            ]
          },
          {
            "Name": "CreatedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 2,
            "Docs": [
              "A contract was attempted to be created, but the execution failed."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 3,
            "Docs": [
              "A contract has been executed successfully with states applied."
            ]
          },
          {
            "Name": "ExecutedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 4,
            "Docs": [
              "A contract has been executed with errors. States are reverted with only gas fees applied."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "550": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "H160",
            "TypeId": 125
          },
          {
            "Name": "topics",
            "TypeName": "Vec<H256>",
            "TypeId": 287
          },
          {
            "Name": "data",
            "TypeName": "Bytes",
            "TypeId": 14
          }
        ],
        "Path": [
          "ethereum",
          "log",
          "Log"
        ],
        "TypeDef": "Composite"
      },
      "551": {
        "Variants": [
          {
            "Name": "Bound",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 125
              }
            ],
            "Index": 0,
            "Docs": [
              "Binding was created."
            ]
          },
          {
            "Name": "DeployerAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "EvmAddress",
                "TypeId": 125
              }
            ],
            "Index": 1,
            "Docs": [
              "Deployer was added."
            ]
          },
          {
            "Name": "DeployerRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "EvmAddress",
                "TypeId": 125
              }
            ],
            "Index": 2,
            "Docs": [
              "Deployer was removed."
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "552": {
        "Variants": [
          {
            "Name": "TransferredAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 195
              },
              {
                "Name": "fee",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `Asset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "553": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below",
              "ExistentialDeposit, resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "status",
                "TypeName": "BalanceStatus",
                "TypeId": 40
              }
            ],
            "Index": 5,
            "Docs": [
              "Some reserved balance was repatriated (moved from reserved to",
              "another account)."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "TotalIssuanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "The total issuance of an currency has been set"
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some balances were withdrawn (e.g. pay for transaction fee)"
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some balances were slashed (e.g. due to mis-behavior)"
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Deposited some balance into an account"
            ]
          },
          {
            "Name": "LockSet",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 154
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some funds are locked"
            ]
          },
          {
            "Name": "LockRemoved",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 154
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "Some locked funds were unlocked"
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some free balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Some locked balance was freed."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "554": {
        "Variants": [
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "who",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposit success."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 197
              },
              {
                "Name": "who",
                "TypeName": "Location",
                "TypeId": 108
              }
            ],
            "Index": 1,
            "Docs": [
              "Withdraw success."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "555": {
        "Variants": [
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 192
              }
            ],
            "Index": 0,
            "Docs": [
              "XCM message sent. \\[to, message\\]"
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "556": {
        "Variants": [
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Foreign Asset",
              "Some assets were transferred. \\[asset_id, owner, target, amount\\]"
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were burned. \\[asset_id, owner, amount\\]"
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were minted. \\[asset_id, owner, amount\\]"
            ]
          },
          {
            "Name": "PairCreated",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              }
            ],
            "Index": 3,
            "Docs": [
              "Swap",
              "Create a trading pair. \\[asset_0, asset_1\\]"
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,",
              "mint_balance_lp\\]"
            ]
          },
          {
            "Name": "LiquidityRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,",
              "burn_balance_lp\\]"
            ]
          },
          {
            "Name": "AssetSwap",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 317
              },
              {
                "TypeName": "Vec<AssetBalance>",
                "TypeId": 473
              }
            ],
            "Index": 6,
            "Docs": [
              "Transact in trading \\[owner, recipient, swap_path, balances\\]"
            ]
          },
          {
            "Name": "TransferredToParachain",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 74
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Transfer by xcm",
              "Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"
            ]
          },
          {
            "Name": "BootstrapContribute",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"
            ]
          },
          {
            "Name": "BootstrapEnd",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,",
              "total_lp_supply]"
            ]
          },
          {
            "Name": "BootstrapCreated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,",
              "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\\]"
            ]
          },
          {
            "Name": "BootstrapClaim",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,",
              "asset_0_refund, asset_1_refund, lp_amount\\]"
            ]
          },
          {
            "Name": "BootstrapUpdate",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "Update a bootstrap pair. \\[caller, asset_0, asset_1,",
              "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\\]"
            ]
          },
          {
            "Name": "BootstrapRefund",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              },
              {
                "TypeName": "AssetBalance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,",
              "asset_0_refund, asset_1_refund\\]"
            ]
          },
          {
            "Name": "DistributeReward",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Vec<(T::AssetId, AssetBalance)>",
                "TypeId": 318
              }
            ],
            "Index": 14,
            "Docs": [
              "Bootstrap distribute some rewards to contributors."
            ]
          },
          {
            "Name": "ChargeReward",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Vec<(T::AssetId, AssetBalance)>",
                "TypeId": 318
              }
            ],
            "Index": 15,
            "Docs": [
              "Charge reward into a bootstrap."
            ]
          },
          {
            "Name": "WithdrawReward",
            "TypeFields": [
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 316
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "Withdraw all reward from a bootstrap."
            ]
          }
        ],
        "Path": [
          "zenlink_protocol",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "557": {
        "Variants": [
          {
            "Name": "StateMachineUpdated",
            "TypeFields": [
              {
                "Name": "state_machine_id",
                "TypeName": "StateMachineId",
                "TypeId": 331,
                "Docs": [
                  "State machine identifier"
                ]
              },
              {
                "Name": "latest_height",
                "TypeName": "u64",
                "TypeId": 12,
                "Docs": [
                  "State machine latest height"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Emitted when a state machine is successfully updated to a new height"
            ]
          },
          {
            "Name": "StateCommitmentVetoed",
            "TypeFields": [
              {
                "Name": "height",
                "TypeName": "StateMachineHeight",
                "TypeId": 330,
                "Docs": [
                  "State machine height"
                ]
              },
              {
                "Name": "fisherman",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281,
                "Docs": [
                  "responsible fisherman"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Emitted when a state commitment is vetoed by a fisherman"
            ]
          },
          {
            "Name": "ConsensusClientCreated",
            "TypeFields": [
              {
                "Name": "consensus_client_id",
                "TypeName": "ConsensusClientId",
                "TypeId": 18,
                "Docs": [
                  "Consensus client id"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Indicates that a consensus client has been created"
            ]
          },
          {
            "Name": "ConsensusClientFrozen",
            "TypeFields": [
              {
                "Name": "consensus_client_id",
                "TypeName": "ConsensusClientId",
                "TypeId": 18,
                "Docs": [
                  "Consensus client id"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Indicates that a consensus client has been created"
            ]
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "Name": "dest_chain",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Chain that this response will be routed to"
                ]
              },
              {
                "Name": "source_chain",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Source Chain for this response"
                ]
              },
              {
                "Name": "request_nonce",
                "TypeName": "u64",
                "TypeId": 12,
                "Docs": [
                  "Nonce for the request which this response is for"
                ]
              },
              {
                "Name": "commitment",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "Response Commitment"
                ]
              },
              {
                "Name": "req_commitment",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "Request commitment"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "An Outgoing Response has been deposited"
            ]
          },
          {
            "Name": "Request",
            "TypeFields": [
              {
                "Name": "dest_chain",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Chain that this request will be routed to"
                ]
              },
              {
                "Name": "source_chain",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Source Chain for request"
                ]
              },
              {
                "Name": "request_nonce",
                "TypeName": "u64",
                "TypeId": 12,
                "Docs": [
                  "Request nonce"
                ]
              },
              {
                "Name": "commitment",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "Commitment"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "An Outgoing Request has been deposited"
            ]
          },
          {
            "Name": "Errors",
            "TypeFields": [
              {
                "Name": "errors",
                "TypeName": "Vec<HandlingError>",
                "TypeId": 558,
                "Docs": [
                  "Message handling errors"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Some errors handling some ismp messages"
            ]
          },
          {
            "Name": "PostRequestHandled",
            "TypeFields": [
              {
                "TypeName": "RequestResponseHandled",
                "TypeId": 561
              }
            ],
            "Index": 7,
            "Docs": [
              "Post Request Handled"
            ]
          },
          {
            "Name": "PostResponseHandled",
            "TypeFields": [
              {
                "TypeName": "RequestResponseHandled",
                "TypeId": 561
              }
            ],
            "Index": 8,
            "Docs": [
              "Post Response Handled"
            ]
          },
          {
            "Name": "GetRequestHandled",
            "TypeFields": [
              {
                "TypeName": "RequestResponseHandled",
                "TypeId": 561
              }
            ],
            "Index": 9,
            "Docs": [
              "Get Response Handled"
            ]
          },
          {
            "Name": "PostRequestTimeoutHandled",
            "TypeFields": [
              {
                "TypeName": "TimeoutHandled",
                "TypeId": 562
              }
            ],
            "Index": 10,
            "Docs": [
              "Post request timeout handled"
            ]
          },
          {
            "Name": "PostResponseTimeoutHandled",
            "TypeFields": [
              {
                "TypeName": "TimeoutHandled",
                "TypeId": 562
              }
            ],
            "Index": 11,
            "Docs": [
              "Post response timeout handled"
            ]
          },
          {
            "Name": "GetRequestTimeoutHandled",
            "TypeFields": [
              {
                "TypeName": "TimeoutHandled",
                "TypeId": 562
              }
            ],
            "Index": 12,
            "Docs": [
              "Get request timeout handled"
            ]
          }
        ],
        "Path": [
          "pallet_ismp",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet Events"
        ]
      },
      "558": {
        "TypeId": 559,
        "TypeDef": "Sequence"
      },
      "559": {
        "TypeFields": [
          {
            "Name": "message",
            "TypeName": "BoundedVec<u8, ConstU32<1000>>",
            "TypeId": 560
          }
        ],
        "Path": [
          "pallet_ismp",
          "errors",
          "HandlingError"
        ],
        "TypeDef": "Composite"
      },
      "560": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "561": {
        "TypeFields": [
          {
            "Name": "commitment",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "relayer",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "ismp",
          "events",
          "RequestResponseHandled"
        ],
        "TypeDef": "Composite"
      },
      "562": {
        "TypeFields": [
          {
            "Name": "commitment",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "source",
            "TypeName": "StateMachine",
            "TypeId": 328
          },
          {
            "Name": "dest",
            "TypeName": "StateMachine",
            "TypeId": 328
          }
        ],
        "Path": [
          "ismp",
          "events",
          "TimeoutHandled"
        ],
        "TypeDef": "Composite"
      },
      "563": {
        "Variants": [
          {
            "Name": "ParachainsAdded",
            "TypeFields": [
              {
                "Name": "para_ids",
                "TypeName": "Vec<ParachainData>",
                "TypeId": 358,
                "Docs": [
                  "The parachains in question"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Parachains with the `para_ids` have been added to the whitelist"
            ]
          },
          {
            "Name": "ParachainsRemoved",
            "TypeFields": [
              {
                "Name": "para_ids",
                "TypeName": "Vec<u32>",
                "TypeId": 360,
                "Docs": [
                  "The parachains in question"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Parachains with the `para_ids` have been removed from the whitelist"
            ]
          }
        ],
        "Path": [
          "ismp_parachain",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events emitted by this pallet"
        ]
      },
      "564": {
        "Variants": [
          {
            "Name": "HostParamsUpdated",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "VersionedHostParams<<T as pallet_ismp::Config>::Balance>",
                "TypeId": 565,
                "Docs": [
                  "The old host params"
                ]
              },
              {
                "Name": "new",
                "TypeName": "VersionedHostParams<<T as pallet_ismp::Config>::Balance>",
                "TypeId": 565,
                "Docs": [
                  "The new host params"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Hyperbridge governance has now updated it's host params on this chain."
            ]
          },
          {
            "Name": "RelayerFeeWithdrawn",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "<T as pallet_ismp::Config>::Balance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was withdrawn"
                ]
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The withdrawal beneficiary"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A relayer has withdrawn some fees"
            ]
          },
          {
            "Name": "ProtocolRevenueWithdrawn",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "<T as pallet_ismp::Config>::Balance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was withdrawn"
                ]
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The withdrawal beneficiary"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Hyperbridge has withdrawn it's protocol revenue"
            ]
          }
        ],
        "Path": [
          "pallet_hyperbridge",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "565": {
        "Variants": [
          {
            "Name": "V1",
            "TypeFields": [
              {
                "TypeName": "SubstrateHostParams<Balance>",
                "TypeId": 566
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_hyperbridge",
          "VersionedHostParams"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "566": {
        "TypeFields": [
          {
            "Name": "default_per_byte_fee",
            "TypeName": "B",
            "TypeId": 6
          },
          {
            "Name": "per_byte_fees",
            "TypeName": "BTreeMap<StateMachine, B>",
            "TypeId": 567
          },
          {
            "Name": "asset_registration_fee",
            "TypeName": "B",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_hyperbridge",
          "SubstrateHostParams"
        ],
        "TypeParams": [
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "567": {
        "TypeFields": [
          {
            "TypeId": 568
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 328
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "568": {
        "TypeId": 569,
        "TypeDef": "Sequence"
      },
      "569": {
        "TypeIds": [
          328,
          6
        ],
        "TypeDef": "Tuple"
      },
      "570": {
        "Variants": [
          {
            "Name": "AssetTeleported",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Source account on the relaychain"
                ]
              },
              {
                "Name": "to",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "beneficiary account on destination"
                ]
              },
              {
                "Name": "asset_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "asset id on destination"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount transferred"
                ]
              },
              {
                "Name": "dest",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Destination chain"
                ]
              },
              {
                "Name": "commitment",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "Request commitment"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "An asset has been teleported"
            ]
          },
          {
            "Name": "AssetReceived",
            "TypeFields": [
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "beneficiary account on relaychain"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount transferred"
                ]
              },
              {
                "Name": "source",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Destination chain"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "An asset has been received and transferred to the beneficiary's account"
            ]
          },
          {
            "Name": "AssetRefunded",
            "TypeFields": [
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "beneficiary account on relaychain"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount transferred"
                ]
              },
              {
                "Name": "source",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Destination chain"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "An asset has been refunded and transferred to the beneficiary's account"
            ]
          },
          {
            "Name": "ERC6160AssetRegistrationDispatched",
            "TypeFields": [
              {
                "Name": "commitment",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "Request commitment"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "ERC6160 asset creation request dispatched to hyperbridge"
            ]
          },
          {
            "Name": "WhitelistReset",
            "TypeFields": [
              {
                "Name": "chain",
                "TypeName": "StateMachine",
                "TypeId": 328,
                "Docs": [
                  "Destination chain"
                ]
              },
              {
                "Name": "whitelist",
                "TypeName": "BoundedVec<Vec<u8>, T::MaxLengthLimit>",
                "TypeId": 571,
                "Docs": [
                  "Whitelist asress set"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Whitelist has been reset"
            ]
          }
        ],
        "Path": [
          "pallet_token_gateway",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet events that functions in this pallet can emit."
        ]
      },
      "571": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 59
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "572": {
        "Variants": [
          {
            "Name": "TransferTo",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target_chain",
                "TypeName": "TargetChain",
                "TypeId": 573
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer to another chain"
            ]
          },
          {
            "Name": "SetDefaultFeeCurrency",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              }
            ],
            "Index": 1,
            "Docs": [
              "Set user default fee currency"
            ]
          },
          {
            "Name": "SetFeeCurrencyList",
            "TypeFields": [
              {
                "Name": "currency_list",
                "TypeName": "BoundedVec<CurrencyId, T::MaxFeeCurrencyOrderListLen>",
                "TypeId": 382
              }
            ],
            "Index": 2,
            "Docs": [
              "Set universal fee currency order list"
            ]
          },
          {
            "Name": "SetExtraFee",
            "TypeFields": [
              {
                "Name": "raw_call_name",
                "TypeName": "RawCallName",
                "TypeId": 281,
                "Docs": [
                  "The raw call name to be set as the extra fee call."
                ]
              },
              {
                "Name": "fee_info",
                "TypeName": "Option<(CurrencyId, BalanceOf<T>, T::AccountId)>",
                "TypeId": 384,
                "Docs": [
                  "currency_id, fee_amount, receiver"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Set extra fee by call"
            ]
          }
        ],
        "Path": [
          "bifrost_flexible_fee",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "573": {
        "Variants": [
          {
            "Name": "AssetHub",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RelayChain",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_flexible_fee",
          "TargetChain"
        ],
        "TypeDef": "Variant"
      },
      "574": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new crowdloaning campaign. [fund_index]"
            ]
          },
          {
            "Name": "Contributing",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Contributing to a crowd sale. [who, fund_index, amount]"
            ]
          },
          {
            "Name": "Contributed",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Contributed to a crowd sale. [who, fund_index, amount]"
            ]
          },
          {
            "Name": "ContributeFailed",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Fail on contribute to crowd sale. [who, fund_index, amount]"
            ]
          },
          {
            "Name": "Withdrew",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Withdrew full balance of a contributor. [who, fund_index, amount]"
            ]
          },
          {
            "Name": "Refunded",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "refund to account. [who, fund_index,value]"
            ]
          },
          {
            "Name": "AllRefunded",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "all refund"
            ]
          },
          {
            "Name": "Redeemed",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "redeem to account. [who, fund_index, first_slot, last_slot, value]"
            ]
          },
          {
            "Name": "Edited",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Fund is edited. [fund_index]"
            ]
          },
          {
            "Name": "Dissolved",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Fund is dissolved. [fund_index]"
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "The vsToken/vsBond was be unlocked. [who, fund_index, value]"
            ]
          },
          {
            "Name": "AllUnlocked",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 11
          },
          {
            "Name": "Failed",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "Fund status change"
            ]
          },
          {
            "Name": "Success",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 13
          },
          {
            "Name": "Retired",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 14
          },
          {
            "Name": "End",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 15
          },
          {
            "Name": "Continued",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              }
            ],
            "Index": 16
          },
          {
            "Name": "RefundedDissolved",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              },
              {
                "TypeName": "LeasePeriod",
                "TypeId": 4
              }
            ],
            "Index": 17
          },
          {
            "Name": "Buyback",
            "TypeFields": [
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18
          },
          {
            "Name": "VstokenUnlocked",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 19
          },
          {
            "Name": "BuybackByStablePool",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "Name": "currency_id_in",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 20
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 4
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "if_mint",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 21
          },
          {
            "Name": "ReservationCancelled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 22
          },
          {
            "Name": "ReservationFullyHandled",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 23
          },
          {
            "Name": "ReservationHandled",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 4
              }
            ],
            "Index": 24
          }
        ],
        "Path": [
          "bifrost_salp",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "575": {
        "Variants": [
          {
            "Name": "AssetRegistered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIds",
                "TypeId": 576
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 390
              }
            ],
            "Index": 0,
            "Docs": [
              "The asset registered."
            ]
          },
          {
            "Name": "AssetUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIds",
                "TypeId": 576
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 390
              }
            ],
            "Index": 1,
            "Docs": [
              "The asset updated."
            ]
          },
          {
            "Name": "CurrencyIdRegistered",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 390
              }
            ],
            "Index": 2,
            "Docs": [
              "The CurrencyId registered."
            ]
          },
          {
            "Name": "LocationSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3,
            "Docs": [
              "Location Force set."
            ]
          },
          {
            "Name": "CurrencyIdUpdated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 390
              }
            ],
            "Index": 4,
            "Docs": [
              "The CurrencyId updated."
            ]
          }
        ],
        "Path": [
          "bifrost_asset_registry",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "576": {
        "Variants": [
          {
            "Name": "ForeignAssetId",
            "TypeFields": [
              {
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "NativeAssetId",
            "TypeFields": [
              {
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_primitives",
          "currency",
          "AssetIds"
        ],
        "TypeDef": "Variant"
      },
      "577": {
        "Variants": [
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "minter",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The minter account."
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id minted."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The currency amount minted."
                ]
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The v_currency amount minted."
                ]
              },
              {
                "Name": "mint_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The mint fee."
                ]
              },
              {
                "Name": "remark",
                "TypeName": "BoundedVec<u8, ConstU32<32>>",
                "TypeId": 281,
                "Docs": [
                  "The remark of minting."
                ]
              },
              {
                "Name": "channel_id",
                "TypeName": "Option<u32>",
                "TypeId": 87,
                "Docs": [
                  "The channel id of minting."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Vtoken minted successfully."
            ]
          },
          {
            "Name": "Redeemed",
            "TypeFields": [
              {
                "Name": "redeemer",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The redeemer account."
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id redeemed."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Will be received currency amount."
                ]
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The v_currency amount redeemed."
                ]
              },
              {
                "Name": "redeem_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The redeem fee."
                ]
              },
              {
                "Name": "unlock_id",
                "TypeName": "UnlockId",
                "TypeId": 4,
                "Docs": [
                  "The unlock_id of redeeming."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "\tVtoken redeemed successfully."
            ]
          },
          {
            "Name": "RedeemSuccess",
            "TypeFields": [
              {
                "Name": "redeemer",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The redeemer account."
                ]
              },
              {
                "Name": "unlock_id",
                "TypeName": "UnlockId",
                "TypeId": 4,
                "Docs": [
                  "The unlock_id redeemed."
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id redeemed."
                ]
              },
              {
                "Name": "to",
                "TypeName": "RedeemTo<AccountIdOf<T>>",
                "TypeId": 578,
                "Docs": [
                  "Will transfer to this account."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The redeem amount."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Process redeem successfully."
            ]
          },
          {
            "Name": "Rebonded",
            "TypeFields": [
              {
                "Name": "rebonder",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The rebonder account."
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id rebonded."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The currency amount rebonded."
                ]
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The v_currency amount rebonded."
                ]
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Mint fee"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Vtoken rebonded successfully."
            ]
          },
          {
            "Name": "RebondedByUnlockId",
            "TypeFields": [
              {
                "Name": "rebonder",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The rebonder account."
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id rebonded."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The currency amount rebonded."
                ]
              },
              {
                "Name": "v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The v_currency amount rebonded."
                ]
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Mint fee"
                ]
              },
              {
                "Name": "unlock_id",
                "TypeName": "UnlockId",
                "TypeId": 4,
                "Docs": [
                  "The unlock_id rebonded."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Vtoken rebonded by unlock_id successfully."
            ]
          },
          {
            "Name": "UnlockDurationSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set unlock duration."
                ]
              },
              {
                "Name": "unlock_duration",
                "TypeName": "TimeUnit",
                "TypeId": 393,
                "Docs": [
                  "The unlock duration set."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Set unlock duration."
            ]
          },
          {
            "Name": "MinimumMintSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set minimum mint amount."
                ]
              },
              {
                "Name": "minimum_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The minimum mint amount set."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Set minimum mint amount."
            ]
          },
          {
            "Name": "MinimumRedeemSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set minimum redeem amount."
                ]
              },
              {
                "Name": "minimum_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The minimum redeem amount set."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Set minimum redeem amount."
            ]
          },
          {
            "Name": "SupportRebondTokenAdded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id support rebond."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "Support rebond token added."
            ]
          },
          {
            "Name": "SupportRebondTokenRemoved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id remove support rebond."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "Support rebond token removed."
            ]
          },
          {
            "Name": "FeeSet",
            "TypeFields": [
              {
                "Name": "mint_fee",
                "TypeName": "Permill",
                "TypeId": 394,
                "Docs": [
                  "The mint fee rate set."
                ]
              },
              {
                "Name": "redeem_fee",
                "TypeName": "Permill",
                "TypeId": 394,
                "Docs": [
                  "The redeem fee rate set."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "Set mint fee and redeem fee."
            ]
          },
          {
            "Name": "HookIterationLimitSet",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Set hook iteration limit."
            ]
          },
          {
            "Name": "UnlockingTotalSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set unlock total amount."
                ]
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The unlock total amount set."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "Set unlock total amount."
            ]
          },
          {
            "Name": "MinTimeUnitSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set minimum time unit."
                ]
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393,
                "Docs": [
                  "The minimum time unit set."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "Set minimum time unit."
            ]
          },
          {
            "Name": "FastRedeemFailed",
            "TypeFields": [
              {
                "Name": "err",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 14,
            "Docs": [
              "Fast redeem failed."
            ]
          },
          {
            "Name": "SetOngoingTimeUnit",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The currency id set ongoing time unit."
                ]
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393,
                "Docs": [
                  "The ongoing time unit set."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Set ongoing time unit."
            ]
          },
          {
            "Name": "IncentivizedMinting",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "locked_vtoken_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "incentive_vtoken_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Incentivized minting."
            ]
          },
          {
            "Name": "VtokenIncentiveCoefSet",
            "TypeFields": [
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "coefficient",
                "TypeName": "Option<u128>",
                "TypeId": 371
              }
            ],
            "Index": 17,
            "Docs": [
              "Incentive coefficient set."
            ]
          },
          {
            "Name": "VtokenIncentiveLockBlocksSet",
            "TypeFields": [
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "blocks",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 18,
            "Docs": [
              "Incentive lock blocks set."
            ]
          },
          {
            "Name": "SupportedEthSet",
            "TypeFields": [
              {
                "Name": "eths",
                "TypeName": "BoundedVec<CurrencyId, ConstU32<10>>",
                "TypeId": 395
              }
            ],
            "Index": 19,
            "Docs": [
              "Set Supported eths."
            ]
          }
        ],
        "Path": [
          "bifrost_vtoken_minting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "578": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Astar",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "Moonbeam",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 2
          },
          {
            "Name": "Hydradx",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "Interlay",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4
          },
          {
            "Name": "Manta",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5
          },
          {
            "Name": "HyperBridge",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "bifrost_vtoken_minting",
          "traits",
          "RedeemTo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "579": {
        "Variants": [
          {
            "Name": "DelegatorInitialized",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 0
          },
          {
            "Name": "DelegatorBonded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "bonded_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 1
          },
          {
            "Name": "DelegatorBondExtra",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "extra_bonded_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 2
          },
          {
            "Name": "DelegatorUnbond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "unbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 3
          },
          {
            "Name": "DelegatorUnbondAll",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              }
            ],
            "Index": 4
          },
          {
            "Name": "DelegatorRebond",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "rebond_amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              },
              {
                "Name": "validator",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 185
              }
            ],
            "Index": 5
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "targets",
                "TypeName": "Option<Vec<MultiLocation>>",
                "TypeId": 401
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              }
            ],
            "Index": 6
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "targets",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              }
            ],
            "Index": 7
          },
          {
            "Name": "Payout",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "time_unit",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              }
            ],
            "Index": 8
          },
          {
            "Name": "Liquidize",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "time_unit",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              },
              {
                "Name": "amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371
              }
            ],
            "Index": 9
          },
          {
            "Name": "Chill",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "query_id_hash",
                "TypeName": "Hash<T>",
                "TypeId": 13
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransferBack",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "to",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 11
          },
          {
            "Name": "TransferTo",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "to",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 12
          },
          {
            "Name": "ConvertAsset",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 13
          },
          {
            "Name": "DelegatorAdded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 406
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 14
          },
          {
            "Name": "DelegatorRemoved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 15
          },
          {
            "Name": "ValidatorsAdded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 16
          },
          {
            "Name": "ValidatorsRemoved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 17
          },
          {
            "Name": "Refund",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 18
          },
          {
            "Name": "FundMoveFromExitToEntrance",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 19
          },
          {
            "Name": "TimeUnitUpdated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old",
                "TypeName": "Option<TimeUnit>",
                "TypeId": 402
              },
              {
                "Name": "new",
                "TypeName": "TimeUnit",
                "TypeId": 393
              }
            ],
            "Index": 20
          },
          {
            "Name": "PoolTokenIncreased",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 21
          },
          {
            "Name": "HostingFeeCharged",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 22
          },
          {
            "Name": "PoolTokenDecreased",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              }
            ],
            "Index": 23
          },
          {
            "Name": "FeeSupplemented",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 91
              },
              {
                "Name": "from",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "to",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 24
          },
          {
            "Name": "ValidatorsByDelegatorSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validators_list",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              },
              {
                "Name": "delegator_id",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 25
          },
          {
            "Name": "OperateOriginSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "operator",
                "TypeName": "Option<AccountIdOf<T>>",
                "TypeId": 403
              }
            ],
            "Index": 26
          },
          {
            "Name": "FeeSourceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who_and_fee",
                "TypeName": "Option<(MultiLocation, BalanceOf<T>)>",
                "TypeId": 404
              }
            ],
            "Index": 27
          },
          {
            "Name": "DelegatorLedgerSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delegator",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "ledger",
                "TypeName": "Option<Ledger<BalanceOf<T>>>",
                "TypeId": 407
              }
            ],
            "Index": 28
          },
          {
            "Name": "DelegatorLedgerQueryResponseConfirmed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "entry",
                "TypeName": "LedgerUpdateEntry<BalanceOf<T>>",
                "TypeId": 580
              }
            ],
            "Index": 29
          },
          {
            "Name": "DelegatorLedgerQueryResponseFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 30
          },
          {
            "Name": "ValidatorsByDelegatorQueryResponseConfirmed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "entry",
                "TypeName": "ValidatorsByDelegatorUpdateEntry",
                "TypeId": 585
              }
            ],
            "Index": 31
          },
          {
            "Name": "ValidatorsByDelegatorQueryResponseFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 32
          },
          {
            "Name": "MinimumsMaximumsSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "minimums_and_maximums",
                "TypeName": "Option<MinimumsMaximums<BalanceOf<T>>>",
                "TypeId": 426
              }
            ],
            "Index": 33
          },
          {
            "Name": "CurrencyDelaysSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "delays",
                "TypeName": "Option<Delays>",
                "TypeId": 428
              }
            ],
            "Index": 34
          },
          {
            "Name": "HostingFeesSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "fees",
                "TypeName": "Option<(Permill, MultiLocation)>",
                "TypeId": 430
              }
            ],
            "Index": 35
          },
          {
            "Name": "CurrencyTuneExchangeRateLimitSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "tune_exchange_rate_limit",
                "TypeName": "Option<(u32, Permill)>",
                "TypeId": 432
              }
            ],
            "Index": 36
          },
          {
            "Name": "OngoingTimeUnitUpdateIntervalSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "interval",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 87
              }
            ],
            "Index": 37
          },
          {
            "Name": "SupplementFeeAccountWhitelistAdded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 38
          },
          {
            "Name": "SupplementFeeAccountWhitelistRemoved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 39
          },
          {
            "Name": "ValidatorsReset",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_list",
                "TypeName": "Vec<MultiLocation>",
                "TypeId": 400
              }
            ],
            "Index": 40
          },
          {
            "Name": "ValidatorBoostListSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "validator_boost_list",
                "TypeName": "Vec<(MultiLocation, BlockNumberFor<T>)>",
                "TypeId": 587
              }
            ],
            "Index": 41
          },
          {
            "Name": "ValidatorBoostListAdded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "due_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 42
          },
          {
            "Name": "RemovedFromBoostList",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 43
          },
          {
            "Name": "OutdatedValidatorBoostListCleaned",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "page",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "remove_num",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "num_left",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 44
          },
          {
            "Name": "BurnFeeFailed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 45
          }
        ],
        "Path": [
          "bifrost_slp",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "580": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "SubstrateLedgerUpdateEntry<Balance>",
                "TypeId": 581
              }
            ],
            "Index": 0
          },
          {
            "Name": "Moonbeam",
            "TypeFields": [
              {
                "TypeName": "ParachainStakingLedgerUpdateEntry<Balance>",
                "TypeId": 583
              }
            ],
            "Index": 1
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "ParachainStakingLedgerUpdateEntry<Balance>",
                "TypeId": 583
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "LedgerUpdateEntry"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "581": {
        "TypeFields": [
          {
            "Name": "currency_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "delegator_id",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "update_operation",
            "TypeName": "SubstrateLedgerUpdateOperation",
            "TypeId": 582
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlock_time",
            "TypeName": "Option<TimeUnit>",
            "TypeId": 402
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "polkadot_primitives",
          "SubstrateLedgerUpdateEntry"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "582": {
        "Variants": [
          {
            "Name": "Bond",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unlock",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Rebond",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Liquidize",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "polkadot_primitives",
          "SubstrateLedgerUpdateOperation"
        ],
        "TypeDef": "Variant"
      },
      "583": {
        "TypeFields": [
          {
            "Name": "currency_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "delegator_id",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "validator_id",
            "TypeName": "Option<MultiLocation>",
            "TypeId": 185
          },
          {
            "Name": "update_operation",
            "TypeName": "ParachainStakingLedgerUpdateOperation",
            "TypeId": 584
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 91
          },
          {
            "Name": "unlock_time",
            "TypeName": "Option<TimeUnit>",
            "TypeId": 402
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "ParachainStakingLedgerUpdateEntry"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "584": {
        "Variants": [
          {
            "Name": "Bond",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "BondLess",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Revoke",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CancelRequest",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LeaveDelegator",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CancelLeave",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ExecuteLeave",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ExecuteRequest",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "parachain_staking_primitives",
          "ParachainStakingLedgerUpdateOperation"
        ],
        "TypeDef": "Variant"
      },
      "585": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "SubstrateValidatorsByDelegatorUpdateEntry",
                "TypeId": 586
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "ValidatorsByDelegatorUpdateEntry"
        ],
        "TypeDef": "Variant"
      },
      "586": {
        "TypeFields": [
          {
            "Name": "currency_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "delegator_id",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "validators",
            "TypeName": "Vec<MultiLocation>",
            "TypeId": 400
          }
        ],
        "Path": [
          "bifrost_slp",
          "primitives",
          "polkadot_primitives",
          "SubstrateValidatorsByDelegatorUpdateEntry"
        ],
        "TypeDef": "Composite"
      },
      "587": {
        "TypeId": 588,
        "TypeDef": "Sequence"
      },
      "588": {
        "TypeIds": [
          139,
          4
        ],
        "TypeDef": "Tuple"
      },
      "589": {
        "Variants": [
          {
            "Name": "XcmDestWeightAndFeeUpdated",
            "TypeFields": [
              {
                "TypeName": "XcmOperationType",
                "TypeId": 437
              },
              {
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "TransferredEthereumAssets",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_xcm_interface",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "590": {
        "Variants": [
          {
            "Name": "VsbondConvertToVsksm",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vsksm_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "VsksmConvertToVsbond",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vsksm_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "VsbondConvertToVsdot",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vsdot_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "VsdotConvertToVsbond",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vsdot_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3
          },
          {
            "Name": "VsbondConvertToVstoken",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vstoken_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4
          },
          {
            "Name": "VstokenConvertToVsbond",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vsbond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vstoken_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5
          },
          {
            "Name": "ExchangeFeeSet",
            "TypeFields": [
              {
                "Name": "exchange_fee",
                "TypeName": "VstokenConversionExchangeFee<BalanceOf<T>>",
                "TypeId": 439
              }
            ],
            "Index": 6
          },
          {
            "Name": "ExchangeRateSet",
            "TypeFields": [
              {
                "Name": "lease",
                "TypeName": "i32",
                "TypeId": 440
              },
              {
                "Name": "exchange_rate",
                "TypeName": "VstokenConversionExchangeRate",
                "TypeId": 441
              }
            ],
            "Index": 7
          },
          {
            "Name": "RelaychainLeaseSet",
            "TypeFields": [
              {
                "Name": "lease",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "bifrost_vstoken_conversion",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "591": {
        "Variants": [
          {
            "Name": "FarmingPoolCreated",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id of the new pool."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A farming pool is created."
            ]
          },
          {
            "Name": "FarmingPoolReset",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id of the pool to reset."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The farming pool is reset."
            ]
          },
          {
            "Name": "FarmingPoolClosed",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id of the pool to close."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The farming pool is closed."
            ]
          },
          {
            "Name": "FarmingPoolKilled",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id of the pool to kill."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "The farming pool is killed."
            ]
          },
          {
            "Name": "FarmingPoolEdited",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id of the pool to edit."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "The farming pool is edited."
            ]
          },
          {
            "Name": "Charged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who charged the pool."
                ]
              },
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Charged pool id."
                ]
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310,
                "Docs": [
                  "Charged rewards."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "The pool is charged."
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who deposited the pool."
                ]
              },
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Deposited pool id."
                ]
              },
              {
                "Name": "add_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Deposited value."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "The pool is deposited."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who withdrew the pool."
                ]
              },
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Withdrawn pool id."
                ]
              },
              {
                "Name": "remove_value",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 371,
                "Docs": [
                  "Withdrawn value."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "The pool is withdrawn."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who claimed the pool."
                ]
              },
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Claimed pool id."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "The pool is claimed."
            ]
          },
          {
            "Name": "WithdrawClaimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who withdrew claimed the pool."
                ]
              },
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Withdraw claimed pool id."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "The pool is withdrawn claimed."
            ]
          },
          {
            "Name": "GaugeWithdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who withdrew the gauge pool."
                ]
              },
              {
                "Name": "gid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Withdrawn gauge pool id."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "The gauge pool is withdrawn."
            ]
          },
          {
            "Name": "AllForceGaugeClaimed",
            "TypeFields": [
              {
                "Name": "gid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Last claimed gauge pool id."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "All gauge pools have been claimed."
            ]
          },
          {
            "Name": "PartiallyForceGaugeClaimed",
            "TypeFields": [
              {
                "Name": "gid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Last claimed gauge pool id."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "Partially gauge pools have been claimed."
            ]
          },
          {
            "Name": "AllRetired",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Last retired pool id."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "All pools is retired."
            ]
          },
          {
            "Name": "PartiallyRetired",
            "TypeFields": [
              {
                "Name": "pid",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "Last retired pool id."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Partially pools is retired."
            ]
          },
          {
            "Name": "RetireLimitSet",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The retire limit."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "The retire limit is set."
            ]
          },
          {
            "Name": "RoundEnd",
            "TypeFields": [
              {
                "Name": "total_votes",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "start_round",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The start block of the round."
                ]
              },
              {
                "Name": "end_round",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The end block of the round."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "The round has ended."
            ]
          },
          {
            "Name": "RoundStartError",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "DispatchError",
                "TypeId": 26,
                "Docs": [
                  "The error"
                ]
              }
            ],
            "Index": 17,
            "Docs": [
              "The round has started to fail."
            ]
          },
          {
            "Name": "RoundStart",
            "TypeFields": [
              {
                "Name": "round_length",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The length of the round."
                ]
              }
            ],
            "Index": 18,
            "Docs": [
              "The round has started."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who voted."
                ]
              },
              {
                "Name": "vote_list",
                "TypeName": "Vec<(PoolId, Percent)>",
                "TypeId": 446,
                "Docs": [
                  "Voted pool id."
                ]
              }
            ],
            "Index": 19,
            "Docs": [
              "The exchanger is voted."
            ]
          },
          {
            "Name": "BoostCharged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The exchanger who charged the boost pool."
                ]
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310,
                "Docs": [
                  "Charged boost pool id."
                ]
              }
            ],
            "Index": 20,
            "Docs": [
              "The boost pool is charged."
            ]
          }
        ],
        "Path": [
          "bifrost_farming",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "592": {
        "Variants": [
          {
            "Name": "NewRound",
            "TypeFields": [
              {
                "Name": "current",
                "TypeName": "RoundIndex",
                "TypeId": 4
              },
              {
                "Name": "first",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "length",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A new staking round has started.",
              "",
              "- `current`: The index of the current round.",
              "- `first`: The block number at which this round started.",
              "- `length`: The length of the round in blocks."
            ]
          },
          {
            "Name": "TokenConfigChanged",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "exec_delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "system_stakable_base",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Configuration of a token has been changed.",
              "",
              "- `token`: The identifier of the token whose configuration changed.",
              "- `exec_delay`: The delay in blocks before the changes take effect.",
              "- `system_stakable_base`: The base value of system-stakable assets."
            ]
          },
          {
            "Name": "DepositFailed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A deposit operation has failed.",
              "",
              "- `token`: The identifier of the token being deposited.",
              "- `amount`: The amount of the token to be deposited.",
              "- `system_stakable_amount`: The amount staked in the system-stakable pool.",
              "- `system_shadow_amount`: The amount shadow-staked in the system.",
              "- `pending_redeem_amount`: The amount pending redemption."
            ]
          },
          {
            "Name": "MintSuccess",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Minting operation succeeded.",
              "",
              "- `token`: The identifier of the token being minted.",
              "- `amount`: The amount of the token to be minted.",
              "- `system_stakable_amount`: The amount staked in the system-stakable pool.",
              "- `system_shadow_amount`: The amount shadow-staked in the system.",
              "- `pending_redeem_amount`: The amount pending redemption."
            ]
          },
          {
            "Name": "MintFailed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Minting operation failed.",
              "",
              "# Parameters",
              "(Same as MintSuccess)"
            ]
          },
          {
            "Name": "WithdrawSuccess",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Withdrawal operation succeeded.",
              "",
              "# Parameters",
              "(Same as MintSuccess)"
            ]
          },
          {
            "Name": "WithdrawFailed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Withdrawal operation failed.",
              "",
              "# Parameters",
              "(Same as MintSuccess)"
            ]
          },
          {
            "Name": "Redeemed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A redemption operation has succeeded.",
              "",
              "# Parameters",
              "(Same as MintSuccess)"
            ]
          },
          {
            "Name": "RedeemFailed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_stakable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "system_shadow_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pending_redeem_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A redemption operation has failed.",
              "",
              "# Parameters",
              "(Same as MintSuccess)"
            ]
          },
          {
            "Name": "VtokenNotFound",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 9,
            "Docs": [
              "The specified token could not be found.",
              "",
              "- `token`: The identifier of the token that was not found."
            ]
          },
          {
            "Name": "TokenInfoRefreshed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 10,
            "Docs": [
              "Token information has been refreshed.",
              "",
              "- `token`: The identifier of the token whose information was refreshed."
            ]
          },
          {
            "Name": "Payout",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "from",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "free",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vfree",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "shadow",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "A payout has been made.",
              "",
              "- `token`: The identifier of the token involved in the payout.",
              "- `vtoken`: The identifier of the vtoken involved.",
              "- `from`: The account from which the payout originated.",
              "- `to`: The account to which the payout was made.",
              "- `amount`: The total amount of the payout.",
              "- `free`: The amount of free balance after the payout.",
              "- `vfree`: The amount of vtoken free balance after the payout.",
              "- `shadow`: The shadow balance after the payout."
            ]
          },
          {
            "Name": "PayoutFailed",
            "TypeFields": [
              {
                "Name": "token",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 12,
            "Docs": [
              "payout error"
            ]
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "593": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              },
              {
                "Name": "info",
                "TypeName": "Info<AccountIdOf<T>>",
                "TypeId": 594,
                "Docs": [
                  "Distribution information"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A successful call of the `CreateDistribution` extrinsic will create this event."
            ]
          },
          {
            "Name": "Edited",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              },
              {
                "Name": "info",
                "TypeName": "Info<AccountIdOf<T>>",
                "TypeId": 594,
                "Docs": [
                  "Distribution information"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A successful call of the `EditDistribution` extrinsic will create this event."
            ]
          },
          {
            "Name": "EraLengthSet",
            "TypeFields": [
              {
                "Name": "era_length",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The interval between distribution executions"
                ]
              },
              {
                "Name": "next_era",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The block number of the next era"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A successful call of the `SetEraLength` extrinsic will create this event."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A successful call of the `ExecuteDistribute` extrinsic will create this event."
            ]
          },
          {
            "Name": "Deleted",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A successful call of the `DeleteDistribution` extrinsic will create this event."
            ]
          },
          {
            "Name": "ExecuteFailed",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              },
              {
                "Name": "info",
                "TypeName": "Info<AccountIdOf<T>>",
                "TypeId": 594,
                "Docs": [
                  "Distribution information"
                ]
              },
              {
                "Name": "next_era",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The block number of the next era"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A failed call of the `ExecuteDistribute` extrinsic will create this event."
            ]
          },
          {
            "Name": "USDConfigSet",
            "TypeFields": [
              {
                "Name": "distribution_id",
                "TypeName": "DistributionId",
                "TypeId": 4,
                "Docs": [
                  "Distribution ID"
                ]
              },
              {
                "Name": "info",
                "TypeName": "DollarStandardInfo<BlockNumberFor<T>, AccountIdOf<T>>",
                "TypeId": 595,
                "Docs": [
                  "USD standard information"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A successful call of the `SetUSDConfig` extrinsic will create this event."
            ]
          }
        ],
        "Path": [
          "bifrost_fee_share",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "594": {
        "TypeFields": [
          {
            "Name": "fee_share_account_id",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "token_type",
            "TypeName": "BoundedVec<CurrencyId, ConstU32<32>>",
            "TypeId": 450
          },
          {
            "Name": "if_auto",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "bifrost_fee_share",
          "Info"
        ],
        "TypeParams": [
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "595": {
        "TypeFields": [
          {
            "Name": "target_value",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "cumulative",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "target_account_id",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "target_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "interval",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_fee_share",
          "DollarStandardInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "596": {
        "Variants": [
          {
            "Name": "CrossedOut",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "crosser",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "location",
                "TypeName": "MultiLocation",
                "TypeId": 132
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Event emitted when a currency is successfully crossed out from a location."
            ]
          },
          {
            "Name": "CurrencyDeregistered",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Event emitted when a currency is deregistered."
            ]
          },
          {
            "Name": "LinkedAccountRegistered",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "foreign_location",
                "TypeName": "MultiLocation",
                "TypeId": 132
              }
            ],
            "Index": 2,
            "Docs": [
              "Event emitted when a linked account is successfully registered."
            ]
          },
          {
            "Name": "AddedToRegisterList",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 3,
            "Docs": [
              "Event emitted when an account is added to the register list."
            ]
          },
          {
            "Name": "RemovedFromRegisterList",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 4,
            "Docs": [
              "Event emitted when an account is removed from the register list."
            ]
          },
          {
            "Name": "CrossingMinimumAmountSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "cross_in_minimum",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "cross_out_minimum",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Event emitted when the crossing minimum amounts are set for a currency."
            ]
          }
        ],
        "Path": [
          "bifrost_cross_in_out",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "597": {
        "Variants": [
          {
            "Name": "ConfigSet",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "BbConfig<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 598
              }
            ],
            "Index": 0,
            "Docs": [
              "The minimum number of TokenType and minimum time that users can lock has been set."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "the user who mint"
                ]
              },
              {
                "Name": "position",
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "the position of this minting"
                ]
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "the value of this minting"
                ]
              },
              {
                "Name": "total_value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "total mint value for this user"
                ]
              },
              {
                "Name": "old_end",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "old withdrawable time"
                ]
              },
              {
                "Name": "end",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "new withdrawable time"
                ]
              },
              {
                "Name": "now",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "current time"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A successful call of the `create_lock` function."
            ]
          },
          {
            "Name": "Supply",
            "TypeFields": [
              {
                "Name": "supply_before",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The balance before the change."
                ]
              },
              {
                "Name": "supply",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The balance after the change."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Change in TokenType locked after calling."
            ]
          },
          {
            "Name": "LockCreated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Position owner"
                ]
              },
              {
                "Name": "position",
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Position ID"
                ]
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Locked value"
                ]
              },
              {
                "Name": "old_unlock_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "old withdrawable time"
                ]
              },
              {
                "Name": "unlock_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "new withdrawable time"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A position was created."
            ]
          },
          {
            "Name": "UnlockTimeIncreased",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Position owner"
                ]
              },
              {
                "Name": "position",
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Position ID"
                ]
              },
              {
                "Name": "old_unlock_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "Old withdrawable time"
                ]
              },
              {
                "Name": "unlock_time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "New withdrawable time"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A position was extended."
            ]
          },
          {
            "Name": "AmountIncreased",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Position owner"
                ]
              },
              {
                "Name": "position",
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Position ID"
                ]
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Increased value, not new locked value"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A position was increased."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Position owner"
                ]
              },
              {
                "Name": "position",
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Position ID"
                ]
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Withdrawn value"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A position was withdrawn."
            ]
          },
          {
            "Name": "IncentiveSet",
            "TypeFields": [
              {
                "Name": "incentive_config",
                "TypeName": "IncentiveConfig<CurrencyIdOf<T>, BalanceOf<T>, BlockNumberFor<T>\n, AccountIdOf<T>>",
                "TypeId": 599
              }
            ],
            "Index": 7,
            "Docs": [
              "Incentive config set."
            ]
          },
          {
            "Name": "RewardAdded",
            "TypeFields": [
              {
                "Name": "rewards",
                "TypeName": "Vec<CurrencyIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 8,
            "Docs": [
              "The rewards for this round have been added to the system account."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "rewards",
                "TypeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>",
                "TypeId": 310
              }
            ],
            "Index": 9,
            "Docs": [
              "The user has received the reward."
            ]
          },
          {
            "Name": "AllRefreshed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 10,
            "Docs": [
              "This currency_id has been refreshed."
            ]
          },
          {
            "Name": "PartiallyRefreshed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 11,
            "Docs": [
              "This currency_id has been partially refreshed."
            ]
          },
          {
            "Name": "NotifyRewardFailed",
            "TypeFields": [
              {
                "Name": "rewards",
                "TypeName": "Vec<CurrencyIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 12,
            "Docs": [
              "Notify reward failed."
            ]
          },
          {
            "Name": "MarkupDeposited",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The user who deposited"
                ]
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The token type of the deposit"
                ]
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount of currency_id to be deposited this time"
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "Markup has been deposited."
            ]
          },
          {
            "Name": "MarkupWithdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 14,
            "Docs": [
              "Markup has been withdrawn."
            ]
          }
        ],
        "Path": [
          "bb_bnc",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "598": {
        "TypeFields": [
          {
            "Name": "min_mint",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "min_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "max_positions_per_block",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "bb_bnc",
          "BbConfig"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "599": {
        "TypeFields": [
          {
            "Name": "reward_rate",
            "TypeName": "BTreeMap<CurrencyId, Balance>",
            "TypeId": 600
          },
          {
            "Name": "reward_per_token_stored",
            "TypeName": "BTreeMap<CurrencyId, Balance>",
            "TypeId": 600
          },
          {
            "Name": "rewards_duration",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_finish",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "last_update_time",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "incentive_controller",
            "TypeName": "Option<AccountId>",
            "TypeId": 403
          },
          {
            "Name": "last_reward",
            "TypeName": "Vec<CurrencyId>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bb_bnc",
          "incentive",
          "IncentiveConfig"
        ],
        "TypeParams": [
          {
            "Name": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "600": {
        "TypeFields": [
          {
            "TypeId": 310
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 307
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "601": {
        "Variants": [
          {
            "Name": "AddWhitelistAccountId",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461,
                "Docs": [
                  "The support chain of Slpx"
                ]
              },
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 125,
                "Docs": [
                  "The contract address of the contract"
                ]
              },
              {
                "Name": "evm_contract_account_id",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Xcm derivative account id"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Add the contract account to the whitelist"
            ]
          },
          {
            "Name": "RemoveWhitelistAccountId",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461,
                "Docs": [
                  "The support chain of Slpx"
                ]
              },
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 125,
                "Docs": [
                  "The contract address of the contract"
                ]
              },
              {
                "Name": "evm_contract_account_id",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Xcm derivative account id"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove the contract account from the whitelist"
            ]
          },
          {
            "Name": "SetTransferToFee",
            "TypeFields": [
              {
                "Name": "support_chain",
                "TypeName": "SupportChain",
                "TypeId": 461,
                "Docs": [
                  "The support chain of Slpx"
                ]
              },
              {
                "Name": "transfer_to_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The transfer fee of the token"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the transfer fee for the currency, only for Moonbeam"
            ]
          },
          {
            "Name": "SetExecutionFee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "execution_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The execution fee of the order"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the execution fee for the order"
            ]
          },
          {
            "Name": "SupportXcmOracle",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "is_support",
                "TypeName": "bool",
                "TypeId": 8,
                "Docs": [
                  "Whether to support the xcm oracle"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Support currency to xcm oracle"
            ]
          },
          {
            "Name": "SetXcmOracleConfiguration",
            "TypeFields": [
              {
                "Name": "xcm_fee",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "The XCM fee of Sending Xcm"
                ]
              },
              {
                "Name": "xcm_weight",
                "TypeName": "Weight",
                "TypeId": 10,
                "Docs": [
                  "The XCM weight of Sending Xcm"
                ]
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The period of Sending Xcm"
                ]
              },
              {
                "Name": "contract",
                "TypeName": "H160",
                "TypeId": 125,
                "Docs": [
                  "The address of XcmOracle"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the xcm oracle configuration"
            ]
          },
          {
            "Name": "XcmOracle",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "staking_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The currency amount of staking"
                ]
              },
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the vtoken"
                ]
              },
              {
                "Name": "v_currency_total_supply",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The currency total supply of vtoken"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Send Xcm message"
            ]
          },
          {
            "Name": "SetCurrencyToSupportXcmFee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "is_support",
                "TypeName": "bool",
                "TypeId": 8,
                "Docs": [
                  "Whether to support the XCM fee"
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Set the currency to support the XCM fee"
            ]
          },
          {
            "Name": "SetDelayBlock",
            "TypeFields": [
              {
                "Name": "delay_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The delay block"
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the delay block"
            ]
          },
          {
            "Name": "CreateOrder",
            "TypeFields": [
              {
                "Name": "order",
                "TypeName": "Order<AccountIdOf<T>, CurrencyIdOf<T>, BalanceOf<T>,\nBlockNumberFor<T>>",
                "TypeId": 602
              }
            ],
            "Index": 9,
            "Docs": [
              "Create order"
            ]
          },
          {
            "Name": "OrderHandled",
            "TypeFields": [
              {
                "Name": "order",
                "TypeName": "Order<AccountIdOf<T>, CurrencyIdOf<T>, BalanceOf<T>,\nBlockNumberFor<T>>",
                "TypeId": 602
              }
            ],
            "Index": 10,
            "Docs": [
              "Order handled"
            ]
          },
          {
            "Name": "OrderFailed",
            "TypeFields": [
              {
                "Name": "order",
                "TypeName": "Order<AccountIdOf<T>, CurrencyIdOf<T>, BalanceOf<T>,\nBlockNumberFor<T>>",
                "TypeId": 602
              }
            ],
            "Index": 11,
            "Docs": [
              "Order failed"
            ]
          },
          {
            "Name": "XcmOracleFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 12,
            "Docs": [
              "Xcm oracle failed"
            ]
          },
          {
            "Name": "InsufficientAssets",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Withdraw xcm fee"
            ]
          },
          {
            "Name": "SetHyperBridgeOracleConfig",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 125
              },
              {
                "Name": "timeout",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "tokens",
                "TypeName": "BoundedVec<(CurrencyId, H160), ConstU32<10>>",
                "TypeId": 463
              }
            ],
            "Index": 14,
            "Docs": [
              "Set HyperBridge Oracle Config"
            ]
          },
          {
            "Name": "SetHydrationOracleConfig",
            "TypeFields": [
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "tokens",
                "TypeName": "BoundedVec<(CurrencyId, Location, Location), ConstU32<10>>",
                "TypeId": 466
              }
            ],
            "Index": 15,
            "Docs": [
              "Set Hydration Oracle Config"
            ]
          },
          {
            "Name": "AsyncMintExecuted",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "The caller of the async mint"
                ]
              },
              {
                "Name": "from_chain_id",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The chain id of the target chain"
                ]
              },
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "minted_v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount of vToken minted"
                ]
              },
              {
                "Name": "additional_v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount of vToken issued"
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Async Mint executed"
            ]
          },
          {
            "Name": "AsyncMintConfigUpdated",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "AsyncMintConfiguration<BlockNumberFor<T>>",
                "TypeId": 469,
                "Docs": [
                  "The new configuration"
                ]
              }
            ],
            "Index": 17,
            "Docs": [
              "Async Mint configuration updated"
            ]
          },
          {
            "Name": "AsyncMintExecutionFailed",
            "TypeFields": [
              {
                "Name": "from_chain_id",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The chain id of the target chain"
                ]
              },
              {
                "Name": "v_currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The currency id of the token"
                ]
              },
              {
                "Name": "additional_v_currency_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The v_currency amount of the token"
                ]
              }
            ],
            "Index": 18,
            "Docs": [
              "Async Mint execution failed"
            ]
          }
        ],
        "Path": [
          "bifrost_slpx",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "602": {
        "TypeFields": [
          {
            "Name": "source_chain_caller",
            "TypeName": "OrderCaller<AccountId>",
            "TypeId": 462
          },
          {
            "Name": "source_chain_id",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "source_chain_block_number",
            "TypeName": "Option<u128>",
            "TypeId": 371
          },
          {
            "Name": "bifrost_chain_caller",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "derivative_account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "create_block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "currency_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "currency_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "v_currency_id",
            "TypeName": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "v_currency_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "order_type",
            "TypeName": "OrderType",
            "TypeId": 603
          },
          {
            "Name": "remark",
            "TypeName": "BoundedVec<u8, ConstU32<32>>",
            "TypeId": 281
          },
          {
            "Name": "target_chain",
            "TypeName": "TargetChain<AccountId>",
            "TypeId": 460
          },
          {
            "Name": "channel_id",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "CurrencyId",
            "TypeId": 307
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "603": {
        "Variants": [
          {
            "Name": "Mint",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Redeem",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "OrderType"
        ],
        "TypeDef": "Variant"
      },
      "604": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A member `who` has been added."
            ]
          },
          {
            "Name": "RankChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 53
              }
            ],
            "Index": 1,
            "Docs": [
              "The member `who`se rank has been changed to the given `rank`."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 53
              }
            ],
            "Index": 2,
            "Docs": [
              "The member `who` of given `rank` has been removed from the collective."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "VoteRecord",
                "TypeId": 605
              },
              {
                "Name": "tally",
                "TypeName": "TallyOf<T, I>",
                "TypeId": 606
              }
            ],
            "Index": 3,
            "Docs": [
              "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
              "`tally`."
            ]
          },
          {
            "Name": "MemberExchanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The member `who` had their `AccountId` changed to `new_who`."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "605": {
        "Variants": [
          {
            "Name": "Aye",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Nay",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "VoteRecord"
        ],
        "TypeDef": "Variant"
      },
      "606": {
        "TypeFields": [
          {
            "Name": "bare_ayes",
            "TypeName": "MemberIndex",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 4
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          },
          {
            "Name": "M"
          }
        ],
        "TypeDef": "Composite"
      },
      "607": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 53,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 54,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 606,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "608": {
        "Variants": [
          {
            "Name": "CreatePool",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "swap_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The system account of the pool."
                ]
              },
              {
                "Name": "pallet_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Pallet id."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A new pool is created."
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "minter",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who added the liquidity."
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "input_amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The input amounts of the assets."
                ]
              },
              {
                "Name": "min_output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "Expected minimum output amount."
                ]
              },
              {
                "Name": "balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Balances data."
                ]
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The total supply of the pool asset."
                ]
              },
              {
                "Name": "fee_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "fee amount of the pool asset."
                ]
              },
              {
                "Name": "output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "Actual minimum output amount."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Liquidity is added to the pool."
            ]
          },
          {
            "Name": "TokenSwapped",
            "TypeFields": [
              {
                "Name": "swapper",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who swapped the token."
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "input_asset",
                "TypeName": "T::AssetId",
                "TypeId": 307,
                "Docs": [
                  "The input asset type."
                ]
              },
              {
                "Name": "output_asset",
                "TypeName": "T::AssetId",
                "TypeId": 307,
                "Docs": [
                  "The output asset type."
                ]
              },
              {
                "Name": "input_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The input amount of the input asset."
                ]
              },
              {
                "Name": "min_output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The expected minimum output amount of the output asset."
                ]
              },
              {
                "Name": "balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Balances data."
                ]
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The total supply of the pool asset."
                ]
              },
              {
                "Name": "output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "Actual output amount of the output asset."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Token is swapped."
            ]
          },
          {
            "Name": "RedeemedProportion",
            "TypeFields": [
              {
                "Name": "redeemer",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who redeemed the token."
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "input_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The input amount of the pool asset."
                ]
              },
              {
                "Name": "min_output_amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The expected minimum output amounts of the assets."
                ]
              },
              {
                "Name": "balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Balances data."
                ]
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The total supply of the pool asset."
                ]
              },
              {
                "Name": "fee_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "fee amount of the pool asset."
                ]
              },
              {
                "Name": "output_amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Actual output amounts of the assets."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Token is redeemed by proportion."
            ]
          },
          {
            "Name": "RedeemedSingle",
            "TypeFields": [
              {
                "Name": "redeemer",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who redeemed the token."
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "input_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The input asset type."
                ]
              },
              {
                "Name": "output_asset",
                "TypeName": "T::AssetId",
                "TypeId": 307,
                "Docs": [
                  "The output asset type."
                ]
              },
              {
                "Name": "min_output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The expected minimum output amount of the output asset."
                ]
              },
              {
                "Name": "balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Balances data."
                ]
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The total supply of the pool asset."
                ]
              },
              {
                "Name": "fee_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "fee amount of the pool asset."
                ]
              },
              {
                "Name": "output_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "Actual output amount of the output asset."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Token is redeemed by single asset."
            ]
          },
          {
            "Name": "RedeemedMulti",
            "TypeFields": [
              {
                "Name": "redeemer",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who redeemed the token."
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "output_amounts",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The expected output amounts."
                ]
              },
              {
                "Name": "max_input_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The maximum input amount of the pool asset to get the output amounts."
                ]
              },
              {
                "Name": "balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "Balances data."
                ]
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The total supply of the pool asset."
                ]
              },
              {
                "Name": "fee_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "fee amount of the pool asset."
                ]
              },
              {
                "Name": "input_amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "Actual input amount of the pool asset."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Token is redeemed by multiple assets."
            ]
          },
          {
            "Name": "BalanceUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "old_balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The old balances."
                ]
              },
              {
                "Name": "new_balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The new balances."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "The pool field balances is updated."
            ]
          },
          {
            "Name": "YieldCollected",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "old_total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The old total supply of the pool asset."
                ]
              },
              {
                "Name": "new_total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The new total supply of the pool asset."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who collected the yield."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The amount of the pool asset collected."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Yield is collected."
            ]
          },
          {
            "Name": "FeeCollected",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "a",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "Amplification coefficient of the pool."
                ]
              },
              {
                "Name": "old_balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The old balances."
                ]
              },
              {
                "Name": "new_balances",
                "TypeName": "Vec<T::Balance>",
                "TypeId": 473,
                "Docs": [
                  "The new balances."
                ]
              },
              {
                "Name": "old_total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The old total supply of the pool asset."
                ]
              },
              {
                "Name": "new_total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The new total supply of the pool asset."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who has been collected the fee."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The fee amount of the pool asset."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "Fee is collected."
            ]
          },
          {
            "Name": "AModified",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "value",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "The new amplification coefficient."
                ]
              },
              {
                "Name": "time",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The block number when the new amplification coefficient will be effective."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "The pool amplification coefficient is modified."
            ]
          },
          {
            "Name": "FeeModified",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "mint_fee",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "The new mint fee."
                ]
              },
              {
                "Name": "swap_fee",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "The new swap fee."
                ]
              },
              {
                "Name": "redeem_fee",
                "TypeName": "T::AtLeast64BitUnsigned",
                "TypeId": 6,
                "Docs": [
                  "The new redeem fee."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "The pool fees are modified."
            ]
          },
          {
            "Name": "RecipientModified",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "fee_recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The new fee recipient."
                ]
              },
              {
                "Name": "yield_recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The new yield recipient."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "The pool recipients are modified."
            ]
          },
          {
            "Name": "TokenRateSet",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              },
              {
                "Name": "token_rate",
                "TypeName": "Vec<(T::AssetId, (T::AtLeast64BitUnsigned, T::AtLeast64BitUnsigned),)\n>",
                "TypeId": 474,
                "Docs": [
                  "The token rate info[(currency_id, (denominator, numerator))]."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "The token rate is set."
            ]
          },
          {
            "Name": "TokenRateHardcapConfigured",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "T::AssetId",
                "TypeId": 307,
                "Docs": [
                  "The token type."
                ]
              },
              {
                "Name": "hardcap",
                "TypeName": "Permill",
                "TypeId": 394,
                "Docs": [
                  "The hardcap of the token rate."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The hardcap of the token rate is configured."
            ]
          },
          {
            "Name": "TokenRateHardcapRemoved",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "T::AssetId",
                "TypeId": 307,
                "Docs": [
                  "The token type."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "The hardcap of the token rate is removed."
            ]
          },
          {
            "Name": "TokenRateRefreshFailed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "StableAssetPoolId",
                "TypeId": 4,
                "Docs": [
                  "The pool id."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "The token rate is refreshed."
            ]
          },
          {
            "Name": "RateAdjustmentLimited",
            "TypeFields": [
              {
                "TypeName": "StableAssetPoolId",
                "TypeId": 4
              },
              {
                "TypeName": "T::AssetId",
                "TypeId": 307
              },
              {
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "TypeName": "U256",
                "TypeId": 291
              },
              {
                "TypeName": "U256",
                "TypeId": 291
              }
            ],
            "Index": 16,
            "Docs": [
              "Rate adjustment was limited by hardcap",
              "Parameters: [pool_id, vtoken, current_rate, target_rate, adjusted_rate]"
            ]
          }
        ],
        "Path": [
          "bifrost_stable_asset",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "609": {
        "Variants": [
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "token_vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 478
              },
              {
                "Name": "delegator_vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 478
              }
            ],
            "Index": 0,
            "Docs": [
              "A vote has been cast.",
              "",
              "- `who`: The account that cast the vote.",
              "- `vtoken`: The token used for voting.",
              "- `poll_index`: The index of the poll being voted on.",
              "- `token_vote`: The vote cast using the token.",
              "- `delegator_vote`: The vote cast by a delegator."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A user's vote has been unlocked, allowing them to retrieve their tokens.",
              "",
              "- `who`: The account whose tokens are unlocked.",
              "- `vtoken`: The token that was locked during voting.",
              "- `poll_index`: The index of the poll associated with the unlocking."
            ]
          },
          {
            "Name": "DelegatorVoteRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "derivative_index",
                "TypeName": "DerivativeIndex",
                "TypeId": 53
              }
            ],
            "Index": 2,
            "Docs": [
              "A delegator's vote has been removed.",
              "",
              "- `who`: The account that dispatched remove_delegator_vote.",
              "- `vtoken`: The token associated with the delegator's vote.",
              "- `derivative_index`: The index of the derivative."
            ]
          },
          {
            "Name": "DelegatorAdded",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "derivative_index",
                "TypeName": "DerivativeIndex",
                "TypeId": 53
              }
            ],
            "Index": 3,
            "Docs": [
              "A delegator has been added.",
              "",
              "- `vtoken`: The token associated with the delegator.",
              "- `derivative_index`: The index of the derivative being added for the delegator."
            ]
          },
          {
            "Name": "ReferendumInfoCreated",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "info",
                "TypeName": "ReferendumInfoOf<T>",
                "TypeId": 479
              }
            ],
            "Index": 4,
            "Docs": [
              "A new referendum information has been created.",
              "",
              "- `vtoken`: The token associated with the referendum.",
              "- `poll_index`: The index of the poll.",
              "- `info`: The referendum information (details about the poll)."
            ]
          },
          {
            "Name": "ReferendumInfoSet",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "info",
                "TypeName": "ReferendumInfoOf<T>",
                "TypeId": 479
              }
            ],
            "Index": 5,
            "Docs": [
              "Referendum information has been updated.",
              "",
              "- `vtoken`: The token associated with the referendum.",
              "- `poll_index`: The index of the poll.",
              "- `info`: The updated referendum information."
            ]
          },
          {
            "Name": "VoteLockingPeriodSet",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "locking_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "The vote locking period has been set.",
              "",
              "- `vtoken`: The token for which the locking period is being set.",
              "- `locking_period`: The period for which votes will be locked (in block numbers)."
            ]
          },
          {
            "Name": "UndecidingTimeoutSet",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "undeciding_timeout",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "The undeciding timeout period has been set.",
              "",
              "- `vtoken`: The token associated with the timeout.",
              "- `undeciding_timeout`: The period of time before a poll is considered undecided."
            ]
          },
          {
            "Name": "ReferendumKilled",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been killed (cancelled or ended).",
              "",
              "- `vtoken`: The token associated with the referendum.",
              "- `poll_index`: The index of the poll being killed."
            ]
          },
          {
            "Name": "VoteNotified",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 9,
            "Docs": [
              "A notification about the result of a vote has been sent.",
              "",
              "- `vtoken`: The token associated with the poll.",
              "- `poll_index`: The index of the poll.",
              "- `success`: Whether the notification was successful or not."
            ]
          },
          {
            "Name": "DelegatorVoteRemovedNotified",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "A notification about the removal of a delegator's vote has been sent.",
              "",
              "- `vtoken`: The token associated with the poll.",
              "- `poll_index`: The index of the poll.",
              "- `success`: Whether the notification was successful or not."
            ]
          },
          {
            "Name": "ResponseReceived",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "Location",
                "TypeId": 108
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 201
              }
            ],
            "Index": 11,
            "Docs": [
              "A response has been received from a specific location.",
              "",
              "- `responder`: The location that sent the response.",
              "- `query_id`: The ID of the query that was responded to.",
              "- `response`: The content of the response."
            ]
          },
          {
            "Name": "VoteCapRatioSet",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "vote_cap_ratio",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 12,
            "Docs": [
              "The vote cap ratio has been set.",
              "",
              "- `vtoken`: The token associated with the cap.",
              "- `vote_cap_ratio`: The maximum allowed ratio for the vote."
            ]
          },
          {
            "Name": "ReferendumStatusUpdated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndex",
                "TypeId": 4
              },
              {
                "Name": "new_status",
                "TypeName": "ReferendumVoteStatus",
                "TypeId": 482
              }
            ],
            "Index": 13,
            "Docs": [
              "A referendum's status was updated."
            ]
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "610": {
        "Variants": [
          {
            "Name": "CollateralAssetAdded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 0,
            "Docs": [
              "Enable collateral for certain asset",
              "[sender, asset_id]"
            ]
          },
          {
            "Name": "CollateralAssetRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Disable collateral for certain asset",
              "[sender, asset_id]"
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Event emitted when assets are deposited",
              "[sender, asset_id, amount]"
            ]
          },
          {
            "Name": "Redeemed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Event emitted when assets are redeemed",
              "[sender, asset_id, amount]"
            ]
          },
          {
            "Name": "Borrowed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Event emitted when cash is borrowed",
              "[sender, asset_id, amount]"
            ]
          },
          {
            "Name": "RepaidBorrow",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Event emitted when a borrow is repaid",
              "[sender, asset_id, amount]"
            ]
          },
          {
            "Name": "LiquidatedBorrow",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Event emitted when a borrow is liquidated",
              "[liquidator, borrower, liquidation_asset_id, collateral_asset_id, repay_amount,",
              "collateral_amount]"
            ]
          },
          {
            "Name": "ReservesReduced",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Event emitted when the reserves are reduced",
              "[admin, asset_id, reduced_amount, total_reserves]"
            ]
          },
          {
            "Name": "ReservesAdded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Event emitted when the reserves are added",
              "[admin, asset_id, added_amount, total_reserves]"
            ]
          },
          {
            "Name": "NewMarket",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "Market<BalanceOf<T>>",
                "TypeId": 484
              }
            ],
            "Index": 9,
            "Docs": [
              "New market is set",
              "[new_interest_rate_model]"
            ]
          },
          {
            "Name": "ActivatedMarket",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 10,
            "Docs": [
              "Event emitted when a market is activated",
              "[admin, asset_id]"
            ]
          },
          {
            "Name": "UpdatedMarket",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "Market<BalanceOf<T>>",
                "TypeId": 484
              }
            ],
            "Index": 11,
            "Docs": [
              "New market parameters is updated",
              "[admin, asset_id]"
            ]
          },
          {
            "Name": "RewardAdded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Reward added"
            ]
          },
          {
            "Name": "RewardWithdrawn",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Reward withdrawed"
            ]
          },
          {
            "Name": "MarketRewardSpeedUpdated",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Event emitted when market reward speed updated."
            ]
          },
          {
            "Name": "DistributedSupplierReward",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Deposited when Reward is distributed to a supplier"
            ]
          },
          {
            "Name": "DistributedBorrowerReward",
            "TypeFields": [
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Deposited when Reward is distributed to a borrower"
            ]
          },
          {
            "Name": "RewardPaid",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Reward Paid for user"
            ]
          },
          {
            "Name": "IncentiveReservesReduced",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Event emitted when the incentive reserves are redeemed and transfer to receiver's",
              "account [receive_account_id, asset_id, reduced_amount]"
            ]
          },
          {
            "Name": "LiquidationFreeCollateralsUpdated",
            "TypeFields": [
              {
                "TypeName": "Vec<AssetIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 19,
            "Docs": [
              "Liquidation free collaterals has been updated"
            ]
          },
          {
            "Name": "MarketBonded",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "market_bond",
                "TypeName": "Vec<AssetIdOf<T>>",
                "TypeId": 383
              }
            ],
            "Index": 20
          }
        ],
        "Path": [
          "lend_market",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "611": {
        "Variants": [
          {
            "Name": "SetPrice",
            "TypeFields": [
              {
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "TypeName": "Price",
                "TypeId": 458
              }
            ],
            "Index": 0,
            "Docs": [
              "Set emergency price. \\[asset_id, price_detail\\]"
            ]
          },
          {
            "Name": "ResetPrice",
            "TypeFields": [
              {
                "TypeName": "CurrencyId",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "Reset emergency price. \\[asset_id\\]"
            ]
          }
        ],
        "Path": [
          "pallet_prices",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "612": {
        "Variants": [
          {
            "Name": "NewFeedData",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "values",
                "TypeName": "Vec<(T::OracleKey, T::OracleValue)>",
                "TypeId": 495
              }
            ],
            "Index": 0,
            "Docs": [
              "New feed data is submitted."
            ]
          },
          {
            "Name": "FeedValueReachingLimit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "TimestampedValueOf<T, I>",
                "TypeId": 613
              },
              {
                "Name": "prev",
                "TypeName": "TimestampedValueOf<T, I>",
                "TypeId": 613
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "orml_oracle",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "613": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 458
          },
          {
            "Name": "timestamp",
            "TypeName": "Moment",
            "TypeId": 12
          }
        ],
        "Path": [
          "orml_oracle",
          "module",
          "TimestampedValue"
        ],
        "TypeParams": [
          {
            "Name": "Value",
            "TypeId": 458
          },
          {
            "Name": "Moment",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "614": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "615": {
        "Variants": [
          {
            "Name": "FlashLoanDeposited",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account who change the leverage rate."
                ]
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 307,
                "Docs": [
                  "The asset id of the token."
                ]
              },
              {
                "Name": "old_rate",
                "TypeName": "Rate",
                "TypeId": 458,
                "Docs": [
                  "The old leverage rate."
                ]
              },
              {
                "Name": "new_rate",
                "TypeName": "Rate",
                "TypeId": 458,
                "Docs": [
                  "The new leverage rate."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "User's leverage rate has been changed."
            ]
          }
        ],
        "Path": [
          "leverage_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "616": {
        "Variants": [
          {
            "Name": "ChannelRegistered",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "receive_account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "ChannelRemoved",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "ChannelReceiveAccountUpdated",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "receiver",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "CommissionTokenSet",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "commission_token",
                "TypeName": "Option<CurrencyId>",
                "TypeId": 381
              }
            ],
            "Index": 3
          },
          {
            "Name": "ChannelCommissionSet",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "rate",
                "TypeName": "Percent",
                "TypeId": 47
              }
            ],
            "Index": 4
          },
          {
            "Name": "CommissionClaimed",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "commission_token",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5
          },
          {
            "Name": "ChannelVtokenSharesUpdated",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "share",
                "TypeName": "Permill",
                "TypeId": 394
              }
            ],
            "Index": 6
          },
          {
            "Name": "VtokenIssuanceSnapshotUpdated",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old_issuance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_issuance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7
          },
          {
            "Name": "PeriodVtokenTotalMintUpdated",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old_total_mint",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_mint",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8
          },
          {
            "Name": "PeriodVtokenTotalRedeemUpdated",
            "TypeFields": [
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old_total_redeem",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_redeem",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9
          },
          {
            "Name": "PeriodChannelVtokenMintUpdated",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "vtoken",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old_mint_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_mint_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10
          },
          {
            "Name": "PeriodTotalCommissionsUpdated",
            "TypeFields": [
              {
                "Name": "commission_token",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "old_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11
          },
          {
            "Name": "ChannelClaimableCommissionUpdated",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "ChannelId",
                "TypeId": 4
              },
              {
                "Name": "commission_token",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 12
          },
          {
            "Name": "CalculationFailed",
            "TypeFields": [
              {
                "Name": "numerator",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "denominator",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Emitted when a Permill calculation fails.",
              "This event carries the numerator and denominator that caused the failure."
            ]
          },
          {
            "Name": "BifrostCommissionTransferFailed",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "commission_token",
                "TypeName": "CurrencyId",
                "TypeId": 307
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Bifrost commission transfer failed.",
              "Parameters are the commission token and the amount that failed to transfer."
            ]
          },
          {
            "Name": "RemovalNotCompleteError",
            "TypeFields": [
              {
                "Name": "target_num",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "limit",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "executed_num",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Error event indicating that the removal process of clearing was not completed."
            ]
          }
        ],
        "Path": [
          "bifrost_channel_commission",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "617": {
        "Variants": [
          {
            "Name": "CloudsConverted",
            "TypeFields": [
              {
                "Name": "clouds",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "vebnc",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "VbncCharged",
            "TypeFields": [
              {
                "Name": "vbnc",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_clouds_convert",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "618": {
        "Variants": [
          {
            "Name": "Charged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A successful call of the `Charge` extrinsic will create this event."
            ]
          },
          {
            "Name": "ConfigSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "info",
                "TypeName": "Info<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 619
              }
            ],
            "Index": 1,
            "Docs": [
              "A successful call of the `SetVtoken` extrinsic will create this event."
            ]
          },
          {
            "Name": "Removed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              }
            ],
            "Index": 2,
            "Docs": [
              "A successful call of the `RemoveVtoken` extrinsic will create this event."
            ]
          },
          {
            "Name": "BuyBackFailed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A failed call of the `BuyBack` extrinsic will create this event."
            ]
          },
          {
            "Name": "BuyBackSuccess",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A successful call of the `BuyBack` extrinsic will create this event."
            ]
          },
          {
            "Name": "AddLiquidityFailed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A failed call of the `AddLiquidity` extrinsic will create this event."
            ]
          },
          {
            "Name": "AddLiquiditySuccess",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A successful call of the `AddLiquidity` extrinsic will create this event."
            ]
          },
          {
            "Name": "SetSwapOutMinFailed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "A failed call of the `SetSwapOutMin` extrinsic will create this event."
            ]
          },
          {
            "Name": "SetSwapOutMinSuccess",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 307
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "A successful call of the `SetSwapOutMin` extrinsic will create this event."
            ]
          }
        ],
        "Path": [
          "bifrost_buy_back",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "619": {
        "TypeFields": [
          {
            "Name": "min_swap_value",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "if_auto",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "proportion",
            "TypeName": "Permill",
            "TypeId": 394
          },
          {
            "Name": "buyback_duration",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "last_buyback",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "last_buyback_cycle",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "add_liquidity_duration",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "last_add_liquidity",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "destruction_ratio",
            "TypeName": "Option<Permill>",
            "TypeId": 489
          },
          {
            "Name": "bias",
            "TypeName": "Permill",
            "TypeId": 394
          }
        ],
        "Path": [
          "bifrost_buy_back",
          "pallet",
          "Info"
        ],
        "TypeParams": [
          {
            "Name": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "620": {
        "Variants": [
          {
            "Name": "AddDelegator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator_index",
                "TypeName": "DelegatorIndex",
                "TypeId": 53,
                "Docs": [
                  "Delegator index."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a delegator to the staking protocol."
            ]
          },
          {
            "Name": "RemoveDelegator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator_index",
                "TypeName": "DelegatorIndex",
                "TypeId": 53,
                "Docs": [
                  "Delegator index."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a delegator from the staking protocol."
            ]
          },
          {
            "Name": "AddValidator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AccountId>",
                "TypeId": 507,
                "Docs": [
                  "Validator account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a validator to the staking protocol."
            ]
          },
          {
            "Name": "RemoveValidator",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AccountId>",
                "TypeId": 507,
                "Docs": [
                  "Validator account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove a validator from the staking protocol."
            ]
          },
          {
            "Name": "SetConfiguration",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "configuration",
                "TypeName": "ProtocolConfiguration<T::AccountId>",
                "TypeId": 503,
                "Docs": [
                  "The staking protocol configuration."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Set configuration for a specific staking protocol."
            ]
          },
          {
            "Name": "SetLedger",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "ledger",
                "TypeName": "Ledger",
                "TypeId": 509,
                "Docs": [
                  "Ledger."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Set ledger for a specific delegator."
            ]
          },
          {
            "Name": "SendXcmTask",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "Option<QueryId>",
                "TypeId": 354,
                "Docs": [
                  "Xcm Message Query id."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "task",
                "TypeName": "XcmTask<T::AccountId>",
                "TypeId": 621,
                "Docs": [
                  "Xcm task."
                ]
              },
              {
                "Name": "pending_status",
                "TypeName": "Option<PendingStatus<T::AccountId>>",
                "TypeId": 622,
                "Docs": [
                  "Pending confirmation status."
                ]
              },
              {
                "Name": "dest_location",
                "TypeName": "Location",
                "TypeId": 108,
                "Docs": [
                  "Destination."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Send xcm task."
            ]
          },
          {
            "Name": "NotifyResponseReceived",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "Location",
                "TypeId": 108,
                "Docs": [
                  "Xcm responder."
                ]
              },
              {
                "Name": "pending_status",
                "TypeName": "PendingStatus<T::AccountId>",
                "TypeId": 623,
                "Docs": [
                  "Pending confirmation status."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Xcm task response received."
            ]
          },
          {
            "Name": "TimeUnitUpdated",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "time_unit",
                "TypeName": "TimeUnit",
                "TypeId": 393,
                "Docs": [
                  "Time unit."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "Time unit updated."
            ]
          },
          {
            "Name": "TokenExchangeRateUpdated",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "protocol_fee_currency_id",
                "TypeName": "CurrencyId",
                "TypeId": 307,
                "Docs": [
                  "The type of token that the fee is charged to"
                ]
              },
              {
                "Name": "protocol_fee",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "The amount of the fee charged to the protocol"
                ]
              },
              {
                "Name": "pool_value",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "Amount of pool value updated"
                ]
              },
              {
                "Name": "delegator_value",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "Amount of delegator value updated"
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "Token exchange rate updated."
            ]
          },
          {
            "Name": "TransferTo",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Bifrost Account"
                ]
              },
              {
                "Name": "to",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "Amount"
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "Transfer the staking token to remote chain."
            ]
          },
          {
            "Name": "TransferBack",
            "TypeFields": [
              {
                "Name": "staking_protocol",
                "TypeName": "StakingProtocol",
                "TypeId": 502,
                "Docs": [
                  "Slp supports staking protocols."
                ]
              },
              {
                "Name": "from",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506,
                "Docs": [
                  "Delegator account."
                ]
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Bifrost Account."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6,
                "Docs": [
                  "Amount"
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "Transfer the staking token back from remote chain."
            ]
          },
          {
            "Name": "EthereumStaking",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "Delegator<T::AccountId>",
                "TypeId": 506
              },
              {
                "Name": "task",
                "TypeName": "EthereumStaking",
                "TypeId": 516
              }
            ],
            "Index": 12,
            "Docs": [
              "Ethereum staking task."
            ]
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "621": {
        "Variants": [
          {
            "Name": "AstarDappStaking",
            "TypeFields": [
              {
                "TypeName": "DappStaking<AccountId>",
                "TypeId": 515
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "polkadot",
          "XcmTask"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "622": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 623
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 623
          }
        ],
        "TypeDef": "Variant"
      },
      "623": {
        "Variants": [
          {
            "Name": "AstarDappStaking",
            "TypeFields": [
              {
                "TypeName": "AstarDappStakingPendingStatus<AccountId>",
                "TypeId": 624
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "common",
          "types",
          "polkadot",
          "PendingStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "624": {
        "Variants": [
          {
            "Name": "Lock",
            "TypeFields": [
              {
                "TypeName": "Delegator<AccountId>",
                "TypeId": 506
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "UnLock",
            "TypeFields": [
              {
                "TypeName": "Delegator<AccountId>",
                "TypeId": 506
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "ClaimUnlocked",
            "TypeFields": [
              {
                "TypeName": "Delegator<AccountId>",
                "TypeId": 506
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "astar_dapp_staking",
          "types",
          "AstarDappStakingPendingStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "625": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "626": {
        "TypeId": 232,
        "TypeDef": "Sequence"
      },
      "627": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 63
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 546
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "628": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 13
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "629": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 630
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "630": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 631
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 631
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 631
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 631
          }
        ],
        "TypeDef": "Composite"
      },
      "631": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 523
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 523
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 523
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "632": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 633
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "633": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "634": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "635": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 546
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 546
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 636
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "636": {
        "TypeFields": [
          {
            "TypeId": 637
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 637
          }
        ],
        "TypeDef": "Composite"
      },
      "637": {
        "TypeId": 638,
        "TypeDef": "Sequence"
      },
      "638": {
        "TypeIds": [
          154,
          4
        ],
        "TypeDef": "Tuple"
      },
      "639": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          },
          {
            "Name": "MultiBlockMigrationsOngoing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A multi-block migration is ongoing and prevents the current code from being replaced."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No upgrade authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The submitted code is not authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "640": {
        "TypeIds": [
          0,
          6,
          8
        ],
        "TypeDef": "Tuple"
      },
      "641": {
        "Variants": [
          {
            "Name": "NotAssigned",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The index was not already assigned."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The index is assigned to another account."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The index was not available."
            ]
          },
          {
            "Name": "NotTransfer",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The source and destination accounts are identical."
            ]
          },
          {
            "Name": "Permanent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The index is permanent and may not be freed/changed."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "642": {
        "TypeId": 643,
        "TypeDef": "Sequence"
      },
      "643": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 644
          },
          {
            "Name": "para_head_hash",
            "TypeName": "Option<H>",
            "TypeId": 127
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 649
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "Ancestor"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "644": {
        "TypeFields": [
          {
            "Name": "ump_msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ump_total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_outgoing",
            "TypeName": "BTreeMap<ParaId, HrmpChannelUpdate>",
            "TypeId": 645
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "UsedBandwidth"
        ],
        "TypeDef": "Composite"
      },
      "645": {
        "TypeFields": [
          {
            "TypeId": 647
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 74
          },
          {
            "Name": "V",
            "TypeId": 646
          }
        ],
        "TypeDef": "Composite"
      },
      "646": {
        "TypeFields": [
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "HrmpChannelUpdate"
        ],
        "TypeDef": "Composite"
      },
      "647": {
        "TypeId": 648,
        "TypeDef": "Sequence"
      },
      "648": {
        "TypeIds": [
          74,
          646
        ],
        "TypeDef": "Tuple"
      },
      "649": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 650
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 650
          }
        ],
        "TypeDef": "Variant"
      },
      "650": {
        "Variants": [
          {
            "Name": "Abort",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GoAhead",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "UpgradeGoAhead"
        ],
        "TypeDef": "Variant"
      },
      "651": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 644
          },
          {
            "Name": "hrmp_watermark",
            "TypeName": "Option<relay_chain::BlockNumber>",
            "TypeId": 87
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 649
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "SegmentTracker"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "652": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 653
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 653
          }
        ],
        "TypeDef": "Variant"
      },
      "653": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "654": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 13
          },
          {
            "Name": "relay_dispatch_queue_remaining_capacity",
            "TypeName": "RelayDispatchQueueRemainingCapacity",
            "TypeId": 655
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 656
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 656
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "655": {
        "TypeFields": [
          {
            "Name": "remaining_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "RelayDispatchQueueRemainingCapacity"
        ],
        "TypeDef": "Composite"
      },
      "656": {
        "TypeId": 657,
        "TypeDef": "Sequence"
      },
      "657": {
        "TypeIds": [
          74,
          658
        ],
        "TypeDef": "Tuple"
      },
      "658": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 127
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "659": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "async_backing_params",
            "TypeName": "AsyncBackingParams",
            "TypeId": 660
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "660": {
        "TypeFields": [
          {
            "Name": "max_candidate_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "allowed_ancestry_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "async_backing",
          "AsyncBackingParams"
        ],
        "TypeDef": "Composite"
      },
      "661": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 13
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "662": {
        "TypeFields": [
          {
            "TypeId": 663
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 74
          },
          {
            "Name": "V",
            "TypeId": 661
          }
        ],
        "TypeDef": "Composite"
      },
      "663": {
        "TypeId": 664,
        "TypeDef": "Sequence"
      },
      "664": {
        "TypeIds": [
          74,
          661
        ],
        "TypeDef": "Tuple"
      },
      "665": {
        "TypeId": 666,
        "TypeDef": "Sequence"
      },
      "666": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 74
          },
          {
            "Name": "data",
            "TypeName": "alloc::vec::Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 74
          }
        ],
        "TypeDef": "Composite"
      },
      "667": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "668": {
        "Variants": [
          {
            "Name": "IsPaused",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The call is paused."
            ]
          },
          {
            "Name": "IsUnpaused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The call is unpaused."
            ]
          },
          {
            "Name": "Unpausable",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The call is whitelisted and cannot be paused."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_tx_pause",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "669": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The operation cannot complete since some MBMs are ongoing."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "670": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 673
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 671
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "671": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 154
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 672
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "672": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "673": {
        "TypeId": 671,
        "TypeDef": "Sequence"
      },
      "674": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 676
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 675
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "675": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 154
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 154
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "676": {
        "TypeId": 675,
        "TypeDef": "Sequence"
      },
      "677": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 681
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 678
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "678": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 679
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 679
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "679": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::HoldReason",
                "TypeId": 680
              }
            ],
            "Index": 64
          }
        ],
        "Path": [
          "bifrost_polkadot_runtime",
          "RuntimeHoldReason"
        ],
        "TypeDef": "Variant"
      },
      "680": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "681": {
        "TypeId": 678,
        "TypeDef": "Sequence"
      },
      "682": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 684
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 683
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "683": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 285
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 285
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "684": {
        "TypeId": 683,
        "TypeDef": "Sequence"
      },
      "685": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          },
          {
            "Name": "IssuanceDeactivated",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The issuance cannot be modified since it is already deactivated."
            ]
          },
          {
            "Name": "DeltaZero",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The delta cannot be zero."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "686": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "687": {
        "TypeId": 688,
        "TypeDef": "Sequence"
      },
      "688": {
        "TypeIds": [
          0,
          95
        ],
        "TypeDef": "Tuple"
      },
      "689": {
        "TypeIds": [
          690,
          14
        ],
        "TypeDef": "Tuple"
      },
      "690": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 18
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "691": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "692": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 693
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 96
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "693": {
        "TypeId": 96,
        "TypeDef": "Sequence"
      },
      "694": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "695": {
        "TypeIds": [
          694,
          4
        ],
        "TypeDef": "Tuple"
      },
      "696": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "percent",
            "TypeName": "Percent",
            "TypeId": 47
          },
          {
            "Name": "payment_in_round",
            "TypeName": "BalanceOf",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "ParachainBondConfig"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BalanceOf",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "697": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "RoundIndex",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "length",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "RoundInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "698": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "delegations",
            "TypeName": "OrderedSet<Bond<AccountId, Balance>>",
            "TypeId": 699
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "less_total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "DelegatorStatus",
            "TypeId": 702
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "Delegator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "699": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 701
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 700
          }
        ],
        "TypeDef": "Composite"
      },
      "700": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "Bond"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "701": {
        "TypeId": 700,
        "TypeDef": "Sequence"
      },
      "702": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "DelegatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "703": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegation_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_counted",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_top_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "highest_bottom_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_bottom_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "top_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 704
          },
          {
            "Name": "bottom_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 704
          },
          {
            "Name": "request",
            "TypeName": "Option<CandidateBondLessRequest<Balance>>",
            "TypeId": 705
          },
          {
            "Name": "status",
            "TypeName": "CollatorStatus",
            "TypeId": 707
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "CandidateMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "704": {
        "Variants": [
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Partial",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "CapacityStatus"
        ],
        "TypeDef": "Variant"
      },
      "705": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 706
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 706
          }
        ],
        "TypeDef": "Variant"
      },
      "706": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "CandidateBondLessRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "707": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Idle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "RoundIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "CollatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "708": {
        "TypeId": 709,
        "TypeDef": "Sequence"
      },
      "709": {
        "TypeFields": [
          {
            "Name": "delegator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 4
          },
          {
            "Name": "action",
            "TypeName": "DelegationAction<Balance>",
            "TypeId": 45
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "delegation_requests",
          "ScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "710": {
        "TypeFields": [
          {
            "Name": "delegations",
            "TypeName": "Vec<Bond<AccountId, Balance>>",
            "TypeId": 701
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "711": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "712": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegations",
            "TypeName": "Vec<Bond<AccountId, Balance>>",
            "TypeId": 701
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "CollatorSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "713": {
        "TypeFields": [
          {
            "Name": "round_issuance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_staking_reward",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "collator_commission",
            "TypeName": "Perbill",
            "TypeId": 48
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "types",
          "DelayedPayout"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "714": {
        "TypeFields": [
          {
            "Name": "expect",
            "TypeName": "Range<Balance>",
            "TypeId": 98
          },
          {
            "Name": "annual",
            "TypeName": "Range<Perbill>",
            "TypeId": 99
          },
          {
            "Name": "round",
            "TypeName": "Range<Perbill>",
            "TypeId": 99
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "inflation",
          "InflationInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "715": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 154
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "716": {
        "Variants": [
          {
            "Name": "DelegatorDNE",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DelegatorDNEinTopNorBottom",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DelegatorDNEInDelegatorSet",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CandidateDNE",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DelegationDNE",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "DelegatorExists",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CandidateExists",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CandidateBondBelowMin",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "DelegatorBondBelowMin",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "DelegationBelowMin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "AlreadyOffline",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "AlreadyActive",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DelegatorAlreadyLeaving",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "DelegatorNotLeaving",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "DelegatorCannotLeaveYet",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "CannotDelegateIfLeaving",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "CandidateAlreadyLeaving",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "CandidateNotLeaving",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "CandidateCannotLeaveYet",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "CannotGoOnlineIfLeaving",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "ExceedMaxDelegationsPerDelegator",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "AlreadyDelegatedCandidate",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "InvalidSchedule",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "CannotSetBelowMin",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "RoundLengthMustBeGreaterThanTotalSelectedCollators",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "NoWritingSameValue",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "TooLowCandidateCountWeightHintJoinCandidates",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "TooLowCandidateCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "TooLowDelegationCountToDelegate",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "TooLowCandidateDelegationCountToDelegate",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "TooLowCandidateDelegationCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "TooLowDelegationCountToLeaveDelegators",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "PendingCandidateRequestsDNE",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "PendingCandidateRequestAlreadyExists",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "PendingCandidateRequestNotDueYet",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "PendingDelegationRequestDNE",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "PendingDelegationRequestAlreadyExists",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "PendingDelegationRequestNotDueYet",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "CannotDelegateLessThanOrEqualToLowestBottomWhenFull",
            "TypeFields": null,
            "Index": 40
          },
          {
            "Name": "PendingDelegationRevoke",
            "TypeFields": null,
            "Index": 41
          }
        ],
        "Path": [
          "bifrost_parachain_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "717": {
        "TypeIds": [
          0,
          53
        ],
        "TypeDef": "Tuple"
      },
      "718": {
        "Variants": [
          {
            "Name": "Casting",
            "TypeFields": [
              {
                "TypeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                "TypeId": 719
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "TypeName": "Delegating<Balance, AccountId, BlockNumber>",
                "TypeId": 725
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "719": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
            "TypeId": 720
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 723
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 724
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Casting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Composite"
      },
      "720": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 722
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 721
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "721": {
        "TypeIds": [
          4,
          50
        ],
        "TypeDef": "Tuple"
      },
      "722": {
        "TypeId": 721,
        "TypeDef": "Sequence"
      },
      "723": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "724": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "725": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "target",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "conviction",
            "TypeName": "Conviction",
            "TypeId": 101
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 723
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 724
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Delegating"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "726": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 728
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 727
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "727": {
        "TypeIds": [
          53,
          6
        ],
        "TypeDef": "Tuple"
      },
      "728": {
        "TypeId": 727,
        "TypeDef": "Sequence"
      },
      "729": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Poll is not ongoing."
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "NoPermissionYet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "AlreadyVoting",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed through `remove_vote`."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "ClassNeeded",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The class must be supplied since it is not easily determinable from the state."
            ]
          },
          {
            "Name": "BadClass",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The class ID supplied is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "730": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 731
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 54
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 519
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 232
          }
        ],
        "TypeDef": "Variant"
      },
      "731": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 54
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 126
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 732
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 733
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 734
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 519
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 736
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 54
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 519
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 232
          }
        ],
        "TypeDef": "Composite"
      },
      "732": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Deposit"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "733": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 732
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 732
          }
        ],
        "TypeDef": "Variant"
      },
      "734": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 735
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 735
          }
        ],
        "TypeDef": "Variant"
      },
      "735": {
        "TypeFields": [
          {
            "Name": "since",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "confirming",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 87
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "DecidingStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "736": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 737
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 737
          }
        ],
        "TypeDef": "Variant"
      },
      "737": {
        "TypeIds": [
          4,
          232
        ],
        "TypeDef": "Tuple"
      },
      "738": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 740
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 739
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "739": {
        "TypeIds": [
          4,
          6
        ],
        "TypeDef": "Tuple"
      },
      "740": {
        "TypeId": 739,
        "TypeDef": "Sequence"
      },
      "741": {
        "TypeId": 742,
        "TypeDef": "Sequence"
      },
      "742": {
        "TypeIds": [
          53,
          743
        ],
        "TypeDef": "Tuple"
      },
      "743": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "&'static str",
            "TypeId": 546
          },
          {
            "Name": "max_deciding",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "prepare_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "decision_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "confirm_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_enactment_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_approval",
            "TypeName": "Curve",
            "TypeId": 744
          },
          {
            "Name": "min_support",
            "TypeName": "Curve",
            "TypeId": 744
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "TrackInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Moment",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "744": {
        "Variants": [
          {
            "Name": "LinearDecreasing",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "floor",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "ceil",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 0
          },
          {
            "Name": "SteppedDecreasing",
            "TypeFields": [
              {
                "Name": "begin",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "end",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "step",
                "TypeName": "Perbill",
                "TypeId": 48
              },
              {
                "Name": "period",
                "TypeName": "Perbill",
                "TypeId": 48
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reciprocal",
            "TypeFields": [
              {
                "Name": "factor",
                "TypeName": "FixedI64",
                "TypeId": 745
              },
              {
                "Name": "x_offset",
                "TypeName": "FixedI64",
                "TypeId": 745
              },
              {
                "Name": "y_offset",
                "TypeName": "FixedI64",
                "TypeId": 745
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Curve"
        ],
        "TypeDef": "Variant"
      },
      "745": {
        "TypeFields": [
          {
            "TypeName": "i64",
            "TypeId": 746
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedI64"
        ],
        "TypeDef": "Composite"
      },
      "746": {
        "Primitive": "I64",
        "TypeDef": "Primitive"
      },
      "747": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          },
          {
            "Name": "PreimageStoredWithDifferentLength",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The preimage is stored with a different length than the one provided."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "748": {
        "Variants": [
          {
            "Name": "UnavailablePreImage",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The preimage of the call hash could not be loaded."
            ]
          },
          {
            "Name": "UndecodableCall",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The call could not be decoded."
            ]
          },
          {
            "Name": "InvalidCallWeightWitness",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The weight of the decoded call was higher than the witness."
            ]
          },
          {
            "Name": "CallIsNotWhitelisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The call was not whitelisted."
            ]
          },
          {
            "Name": "CallAlreadyWhitelisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The call was already whitelisted; No-Op."
            ]
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "749": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 750
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 74
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "750": {
        "TypeFields": [
          {
            "TypeId": 751
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 74
          }
        ],
        "TypeDef": "Composite"
      },
      "751": {
        "TypeId": 74,
        "TypeDef": "Sequence"
      },
      "752": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 755
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 753
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "753": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 74
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 754
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 53
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 53
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "754": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "755": {
        "TypeId": 753,
        "TypeDef": "Sequence"
      },
      "756": {
        "TypeIds": [
          74,
          53
        ],
        "TypeDef": "Tuple"
      },
      "757": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "758": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "759": {
        "Variants": [
          {
            "Name": "BadQueueConfig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Setting the queue config failed since one of its values was invalid."
            ]
          },
          {
            "Name": "AlreadySuspended",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The execution is already suspended."
            ]
          },
          {
            "Name": "AlreadyResumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The execution is already resumed."
            ]
          },
          {
            "Name": "TooManyActiveOutboundChannels",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too many active outbound channels."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is too big."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "760": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedLocation",
                "TypeId": 131
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedLocation>",
                "TypeId": 761
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 762
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedLocation",
                "TypeId": 131
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 764
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "761": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 131
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 131
          }
        ],
        "TypeDef": "Variant"
      },
      "762": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 763
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 763
          }
        ],
        "TypeDef": "Variant"
      },
      "763": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "764": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 156
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 175
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Response",
                "TypeId": 201
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "765": {
        "TypeIds": [
          4,
          131
        ],
        "TypeDef": "Tuple"
      },
      "766": {
        "TypeIds": [
          12,
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "767": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 769
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 768
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "768": {
        "TypeIds": [
          131,
          4
        ],
        "TypeDef": "Tuple"
      },
      "769": {
        "TypeId": 768,
        "TypeDef": "Sequence"
      },
      "770": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 38
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "771": {
        "TypeIds": [
          4,
          0,
          224
        ],
        "TypeDef": "Tuple"
      },
      "772": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedLocation",
            "TypeId": 131
          },
          {
            "Name": "locker",
            "TypeName": "VersionedLocation",
            "TypeId": 131
          },
          {
            "Name": "consumers",
            "TypeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
            "TypeId": 773
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeParams": [
          {
            "Name": "ConsumerIdentifier",
            "TypeId": 285
          },
          {
            "Name": "MaxConsumers"
          }
        ],
        "TypeDef": "Composite"
      },
      "773": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 775
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 774
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "774": {
        "TypeIds": [
          285,
          6
        ],
        "TypeDef": "Tuple"
      },
      "775": {
        "TypeId": 774,
        "TypeDef": "Sequence"
      },
      "776": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 778
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 777
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "777": {
        "TypeIds": [
          6,
          131
        ],
        "TypeDef": "Tuple"
      },
      "778": {
        "TypeId": 777,
        "TypeDef": "Sequence"
      },
      "779": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message.",
              "Perhaps a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `Location` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "CannotCheckOutTeleport",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Could not check-out the assets for teleportation to the destination chain."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still consumers of the lock."
            ]
          },
          {
            "Name": "InvalidAssetUnknownReserve",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Invalid asset, reserve chain could not be determined for it."
            ]
          },
          {
            "Name": "InvalidAssetUnsupportedReserve",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid asset, do not support remote asset reserves with different fees reserves."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Too many assets with different reserve locations have been attempted for transfer."
            ]
          },
          {
            "Name": "LocalExecutionIncomplete",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Local XCM execution incomplete."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "780": {
        "TypeFields": [
          {
            "Name": "begin",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "count",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "ready_neighbours",
            "TypeName": "Option<Neighbours<MessageOrigin>>",
            "TypeId": 781
          },
          {
            "Name": "message_count",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_message_queue",
          "BookState"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 227
          }
        ],
        "TypeDef": "Composite"
      },
      "781": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 782
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 782
          }
        ],
        "TypeDef": "Variant"
      },
      "782": {
        "TypeFields": [
          {
            "Name": "prev",
            "TypeName": "MessageOrigin",
            "TypeId": 227
          },
          {
            "Name": "next",
            "TypeName": "MessageOrigin",
            "TypeId": 227
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Neighbours"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 227
          }
        ],
        "TypeDef": "Composite"
      },
      "783": {
        "TypeIds": [
          227,
          4
        ],
        "TypeDef": "Tuple"
      },
      "784": {
        "TypeFields": [
          {
            "Name": "remaining",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first_index",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "last",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "heap",
            "TypeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
            "TypeId": 785
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Page"
        ],
        "TypeParams": [
          {
            "Name": "Size",
            "TypeId": 4
          },
          {
            "Name": "HeapSize"
          }
        ],
        "TypeDef": "Composite"
      },
      "785": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "786": {
        "Variants": [
          {
            "Name": "NotReapable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "Name": "NoPage",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "Name": "NoMessage",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The referenced message could not be found."
            ]
          },
          {
            "Name": "AlreadyProcessed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "Name": "Queued",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is queued for future execution."
            ]
          },
          {
            "Name": "InsufficientWeight",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "Name": "TemporarilyUnprocessable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          },
          {
            "Name": "QueuePaused",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The queue is paused and no message can be executed from it.",
              "",
              "This can change at any time and may resolve in the future by re-trying."
            ]
          },
          {
            "Name": "RecursiveDisallowed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Another call is in progress and needs to finish before this call can happen."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "787": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "788": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 791
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 789
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "789": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 790
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 790
          }
        ],
        "TypeDef": "Variant"
      },
      "790": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 33
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 54
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 231
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 104
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 54
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 104
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "791": {
        "TypeId": 789,
        "TypeDef": "Sequence"
      },
      "792": {
        "TypeFields": [
          {
            "Name": "total_retries",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "remaining",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "period",
            "TypeName": "Period",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_scheduler",
          "RetryConfig"
        ],
        "TypeParams": [
          {
            "Name": "Period",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "793": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "794": {
        "TypeIds": [
          795,
          6
        ],
        "TypeDef": "Tuple"
      },
      "795": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 797
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 796
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "796": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 235
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 235
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "797": {
        "TypeId": 796,
        "TypeDef": "Sequence"
      },
      "798": {
        "TypeIds": [
          799,
          6
        ],
        "TypeDef": "Tuple"
      },
      "799": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 801
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 800
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "800": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 13
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 13
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "801": {
        "TypeId": 800,
        "TypeDef": "Sequence"
      },
      "802": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "803": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "804": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 238
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 805
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "805": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "806": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "807": {
        "TypeIds": [
          808,
          812
        ],
        "TypeDef": "Tuple"
      },
      "808": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 809
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo",
            "TypeId": 240
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "IdentityInfo",
            "TypeId": 240
          }
        ],
        "TypeDef": "Composite"
      },
      "809": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 811
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 810
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "810": {
        "TypeIds": [
          4,
          276
        ],
        "TypeDef": "Tuple"
      },
      "811": {
        "TypeId": 810,
        "TypeDef": "Sequence"
      },
      "812": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 281
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 281
          }
        ],
        "TypeDef": "Variant"
      },
      "813": {
        "TypeIds": [
          6,
          814
        ],
        "TypeDef": "Tuple"
      },
      "814": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "815": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 818
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 816
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "816": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 817
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 817
          }
        ],
        "TypeDef": "Variant"
      },
      "817": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdField",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "IdField",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "818": {
        "TypeId": 816,
        "TypeDef": "Sequence"
      },
      "819": {
        "TypeFields": [
          {
            "Name": "suffix",
            "TypeName": "Suffix",
            "TypeId": 820
          },
          {
            "Name": "allocation",
            "TypeName": "Allocation",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "AuthorityProperties"
        ],
        "TypeParams": [
          {
            "Name": "Suffix",
            "TypeId": 820
          }
        ],
        "TypeDef": "Composite"
      },
      "820": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "821": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "822": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          },
          {
            "Name": "InvalidSuffix",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The provided suffix is too long."
            ]
          },
          {
            "Name": "NotUsernameAuthority",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The sender does not have permission to issue a username."
            ]
          },
          {
            "Name": "NoAllocation",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The authority cannot allocate any more usernames."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The signature on a username was not valid."
            ]
          },
          {
            "Name": "RequiresSignature",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Setting this username requires a signature, but none was provided."
            ]
          },
          {
            "Name": "InvalidUsername",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The username does not meet the requirements."
            ]
          },
          {
            "Name": "UsernameTaken",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The username is already taken."
            ]
          },
          {
            "Name": "NoUsername",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The requested username does not exist."
            ]
          },
          {
            "Name": "NotExpired",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The username cannot be forcefully removed because it can still be accepted."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "823": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 824
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 283
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "824": {
        "TypeId": 283,
        "TypeDef": "Sequence"
      },
      "825": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "826": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          },
          {
            "Name": "SamePerBlock",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "change to the same per_block param"
            ]
          },
          {
            "Name": "VestingStartAtNotSet",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "VestingStartAt storage is not set"
            ]
          },
          {
            "Name": "WrongLockedAmount",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Wrong amount"
            ]
          },
          {
            "Name": "WrongCliffVesting",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Wrong vesting during cliff period"
            ]
          }
        ],
        "Path": [
          "bifrost_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "827": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "828": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 360
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "829": {
        "TypeFields": [
          {
            "Name": "asset_kind",
            "TypeName": "AssetKind",
            "TypeId": 285
          },
          {
            "Name": "amount",
            "TypeName": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "valid_from",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "expire_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "PaymentState<PaymentId>",
            "TypeId": 830
          }
        ],
        "Path": [
          "pallet_treasury",
          "SpendStatus"
        ],
        "TypeParams": [
          {
            "Name": "AssetKind",
            "TypeId": 285
          },
          {
            "Name": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PaymentId",
            "TypeId": 285
          }
        ],
        "TypeDef": "Composite"
      },
      "830": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Id",
                "TypeId": 285
              }
            ],
            "Index": 1
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_treasury",
          "PaymentState"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 285
          }
        ],
        "TypeDef": "Variant"
      },
      "831": {
        "Variants": [
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "No proposal, bounty or spend at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal has not been approved."
            ]
          },
          {
            "Name": "FailedToConvertBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The balance of the asset kind is not convertible to the balance of the native asset."
            ]
          },
          {
            "Name": "SpendExpired",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The spend has expired and cannot be claimed."
            ]
          },
          {
            "Name": "EarlyPayout",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The spend is not yet eligible for payout."
            ]
          },
          {
            "Name": "AlreadyAttempted",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The payment has already been attempted."
            ]
          },
          {
            "Name": "PayoutError",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "Name": "NotAttempted",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The payout was not yet attempted/claimed."
            ]
          },
          {
            "Name": "Inconclusive",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The payment has neither failed nor succeeded yet."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "832": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 833
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 834
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 87
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "OldRequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "833": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "834": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 833
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 833
          }
        ],
        "TypeDef": "Variant"
      },
      "835": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "ticket",
                "TypeName": "(AccountId, Ticket)",
                "TypeId": 837
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "maybe_ticket",
                "TypeName": "Option<(AccountId, Ticket)>",
                "TypeId": 838
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "maybe_len",
                "TypeName": "Option<u32>",
                "TypeId": 87
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Ticket",
            "TypeId": 836
          }
        ],
        "TypeDef": "Variant"
      },
      "836": {
        "TypeFields": [
          {
            "TypeName": "F::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "HoldConsideration"
        ],
        "TypeParams": [
          {
            "Name": "A"
          },
          {
            "Name": "F"
          },
          {
            "Name": "R"
          },
          {
            "Name": "D"
          },
          {
            "Name": "Fp"
          }
        ],
        "TypeDef": "Composite"
      },
      "837": {
        "TypeIds": [
          0,
          836
        ],
        "TypeDef": "Tuple"
      },
      "838": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 837
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 837
          }
        ],
        "TypeDef": "Variant"
      },
      "839": {
        "TypeIds": [
          13,
          4
        ],
        "TypeDef": "Tuple"
      },
      "840": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "841": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
            ]
          },
          {
            "Name": "TooFew",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too few hashes were requested to be upgraded (i.e. zero)."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "842": {
        "TypeId": 843,
        "TypeDef": "Sequence"
      },
      "843": {
        "TypeIds": [
          289,
          844,
          849
        ],
        "TypeDef": "Tuple"
      },
      "844": {
        "TypeFields": [
          {
            "Name": "transaction_hash",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "transaction_index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "from",
            "TypeName": "Address",
            "TypeId": 125
          },
          {
            "Name": "to",
            "TypeName": "Option<Address>",
            "TypeId": 845
          },
          {
            "Name": "contract_address",
            "TypeName": "Option<Address>",
            "TypeId": 845
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 846
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 847
          }
        ],
        "Path": [
          "fp_rpc",
          "TransactionStatus"
        ],
        "TypeDef": "Composite"
      },
      "845": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 125
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 125
          }
        ],
        "TypeDef": "Variant"
      },
      "846": {
        "TypeId": 550,
        "TypeDef": "Sequence"
      },
      "847": {
        "TypeFields": [
          {
            "TypeName": "[u8; BLOOM_SIZE]",
            "TypeId": 848
          }
        ],
        "Path": [
          "ethbloom",
          "Bloom"
        ],
        "TypeDef": "Composite"
      },
      "848": {
        "Length": 256,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "849": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "EIP658ReceiptData",
                "TypeId": 850
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930ReceiptData",
                "TypeId": 850
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559ReceiptData",
                "TypeId": 850
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "ReceiptV3"
        ],
        "TypeDef": "Variant"
      },
      "850": {
        "TypeFields": [
          {
            "Name": "status_code",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "used_gas",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 847
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 846
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "EIP658ReceiptData"
        ],
        "TypeDef": "Composite"
      },
      "851": {
        "TypeFields": [
          {
            "Name": "header",
            "TypeName": "Header",
            "TypeId": 852
          },
          {
            "Name": "transactions",
            "TypeName": "Vec<T>",
            "TypeId": 854
          },
          {
            "Name": "ommers",
            "TypeName": "Vec<Header>",
            "TypeId": 855
          }
        ],
        "Path": [
          "ethereum",
          "block",
          "Block"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 289
          }
        ],
        "TypeDef": "Composite"
      },
      "852": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "ommers_hash",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "beneficiary",
            "TypeName": "H160",
            "TypeId": 125
          },
          {
            "Name": "state_root",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "transactions_root",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "receipts_root",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 847
          },
          {
            "Name": "difficulty",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "number",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "gas_used",
            "TypeName": "U256",
            "TypeId": 291
          },
          {
            "Name": "timestamp",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "extra_data",
            "TypeName": "Bytes",
            "TypeId": 14
          },
          {
            "Name": "mix_hash",
            "TypeName": "H256",
            "TypeId": 13
          },
          {
            "Name": "nonce",
            "TypeName": "H64",
            "TypeId": 853
          }
        ],
        "Path": [
          "ethereum",
          "header",
          "Header"
        ],
        "TypeDef": "Composite"
      },
      "853": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 154
          }
        ],
        "Path": [
          "ethereum_types",
          "hash",
          "H64"
        ],
        "TypeDef": "Composite"
      },
      "854": {
        "TypeId": 289,
        "TypeDef": "Sequence"
      },
      "855": {
        "TypeId": 852,
        "TypeDef": "Sequence"
      },
      "856": {
        "TypeId": 849,
        "TypeDef": "Sequence"
      },
      "857": {
        "TypeId": 844,
        "TypeDef": "Sequence"
      },
      "858": {
        "Variants": [
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Signature is invalid."
            ]
          },
          {
            "Name": "PreLogExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Pre-log is present, therefore transact is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "859": {
        "TypeFields": [
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "hash",
            "TypeName": "H256",
            "TypeId": 13
          }
        ],
        "Path": [
          "pallet_evm",
          "CodeMetadata"
        ],
        "TypeDef": "Composite"
      },
      "860": {
        "TypeIds": [
          125,
          13
        ],
        "TypeDef": "Tuple"
      },
      "861": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not enough balance to perform action"
            ]
          },
          {
            "Name": "FeeOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Calculating total fee overflowed"
            ]
          },
          {
            "Name": "PaymentOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Calculating total payment overflowed"
            ]
          },
          {
            "Name": "WithdrawFailed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Withdraw fee failed"
            ]
          },
          {
            "Name": "GasPriceTooLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Gas price is too low."
            ]
          },
          {
            "Name": "InvalidNonce",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Nonce is invalid"
            ]
          },
          {
            "Name": "GasLimitTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Gas limit is too low."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Gas limit is too high."
            ]
          },
          {
            "Name": "InvalidChainId",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The chain id is invalid."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "the signature is invalid."
            ]
          },
          {
            "Name": "Reentrancy",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EVM reentrancy"
            ]
          },
          {
            "Name": "TransactionMustComeFromEOA",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "EIP-3607,"
            ]
          },
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Undefined error."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "862": {
        "Variants": [
          {
            "Name": "TruncatedAccountAlreadyUsed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "EVM Account's nonce is not zero"
            ]
          },
          {
            "Name": "AddressAlreadyBound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Address is already bound"
            ]
          },
          {
            "Name": "BoundAddressCannotBeUsed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bound address cannot be used"
            ]
          },
          {
            "Name": "AddressNotWhitelisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Address not whitelisted"
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "863": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The Asset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `Location` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a Assets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported Location"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          },
          {
            "Name": "RateLimited",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Asset transfer is limited by RateLimiter."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "864": {
        "TypeIds": [
          0,
          307
        ],
        "TypeDef": "Tuple"
      },
      "865": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 867
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 866
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "866": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 154
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "867": {
        "TypeId": 866,
        "TypeDef": "Sequence"
      },
      "868": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "869": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 871
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 870
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "870": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 154
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 154
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "871": {
        "TypeId": 870,
        "TypeDef": "Sequence"
      },
      "872": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low"
            ]
          },
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot convert Amount into Balance type"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed because liquidity restrictions due to locking"
            ]
          },
          {
            "Name": "MaxLocksExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Failed because the maximum locks was exceeded"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "873": {
        "Variants": [
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unable to convert the Amount type into Balance."
            ]
          },
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Balance is too low."
            ]
          },
          {
            "Name": "DepositFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Deposit result is not expected"
            ]
          }
        ],
        "Path": [
          "bifrost_currencies",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "874": {
        "TypeIds": [
          108,
          108
        ],
        "TypeDef": "Tuple"
      },
      "875": {
        "TypeIds": [
          108,
          14
        ],
        "TypeDef": "Tuple"
      },
      "876": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low."
            ]
          },
          {
            "Name": "BalanceOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The operation will cause balance to overflow."
            ]
          },
          {
            "Name": "UnhandledAsset",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unhandled asset."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "877": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message and destination combination was not recognized as being",
              "reachable."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The message and destination was recognized as being reachable but",
              "the operation could not be completed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "878": {
        "TypeIds": [
          316,
          0
        ],
        "TypeDef": "Tuple"
      },
      "879": {
        "TypeIds": [
          316,
          316
        ],
        "TypeDef": "Tuple"
      },
      "880": {
        "TypeIds": [
          403,
          2
        ],
        "TypeDef": "Tuple"
      },
      "881": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 316
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 316
          }
        ],
        "TypeDef": "Variant"
      },
      "882": {
        "Variants": [
          {
            "Name": "Trading",
            "TypeFields": [
              {
                "TypeName": "PairMetadata<Balance, Account>",
                "TypeId": 883
              }
            ],
            "Index": 0
          },
          {
            "Name": "Bootstrap",
            "TypeFields": [
              {
                "TypeName": "BootstrapParameter<Balance, BlockNumber, Account>",
                "TypeId": 884
              }
            ],
            "Index": 1
          },
          {
            "Name": "Disable",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zenlink_protocol",
          "primitives",
          "PairStatus"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Account",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "883": {
        "TypeFields": [
          {
            "Name": "pair_account",
            "TypeName": "Account",
            "TypeId": 0
          },
          {
            "Name": "total_supply",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "zenlink_protocol",
          "primitives",
          "PairMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Account",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "884": {
        "TypeFields": [
          {
            "Name": "target_supply",
            "TypeName": "(Balance, Balance)",
            "TypeId": 476
          },
          {
            "Name": "capacity_supply",
            "TypeName": "(Balance, Balance)",
            "TypeId": 476
          },
          {
            "Name": "accumulated_supply",
            "TypeName": "(Balance, Balance)",
            "TypeId": 476
          },
          {
            "Name": "end_block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "pair_account",
            "TypeName": "Account",
            "TypeId": 0
          }
        ],
        "Path": [
          "zenlink_protocol",
          "primitives",
          "BootstrapParameter"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Account",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "885": {
        "TypeIds": [
          879,
          0
        ],
        "TypeDef": "Tuple"
      },
      "886": {
        "TypeFields": [
          {
            "TypeId": 318
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 316
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "887": {
        "Variants": [
          {
            "Name": "RequireProtocolAdmin",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Require the admin who can reset the admin and receiver of the protocol fee."
            ]
          },
          {
            "Name": "RequireProtocolAdminCandidate",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Require the admin candidate who can become new admin after confirm."
            ]
          },
          {
            "Name": "InvalidFeePoint",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid fee_point"
            ]
          },
          {
            "Name": "UnsupportedAssetType",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unsupported AssetId by this ZenlinkProtocol Version."
            ]
          },
          {
            "Name": "InsufficientAssetBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NativeBalanceTooLow",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Account native currency balance must be greater than ExistentialDeposit."
            ]
          },
          {
            "Name": "DeniedCreatePair",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Trading pair can't be created."
            ]
          },
          {
            "Name": "PairAlreadyExists",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Trading pair already exists."
            ]
          },
          {
            "Name": "PairNotExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Trading pair does not exist."
            ]
          },
          {
            "Name": "AssetNotExists",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Asset does not exist."
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Liquidity is not enough."
            ]
          },
          {
            "Name": "InsufficientPairReserve",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Trading pair does have enough foreign."
            ]
          },
          {
            "Name": "InsufficientTargetAmount",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Get target amount is less than exception."
            ]
          },
          {
            "Name": "ExcessiveSoldAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Sold amount is more than exception."
            ]
          },
          {
            "Name": "InvalidPath",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Can't find pair though trading path."
            ]
          },
          {
            "Name": "IncorrectAssetAmountRange",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Incorrect foreign amount range."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Overflow."
            ]
          },
          {
            "Name": "Deadline",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Transaction block number is larger than the end block number."
            ]
          },
          {
            "Name": "AccountIdBadLocation",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Location given was invalid or unsupported."
            ]
          },
          {
            "Name": "ExecutionFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "DeniedTransferToSelf",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Transfer to self by XCM message."
            ]
          },
          {
            "Name": "TargetChainNotRegistered",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Not in ZenlinkRegistedParaChains."
            ]
          },
          {
            "Name": "InvariantCheckFailed",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Can't pass the K value check"
            ]
          },
          {
            "Name": "PairCreateForbidden",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Created pair can't create now"
            ]
          },
          {
            "Name": "NotInBootstrap",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Pair is not in bootstrap"
            ]
          },
          {
            "Name": "InvalidContributionAmount",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Amount of contribution is invalid."
            ]
          },
          {
            "Name": "UnqualifiedBootstrap",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Amount of contribution is invalid."
            ]
          },
          {
            "Name": "ZeroContribute",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Zero contribute in bootstrap"
            ]
          },
          {
            "Name": "DenyRefund",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Bootstrap deny refund"
            ]
          },
          {
            "Name": "DisableBootstrap",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Bootstrap is disable"
            ]
          },
          {
            "Name": "NotQualifiedAccount",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Not eligible to contribute"
            ]
          },
          {
            "Name": "NoRewardTokens",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Reward of bootstrap is not set."
            ]
          },
          {
            "Name": "ChargeRewardParamsError",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Charge bootstrap extrinsic args has error,"
            ]
          },
          {
            "Name": "ExistRewardsInBootstrap",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Exist some reward in bootstrap,"
            ]
          }
        ],
        "Path": [
          "zenlink_protocol",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "888": {
        "Variants": [
          {
            "Name": "InvalidMessage",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ISMP message"
            ]
          },
          {
            "Name": "MessageNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Requested message was not found"
            ]
          },
          {
            "Name": "ConsensusClientCreationFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Encountered an error while creating the consensus client."
            ]
          },
          {
            "Name": "UnbondingPeriodUpdateFailed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Couldn't update unbonding period"
            ]
          },
          {
            "Name": "ChallengePeriodUpdateFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Couldn't update challenge period"
            ]
          }
        ],
        "Path": [
          "pallet_ismp",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet errors"
        ]
      },
      "889": {
        "Variants": null,
        "Path": [
          "pallet_hyperbridge",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "890": {
        "Variants": [
          {
            "Name": "UnregisteredAsset",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A asset that has not been registered"
            ]
          },
          {
            "Name": "AssetTeleportError",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Error while teleporting asset"
            ]
          },
          {
            "Name": "CoprocessorNotConfigured",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Coprocessor was not configured in the runtime"
            ]
          },
          {
            "Name": "DispatchError",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Asset or update Dispatch Error"
            ]
          },
          {
            "Name": "AssetCreationError",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Asset Id creation failed"
            ]
          },
          {
            "Name": "AssetDecimalsNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Asset decimals not found"
            ]
          },
          {
            "Name": "NotInitialized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Protocol Params have not been initialized"
            ]
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Unknown Asset"
            ]
          },
          {
            "Name": "FailToConvert",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "BoundedVec conversion failed"
            ]
          }
        ],
        "Path": [
          "pallet_token_gateway",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Errors that can be returned by this pallet."
        ]
      },
      "891": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account does not have enough balance to perform the operation."
            ]
          },
          {
            "Name": "ConversionError",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "An error occurred during currency conversion."
            ]
          },
          {
            "Name": "WeightAndFeeNotExist",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "No weight or fee information is available for the requested operation."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message cannot be weighed, possibly due to insufficient information."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The XCM execution has failed."
            ]
          },
          {
            "Name": "CurrencyNotSupport",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The specified currency is not supported by the system."
            ]
          },
          {
            "Name": "MaxCurrenciesReached",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The maximum number of currencies that can be handled has been reached."
            ]
          },
          {
            "Name": "EvmPermitExpired",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "EVM permit expired."
            ]
          },
          {
            "Name": "EvmPermitInvalid",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "EVM permit is invalid."
            ]
          },
          {
            "Name": "EvmPermitCallExecutionError",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "EVM permit call failed."
            ]
          },
          {
            "Name": "EvmPermitRunnerError",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EVM permit call failed."
            ]
          },
          {
            "Name": "PercentageCalculationFailed",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Percentage calculation failed due to overflow."
            ]
          }
        ],
        "Path": [
          "bifrost_flexible_fee",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "892": {
        "TypeIds": [
          4,
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "893": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 894
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 894
          }
        ],
        "TypeDef": "Variant"
      },
      "894": {
        "TypeFields": [
          {
            "Name": "raised",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "cap",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "first_slot",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "last_slot",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "trie_index",
            "TypeName": "TrieIndex",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "FundStatus",
            "TypeId": 388
          }
        ],
        "Path": [
          "bifrost_salp",
          "FundInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "LeasePeriod",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "895": {
        "TypeIds": [
          4,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "896": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "if_mint",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "bifrost_salp",
          "ReserveInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "897": {
        "Variants": [
          {
            "Name": "FirstSlotTooFarInFuture",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The first slot needs to at least be less than 3 `max_value`."
            ]
          },
          {
            "Name": "LastSlotBeforeFirstSlot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Last slot must be greater than first slot."
            ]
          },
          {
            "Name": "LastSlotTooFarInFuture",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The last slot cannot be more then 3 slots after the first slot."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There was an overflow."
            ]
          },
          {
            "Name": "ContributionTooSmall",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The contribution was below the minimum, `MinContribution`."
            ]
          },
          {
            "Name": "ZeroContribution",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The account doesn't have any contribution to the fund."
            ]
          },
          {
            "Name": "InvalidParaId",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid fund index."
            ]
          },
          {
            "Name": "InvalidFundStatus",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Invalid fund status."
            ]
          },
          {
            "Name": "InvalidContributionStatus",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid contribution status."
            ]
          },
          {
            "Name": "CapExceeded",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Contributions exceed maximum amount."
            ]
          },
          {
            "Name": "FundAlreadyCreated",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The fund has been registered."
            ]
          },
          {
            "Name": "XcmFailed",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Crosschain xcm failed"
            ]
          },
          {
            "Name": "NotEnoughReservedAssetsToRefund",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Don't have enough vsToken/vsBond to refund"
            ]
          },
          {
            "Name": "NotEnoughBalanceInRefundPool",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Don't have enough token to refund by users"
            ]
          },
          {
            "Name": "NotEnoughBalanceToUnlock",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Don't have enough vsToken/vsBond to unlock"
            ]
          },
          {
            "Name": "VSBondExpired",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The vsBond is expired now"
            ]
          },
          {
            "Name": "UnRedeemableNow",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The vsBond cannot be redeemed by now"
            ]
          },
          {
            "Name": "NotEnoughFreeAssetsToRedeem",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Dont have enough vsToken/vsBond to redeem"
            ]
          },
          {
            "Name": "NotEnoughBalanceInRedeemPool",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Don't have enough token to redeem by users"
            ]
          },
          {
            "Name": "NotEnoughBalanceInFund",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "InvalidFundSameSlot",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "InvalidFundNotExist",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "InvalidRefund",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "NotEnoughBalanceToContribute",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NotSupportTokenType",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "ResponderNotRelayChain",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Responder is not a relay chain"
            ]
          },
          {
            "Name": "NotFindContributionValue",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "No contribution record found"
            ]
          },
          {
            "Name": "ArgumentsError",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "bifrost_salp",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "898": {
        "Variants": [
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "LocationExisted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Location existed"
            ]
          },
          {
            "Name": "AssetIdNotExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "AssetId not exists"
            ]
          },
          {
            "Name": "AssetIdExisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "AssetId exists"
            ]
          },
          {
            "Name": "CurrencyIdNotExists",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "CurrencyId not exists"
            ]
          },
          {
            "Name": "CurrencyIdExisted",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "CurrencyId exists"
            ]
          }
        ],
        "Path": [
          "bifrost_asset_registry",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "899": {
        "TypeIds": [
          394,
          394
        ],
        "TypeDef": "Tuple"
      },
      "900": {
        "TypeIds": [
          307,
          4
        ],
        "TypeDef": "Tuple"
      },
      "901": {
        "TypeIds": [
          0,
          6,
          393,
          902
        ],
        "TypeDef": "Tuple"
      },
      "902": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Astar",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "Moonbeam",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 2
          },
          {
            "Name": "Hydradx",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "Interlay",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4
          },
          {
            "Name": "Manta",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5
          },
          {
            "Name": "HyperBridge",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "TypeName": "H160",
                "TypeId": 125
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "bifrost_primitives",
          "RedeemType"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "903": {
        "TypeIds": [
          6,
          904
        ],
        "TypeDef": "Tuple"
      },
      "904": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 360
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "905": {
        "TypeIds": [
          393,
          307
        ],
        "TypeDef": "Tuple"
      },
      "906": {
        "TypeIds": [
          6,
          907,
          307
        ],
        "TypeDef": "Tuple"
      },
      "907": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 360
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "908": {
        "TypeIds": [
          6,
          909
        ],
        "TypeDef": "Tuple"
      },
      "909": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 911
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 910
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "910": {
        "TypeIds": [
          6,
          4
        ],
        "TypeDef": "Tuple"
      },
      "911": {
        "TypeId": 910,
        "TypeDef": "Sequence"
      },
      "912": {
        "Variants": [
          {
            "Name": "BelowMinimumMint",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Below minimum mint amount."
            ]
          },
          {
            "Name": "BelowMinimumRedeem",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Below minimum redeem amount."
            ]
          },
          {
            "Name": "InvalidRebondToken",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid token to rebond."
            ]
          },
          {
            "Name": "NotSupportTokenType",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Token type not support."
            ]
          },
          {
            "Name": "NotEnoughBalanceToUnlock",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Not enough balance to unlock."
            ]
          },
          {
            "Name": "TokenToRebondNotZero",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Token unlock ledger not found."
            ]
          },
          {
            "Name": "OngoingTimeUnitNotSet",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Ongoing time unit not set."
            ]
          },
          {
            "Name": "TokenUnlockLedgerNotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Token unlock ledger not found."
            ]
          },
          {
            "Name": "UserUnlockLedgerNotFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "User unlock ledger not found."
            ]
          },
          {
            "Name": "TimeUnitUnlockLedgerNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Time unit unlock ledger not found."
            ]
          },
          {
            "Name": "UnlockDurationNotFound",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Unlock duration not found."
            ]
          },
          {
            "Name": "Unexpected",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Unexpected error."
            ]
          },
          {
            "Name": "CalculationOverflow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Calculation overflow."
            ]
          },
          {
            "Name": "ExceedMaximumUnlockId",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Exceed maximum unlock id."
            ]
          },
          {
            "Name": "TooManyRedeems",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too many redeems."
            ]
          },
          {
            "Name": "CanNotRebond",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Can not rebond."
            ]
          },
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Not enough balance."
            ]
          },
          {
            "Name": "VeBNCCheckingError",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "veBNC checking error."
            ]
          },
          {
            "Name": "IncentiveCoefNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "IncentiveCoef not found."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Too many locks."
            ]
          },
          {
            "Name": "NoUnlockRecord",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "No unlock record."
            ]
          },
          {
            "Name": "FailToRemoveLock",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Fail to remove lock."
            ]
          },
          {
            "Name": "BalanceZero",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Balance not zero."
            ]
          },
          {
            "Name": "IncentiveLockBlocksNotSet",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "IncentiveLockBlocksNotSet"
            ]
          }
        ],
        "Path": [
          "bifrost_vtoken_minting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "913": {
        "TypeIds": [
          307,
          53
        ],
        "TypeDef": "Tuple"
      },
      "914": {
        "TypeIds": [
          307,
          139
        ],
        "TypeDef": "Tuple"
      },
      "915": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 400
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 139
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "916": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 587
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 588
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "917": {
        "TypeIds": [
          585,
          4
        ],
        "TypeDef": "Tuple"
      },
      "918": {
        "TypeIds": [
          580,
          4
        ],
        "TypeDef": "Tuple"
      },
      "919": {
        "TypeIds": [
          393,
          4
        ],
        "TypeDef": "Tuple"
      },
      "920": {
        "TypeId": 921,
        "TypeDef": "Sequence"
      },
      "921": {
        "TypeIds": [
          139,
          13
        ],
        "TypeDef": "Tuple"
      },
      "922": {
        "Variants": [
          {
            "Name": "OperateOriginNotSet",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotSupportedCurrencyId",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "FailToAddDelegator",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OverFlow",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "UnderFlow",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "NotExist",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "LowerThanMinimum",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "GreaterThanMaximum",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "AlreadyBonded",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "AccountNotExist",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DelegatorNotExist",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "XcmFailure",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DelegatorNotBonded",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ExceedActiveMaximum",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "ProblematicLedger",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "NotEnoughToUnbond",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "ExceedUnlockingRecords",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "RebondExceedUnlockingAmount",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "DecodingError",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "EncodingError",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "VectorEmpty",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "ValidatorSetNotExist",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "ValidatorNotExist",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "InvalidTimeUnit",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "AmountZero",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "AmountNotZero",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "AlreadyExist",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ValidatorStillInUse",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "TimeUnitNotExist",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeeSourceNotExist",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "WeightAndFeeNotExists",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "MinimumsAndMaximumsNotExist",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "QueryNotExist",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "DelaysNotExist",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "Unexpected",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "QueryResponseRemoveError",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "InvalidHostingFee",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "InvalidAccount",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "IncreaseTokenPoolError",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "TuneExchangeRateLimitNotSet",
            "TypeFields": null,
            "Index": 40
          },
          {
            "Name": "CurrencyLatestTuneRecordNotExist",
            "TypeFields": null,
            "Index": 41
          },
          {
            "Name": "InvalidTransferSource",
            "TypeFields": null,
            "Index": 42
          },
          {
            "Name": "ValidatorNotProvided",
            "TypeFields": null,
            "Index": 43
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 44
          },
          {
            "Name": "ValidatorNotBonded",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AlreadyRequested",
            "TypeFields": null,
            "Index": 46
          },
          {
            "Name": "RequestNotExist",
            "TypeFields": null,
            "Index": 47
          },
          {
            "Name": "AlreadyLeaving",
            "TypeFields": null,
            "Index": 48
          },
          {
            "Name": "DelegatorNotLeaving",
            "TypeFields": null,
            "Index": 49
          },
          {
            "Name": "RequestNotDue",
            "TypeFields": null,
            "Index": 50
          },
          {
            "Name": "LeavingNotDue",
            "TypeFields": null,
            "Index": 51
          },
          {
            "Name": "DelegatorSetNotExist",
            "TypeFields": null,
            "Index": 52
          },
          {
            "Name": "DelegatorLeaving",
            "TypeFields": null,
            "Index": 53
          },
          {
            "Name": "DelegatorAlreadyLeaving",
            "TypeFields": null,
            "Index": 54
          },
          {
            "Name": "ValidatorError",
            "TypeFields": null,
            "Index": 55
          },
          {
            "Name": "AmountNone",
            "TypeFields": null,
            "Index": 56
          },
          {
            "Name": "InvalidDelays",
            "TypeFields": null,
            "Index": 57
          },
          {
            "Name": "OngoingTimeUnitUpdateIntervalNotExist",
            "TypeFields": null,
            "Index": 58
          },
          {
            "Name": "LastTimeUpdatedOngoingTimeUnitNotExist",
            "TypeFields": null,
            "Index": 59
          },
          {
            "Name": "TooFrequent",
            "TypeFields": null,
            "Index": 60
          },
          {
            "Name": "DestAccountNotValid",
            "TypeFields": null,
            "Index": 61
          },
          {
            "Name": "WhiteListNotExist",
            "TypeFields": null,
            "Index": 62
          },
          {
            "Name": "DelegatorAlreadyTuned",
            "TypeFields": null,
            "Index": 63
          },
          {
            "Name": "FeeTooHigh",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 65
          },
          {
            "Name": "VectorTooLong",
            "TypeFields": null,
            "Index": 66
          },
          {
            "Name": "MultiCurrencyError",
            "TypeFields": null,
            "Index": 67
          },
          {
            "Name": "NotDelegateValidator",
            "TypeFields": null,
            "Index": 68
          },
          {
            "Name": "DividedByZero",
            "TypeFields": null,
            "Index": 69
          },
          {
            "Name": "SharePriceNotValid",
            "TypeFields": null,
            "Index": 70
          },
          {
            "Name": "InvalidAmount",
            "TypeFields": null,
            "Index": 71
          },
          {
            "Name": "ValidatorMultilocationNotvalid",
            "TypeFields": null,
            "Index": 72
          },
          {
            "Name": "AmountNotProvided",
            "TypeFields": null,
            "Index": 73
          },
          {
            "Name": "FailToConvert",
            "TypeFields": null,
            "Index": 74
          },
          {
            "Name": "ExceedMaxLengthLimit",
            "TypeFields": null,
            "Index": 75
          },
          {
            "Name": "TransferToError",
            "TypeFields": null,
            "Index": 76,
            "Docs": [
              "Transfer to failed"
            ]
          },
          {
            "Name": "StablePoolNotFound",
            "TypeFields": null,
            "Index": 77
          },
          {
            "Name": "StablePoolTokenIndexNotFound",
            "TypeFields": null,
            "Index": 78
          },
          {
            "Name": "ExceedLimit",
            "TypeFields": null,
            "Index": 79
          },
          {
            "Name": "InvalidPageNumber",
            "TypeFields": null,
            "Index": 80
          },
          {
            "Name": "NoMoreValidatorBoostListForCurrency",
            "TypeFields": null,
            "Index": 81
          },
          {
            "Name": "HandleHyperbridgeOracleError",
            "TypeFields": null,
            "Index": 82,
            "Docs": [
              "Hyperbridge price feed failed."
            ]
          }
        ],
        "Path": [
          "bifrost_slp",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "923": {
        "TypeIds": [
          307,
          437
        ],
        "TypeDef": "Tuple"
      },
      "924": {
        "Variants": [
          {
            "Name": "XcmSendFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "OperationWeightAndFeeNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The weight and fee for the operation does not exist."
            ]
          },
          {
            "Name": "FailToConvert",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to convert currency id."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message is unweighable."
            ]
          }
        ],
        "Path": [
          "bifrost_xcm_interface",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "925": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NotSupportTokenType",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CalculationOverflow",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "bifrost_vstoken_conversion",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "926": {
        "TypeFields": [
          {
            "Name": "tokens_proportion",
            "TypeName": "BTreeMap<CurrencyIdOf, Perbill>",
            "TypeId": 927
          },
          {
            "Name": "basic_token",
            "TypeName": "(CurrencyIdOf, Perbill)",
            "TypeId": 444
          },
          {
            "Name": "total_shares",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "basic_rewards",
            "TypeName": "BTreeMap<CurrencyIdOf, BalanceOf>",
            "TypeId": 600
          },
          {
            "Name": "rewards",
            "TypeName": "BTreeMap<CurrencyIdOf, (BalanceOf, BalanceOf)>",
            "TypeId": 928
          },
          {
            "Name": "state",
            "TypeName": "PoolState",
            "TypeId": 929
          },
          {
            "Name": "keeper",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "reward_issuer",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "gauge",
            "TypeName": "Option<PoolId>",
            "TypeId": 87
          },
          {
            "Name": "block_startup",
            "TypeName": "Option<BlockNumberFor>",
            "TypeId": 87
          },
          {
            "Name": "min_deposit_to_start",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "after_block_to_start",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "withdraw_limit_time",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "claim_limit_time",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "withdraw_limit_count",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "bifrost_farming",
          "rewards",
          "PoolInfo"
        ],
        "TypeParams": [
          {
            "Name": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "CurrencyIdOf",
            "TypeId": 307
          },
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "927": {
        "TypeFields": [
          {
            "TypeId": 443
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 307
          },
          {
            "Name": "V",
            "TypeId": 48
          }
        ],
        "TypeDef": "Composite"
      },
      "928": {
        "TypeFields": [
          {
            "TypeId": 474
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 307
          },
          {
            "Name": "V",
            "TypeId": 476
          }
        ],
        "TypeDef": "Composite"
      },
      "929": {
        "Variants": [
          {
            "Name": "UnCharged",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Charged",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Dead",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Retired",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "bifrost_farming",
          "rewards",
          "PoolState"
        ],
        "TypeDef": "Variant"
      },
      "930": {
        "TypeFields": [
          {
            "Name": "pid",
            "TypeName": "PoolId",
            "TypeId": 4
          },
          {
            "Name": "token",
            "TypeName": "CurrencyIdOf",
            "TypeId": 307
          },
          {
            "Name": "keeper",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "reward_issuer",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "rewards",
            "TypeName": "BTreeMap<CurrencyIdOf, (BalanceOf, BalanceOf, BalanceOf)>",
            "TypeId": 931
          },
          {
            "Name": "gauge_basic_rewards",
            "TypeName": "BTreeMap<CurrencyIdOf, BalanceOf>",
            "TypeId": 600
          },
          {
            "Name": "max_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "gauge_amount",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "total_time_factor",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "gauge_state",
            "TypeName": "GaugeState",
            "TypeId": 935
          },
          {
            "Name": "gauge_last_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_farming",
          "gauge",
          "GaugePoolInfo"
        ],
        "TypeParams": [
          {
            "Name": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "CurrencyIdOf",
            "TypeId": 307
          },
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "931": {
        "TypeFields": [
          {
            "TypeId": 933
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 307
          },
          {
            "Name": "V",
            "TypeId": 932
          }
        ],
        "TypeDef": "Composite"
      },
      "932": {
        "TypeIds": [
          6,
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "933": {
        "TypeId": 934,
        "TypeDef": "Sequence"
      },
      "934": {
        "TypeIds": [
          307,
          932
        ],
        "TypeDef": "Tuple"
      },
      "935": {
        "Variants": [
          {
            "Name": "Unbond",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Bonded",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_farming",
          "gauge",
          "GaugeState"
        ],
        "TypeDef": "Variant"
      },
      "936": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "gauge_amount",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "total_time_factor",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "latest_time_factor",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "claimed_time_factor",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "gauge_start_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "gauge_stop_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "gauge_last_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "last_claim_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_farming",
          "gauge",
          "GaugeInfo"
        ],
        "TypeParams": [
          {
            "Name": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "937": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountIdOf",
            "TypeId": 0
          },
          {
            "Name": "share",
            "TypeName": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "withdrawn_rewards",
            "TypeName": "BTreeMap<CurrencyIdOf, BalanceOf>",
            "TypeId": 600
          },
          {
            "Name": "claim_last_block",
            "TypeName": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "withdraw_list",
            "TypeName": "Vec<(BlockNumberFor, BalanceOf)>",
            "TypeId": 740
          }
        ],
        "Path": [
          "bifrost_farming",
          "rewards",
          "ShareInfo"
        ],
        "TypeParams": [
          {
            "Name": "BalanceOf",
            "TypeId": 6
          },
          {
            "Name": "CurrencyIdOf",
            "TypeId": 307
          },
          {
            "Name": "BlockNumberFor",
            "TypeId": 4
          },
          {
            "Name": "AccountIdOf",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "938": {
        "TypeFields": [
          {
            "Name": "total_votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "start_round",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "end_round",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "round_length",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_farming",
          "boost",
          "BoostPoolInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "939": {
        "TypeFields": [
          {
            "Name": "vote_amount",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "vote_list",
            "TypeName": "BoundedVec<(PoolId, Percent), T::WhitelistMaximumLimit>",
            "TypeId": 940
          },
          {
            "Name": "last_vote",
            "TypeName": "BlockNumberFor<T>",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_farming",
          "boost",
          "UserBoostInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "940": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 446
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 447
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "941": {
        "TypeIds": [
          4,
          307
        ],
        "TypeDef": "Tuple"
      },
      "942": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 360
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "943": {
        "Variants": [
          {
            "Name": "NotNullable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The field tokens_proportion cannot be empty."
            ]
          },
          {
            "Name": "PoolDoesNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The pool does not exist."
            ]
          },
          {
            "Name": "GaugePoolNotExist",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The gauge pool does not exist."
            ]
          },
          {
            "Name": "GaugeInfoNotExist",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The gauge info does not exist."
            ]
          },
          {
            "Name": "InvalidPoolState",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The pool is not in the correct state."
            ]
          },
          {
            "Name": "CanNotClaim",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "claim_limit_time exceeded"
            ]
          },
          {
            "Name": "GaugeMaxBlockOverflow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "gauge pool max_block exceeded"
            ]
          },
          {
            "Name": "WithdrawLimitCountExceeded",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "withdraw_limit_time exceeded"
            ]
          },
          {
            "Name": "ShareInfoNotExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "User's personal share info does not exist"
            ]
          },
          {
            "Name": "CanNotDeposit",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The current block height needs to be greater than the field after_block_to_start in",
              "order to execute deposit."
            ]
          },
          {
            "Name": "WhitelistEmpty",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Whitelist cannot be empty"
            ]
          },
          {
            "Name": "RoundNotOver",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "When starting a round, the field end_round needs to be 0 to indicate that the previous",
              "round has ended."
            ]
          },
          {
            "Name": "RoundLengthNotSet",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The round length needs to be set when starting a round"
            ]
          },
          {
            "Name": "WhitelistLimitExceeded",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Whitelist maximum limit exceeded"
            ]
          },
          {
            "Name": "NobodyVoting",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "No one voted for this pool."
            ]
          },
          {
            "Name": "NotInWhitelist",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The pool is not in the whitelist"
            ]
          },
          {
            "Name": "PercentOverflow",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The total voting percentage of users cannot exceed 100%."
            ]
          },
          {
            "Name": "PoolNotCleared",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The pool cannot be cleaned completely"
            ]
          },
          {
            "Name": "InvalidRemoveAmount",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Invalid remove amount"
            ]
          },
          {
            "Name": "UserFarmingPoolOverflow",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "User farming pool overflow"
            ]
          }
        ],
        "Path": [
          "bifrost_farming",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "944": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "RoundIndex",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "length",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "types",
          "RoundInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "945": {
        "TypeFields": [
          {
            "Name": "system_stakable_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "system_shadow_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "pending_redeem_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "current_config",
            "TypeName": "TokenConfig<Balance, BlockNumber>",
            "TypeId": 946
          },
          {
            "Name": "new_config",
            "TypeName": "TokenConfig<Balance, BlockNumber>",
            "TypeId": 946
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "types",
          "TokenInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "946": {
        "TypeFields": [
          {
            "Name": "exec_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "system_stakable_base",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "types",
          "TokenConfig"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "947": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "948": {
        "Variants": [
          {
            "Name": "InvalidTokenConfig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid token config params"
            ]
          },
          {
            "Name": "ExceedMaxTokenLen",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "exceed max token len"
            ]
          },
          {
            "Name": "ExceedMaxFarmingPoolidLen",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "exceed max poolid len"
            ]
          },
          {
            "Name": "TokenInfoNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Token info not found"
            ]
          },
          {
            "Name": "PayoutFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "payout error"
            ]
          },
          {
            "Name": "ConversionError",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Error converting Vec to BoundedVec."
            ]
          }
        ],
        "Path": [
          "bifrost_system_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "949": {
        "Variants": [
          {
            "Name": "NotSupportProportion",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not support proportion"
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Existential deposit"
            ]
          },
          {
            "Name": "DistributionNotExist",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Distribution not exist"
            ]
          },
          {
            "Name": "PriceOracleNotReady",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Price oracle not ready"
            ]
          },
          {
            "Name": "PriceIsZero",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Price is zero"
            ]
          },
          {
            "Name": "IntervalIsZero",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Interval is zero"
            ]
          },
          {
            "Name": "ValueIsZero",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Value is zero"
            ]
          },
          {
            "Name": "TokensProportionsNotCleared",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Tokens proportions not cleared"
            ]
          }
        ],
        "Path": [
          "bifrost_fee_share",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "950": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "951": {
        "TypeIds": [
          307,
          0
        ],
        "TypeDef": "Tuple"
      },
      "952": {
        "TypeIds": [
          307,
          132
        ],
        "TypeDef": "Tuple"
      },
      "953": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Indicates that the balance is not sufficient for the requested operation."
            ]
          },
          {
            "Name": "NotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Indicates that the specified item does not exist."
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Indicates that the operation is not allowed for the current context."
            ]
          },
          {
            "Name": "CurrencyNotSupportCrossInAndOut",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Indicates that the currency does not support crossing in and out."
            ]
          },
          {
            "Name": "NoMultilocationMapping",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Indicates that there is no mapping for the specified multilocation."
            ]
          },
          {
            "Name": "AlreadyExist",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Indicates that the item already exists."
            ]
          },
          {
            "Name": "NoCrossingMinimumSet",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Indicates that there is no minimum crossing amount set for the operation."
            ]
          },
          {
            "Name": "AmountLowerThanMinimum",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Indicates that the specified amount is lower than the required minimum."
            ]
          },
          {
            "Name": "ListOverflow",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Indicates that the list has reached its maximum capacity."
            ]
          }
        ],
        "Path": [
          "bifrost_cross_in_out",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "954": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bb_bnc",
          "LockedBalance"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "955": {
        "TypeFields": [
          {
            "Name": "bias",
            "TypeName": "i128",
            "TypeId": 956
          },
          {
            "Name": "slope",
            "TypeName": "i128",
            "TypeId": 956
          },
          {
            "Name": "block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bb_bnc",
          "Point"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "956": {
        "Primitive": "I128",
        "TypeDef": "Primitive"
      },
      "957": {
        "TypeIds": [
          6,
          291
        ],
        "TypeDef": "Tuple"
      },
      "958": {
        "TypeFields": [
          {
            "Name": "old_markup_coefficient",
            "TypeName": "FixedU128",
            "TypeId": 458
          },
          {
            "Name": "markup_coefficient",
            "TypeName": "FixedU128",
            "TypeId": 458
          }
        ],
        "Path": [
          "bb_bnc",
          "traits",
          "UserMarkupInfo"
        ],
        "TypeDef": "Composite"
      },
      "959": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "markup_coefficient",
            "TypeName": "FixedU128",
            "TypeId": 458
          },
          {
            "Name": "refresh_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "bb_bnc",
          "traits",
          "LockedToken"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "960": {
        "TypeFields": [
          {
            "Name": "markup_coefficient",
            "TypeName": "FixedU128",
            "TypeId": 458
          },
          {
            "Name": "hardcap",
            "TypeName": "FixedU128",
            "TypeId": 458
          },
          {
            "Name": "update_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "rwi",
            "TypeName": "FixedU128",
            "TypeId": 458
          }
        ],
        "Path": [
          "bb_bnc",
          "traits",
          "MarkupCoefficientInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "961": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 473
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "962": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 473
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "963": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not enough balance"
            ]
          },
          {
            "Name": "Expired",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Block number is expired"
            ]
          },
          {
            "Name": "BelowMinimumMint",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Below minimum mint"
            ]
          },
          {
            "Name": "LockNotExist",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Lock does not exist"
            ]
          },
          {
            "Name": "LockExist",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Lock already exists"
            ]
          },
          {
            "Name": "ArgumentsError",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Arguments error"
            ]
          },
          {
            "Name": "ExceedsMaxPositions",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Exceeds max positions"
            ]
          },
          {
            "Name": "NoController",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No controller"
            ]
          }
        ],
        "Path": [
          "bb_bnc",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "964": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "965": {
        "TypeFields": [
          {
            "Name": "xcm_fee",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "xcm_weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "last_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "contract",
            "TypeName": "H160",
            "TypeId": 125
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "EthereumCallConfiguration"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "966": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "967": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 968
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 602
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "968": {
        "TypeId": 602,
        "TypeDef": "Sequence"
      },
      "969": {
        "TypeFields": [
          {
            "Name": "to",
            "TypeName": "H160",
            "TypeId": 125
          },
          {
            "Name": "timeout",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "last_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tokens",
            "TypeName": "BoundedVec<(CurrencyId, H160), ConstU32<10>>",
            "TypeId": 463
          },
          {
            "Name": "payer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "HyperBridgeOracleConfig"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "970": {
        "TypeFields": [
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "last_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "fee",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "tokens",
            "TypeName": "BoundedVec<(CurrencyId, Location, Location), ConstU32<10>>",
            "TypeId": 466
          }
        ],
        "Path": [
          "bifrost_slpx",
          "types",
          "HydrationOracleConfig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "971": {
        "TypeIds": [
          4,
          2
        ],
        "TypeDef": "Tuple"
      },
      "972": {
        "Variants": [
          {
            "Name": "AccountAlreadyExists",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Contract Account already exists in the whitelist"
            ]
          },
          {
            "Name": "CurrencyAlreadyExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Currency already exists in the whitelist"
            ]
          },
          {
            "Name": "AccountNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Contract Account is not in the whitelist"
            ]
          },
          {
            "Name": "CurrencyNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not in the whitelist"
            ]
          },
          {
            "Name": "WhitelistOverflow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The maximum number of whitelist addresses is 10"
            ]
          },
          {
            "Name": "NotSetExecutionFee",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Execution fee not set"
            ]
          },
          {
            "Name": "FreeBalanceTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Insufficient balance to execute the fee"
            ]
          },
          {
            "Name": "OrderQueueOverflow",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The maximum number of order is 500"
            ]
          },
          {
            "Name": "CurrencyListOverflow",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The maximum number of currency id is 10"
            ]
          },
          {
            "Name": "ErrorConvertVtoken",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Convert vtoken error"
            ]
          },
          {
            "Name": "ErrorEncode",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Error encode"
            ]
          },
          {
            "Name": "ErrorValidating",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ErrorDelivering",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "ErrorVtokenMiting",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ErrorTransferTo",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "ErrorChargeFee",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "ErrorArguments",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "AsyncMintTooFrequent",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Async Mint execution too frequent"
            ]
          },
          {
            "Name": "AsyncMintIssuanceRatioTooHigh",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Async Mint issuance ratio too high"
            ]
          },
          {
            "Name": "AsyncMintConfigNotSet",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Async Mint configuration not set"
            ]
          }
        ],
        "Path": [
          "bifrost_slpx",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "973": {
        "TypeFields": [
          {
            "Name": "rank",
            "TypeName": "Rank",
            "TypeId": 53
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "MemberRecord"
        ],
        "TypeDef": "Composite"
      },
      "974": {
        "TypeIds": [
          53,
          0
        ],
        "TypeDef": "Tuple"
      },
      "975": {
        "TypeIds": [
          53,
          4
        ],
        "TypeDef": "Tuple"
      },
      "976": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "977": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account is not a member."
            ]
          },
          {
            "Name": "NotPolling",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The given poll index is unknown or has closed."
            ]
          },
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given poll is still ongoing."
            ]
          },
          {
            "Name": "NoneRemaining",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are no further records to be removed."
            ]
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Unexpected error in state."
            ]
          },
          {
            "Name": "RankTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The member's rank is too low to vote."
            ]
          },
          {
            "Name": "InvalidWitness",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The information provided is incorrect."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The origin is not sufficiently privileged to do the operation."
            ]
          },
          {
            "Name": "SameMember",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The new member to exchange is the same as the old member"
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The max member count for the rank has been reached."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "978": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 979
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 733
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 54
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 606
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 232
          }
        ],
        "TypeDef": "Variant"
      },
      "979": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 54
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 126
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 732
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 733
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 734
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 606
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 736
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 53
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 104
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 54
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 606
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 232
          }
        ],
        "TypeDef": "Composite"
      },
      "980": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 626
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 232
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "981": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          },
          {
            "Name": "PreimageStoredWithDifferentLength",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The preimage is stored with a different length than the one provided."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "982": {
        "TypeFields": [
          {
            "Name": "pool_id",
            "TypeName": "StableAssetPoolId",
            "TypeId": 4
          },
          {
            "Name": "pool_asset",
            "TypeName": "AssetId",
            "TypeId": 307
          },
          {
            "Name": "assets",
            "TypeName": "Vec<AssetId>",
            "TypeId": 383
          },
          {
            "Name": "precisions",
            "TypeName": "Vec<AtLeast64BitUnsigned>",
            "TypeId": 473
          },
          {
            "Name": "mint_fee",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "swap_fee",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "redeem_fee",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "total_supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "a",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "a_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "future_a",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "future_a_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "balances",
            "TypeName": "Vec<Balance>",
            "TypeId": 473
          },
          {
            "Name": "fee_recipient",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "account_id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "yield_recipient",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "precision",
            "TypeName": "AtLeast64BitUnsigned",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_stable_asset",
          "StableAssetPoolInfo"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 307
          },
          {
            "Name": "AtLeast64BitUnsigned",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "983": {
        "Variants": [
          {
            "Name": "InconsistentStorage",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The pool is existed, cannot create again."
            ]
          },
          {
            "Name": "InvalidPoolAsset",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The pool asset is invalid."
            ]
          },
          {
            "Name": "ArgumentsMismatch",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The arguments are mismatch, not match the expected length."
            ]
          },
          {
            "Name": "ArgumentsError",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The arguments are error."
            ]
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The pool is not found, cannot modify."
            ]
          },
          {
            "Name": "Math",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "make mistakes in calculation."
            ]
          },
          {
            "Name": "InvalidPoolValue",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The new invariant of the pool is invalid."
            ]
          },
          {
            "Name": "MintUnderMin",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The actual output amount is less than the expected minimum output amount when add",
              "liquidity."
            ]
          },
          {
            "Name": "SwapUnderMin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The actual output amount is less than the expected minimum output amount when swap."
            ]
          },
          {
            "Name": "RedeemUnderMin",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The actual output amount is less than the expected minimum output amount when redeem."
            ]
          },
          {
            "Name": "RedeemOverMax",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The actual input amount is more than the expected maximum input amount when redeem",
              "multi."
            ]
          },
          {
            "Name": "TokenRateNotCleared",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The old token rate is not cleared."
            ]
          }
        ],
        "Path": [
          "bifrost_stable_asset",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "984": {
        "Variants": [
          {
            "Name": "SwapUnderMin",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A swap occurred, but the result is below the minimum swap amount."
            ]
          },
          {
            "Name": "MintUnderMin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A minting operation occurred, but the minted amount is below the minimum mint amount."
            ]
          },
          {
            "Name": "CantMint",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot mint tokens, possibly due to invalid parameters or illegal state."
            ]
          },
          {
            "Name": "RedeemOverMax",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The redeemed amount exceeds the allowed maximum."
            ]
          },
          {
            "Name": "TokenRateNotSet",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The token rate is not set, preventing related operations."
            ]
          }
        ],
        "Path": [
          "bifrost_stable_pool",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "985": {
        "Variants": [
          {
            "Name": "Casting",
            "TypeFields": [
              {
                "TypeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                "TypeId": 986
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "TypeName": "Delegating<Balance, AccountId, BlockNumber>",
                "TypeId": 991
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "986": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "BoundedVec<(PollIndex, AccountVote<Balance>, DerivativeIndex, Balance),\nMaxVotes>",
            "TypeId": 987
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 723
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 990
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "Casting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Composite"
      },
      "987": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 989
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 988
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "988": {
        "TypeIds": [
          4,
          478,
          53,
          6
        ],
        "TypeDef": "Tuple"
      },
      "989": {
        "TypeId": 988,
        "TypeDef": "Sequence"
      },
      "990": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "991": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "target",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "conviction",
            "TypeName": "Conviction",
            "TypeId": 101
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 723
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 990
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "vote",
          "Delegating"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "992": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 310
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 311
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "993": {
        "TypeIds": [
          307,
          4,
          53,
          0,
          994
        ],
        "TypeDef": "Tuple"
      },
      "994": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 995
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 995
          }
        ],
        "TypeDef": "Variant"
      },
      "995": {
        "TypeIds": [
          478,
          6
        ],
        "TypeDef": "Tuple"
      },
      "996": {
        "TypeIds": [
          307,
          4,
          53
        ],
        "TypeDef": "Tuple"
      },
      "997": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 998
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 53
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "998": {
        "TypeId": 53,
        "TypeDef": "Sequence"
      },
      "999": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 1001
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1000
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1000": {
        "TypeIds": [
          53,
          478
        ],
        "TypeDef": "Tuple"
      },
      "1001": {
        "TypeId": 1000,
        "TypeDef": "Sequence"
      },
      "1002": {
        "TypeIds": [
          0,
          307,
          4
        ],
        "TypeDef": "Tuple"
      },
      "1003": {
        "Variants": [
          {
            "Name": "XcmFailure",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "XCM execution Failure"
            ]
          },
          {
            "Name": "VTokenNotSupport",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given currency is not supported."
            ]
          },
          {
            "Name": "DerivativeIndexOccupied",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Derivative index occupied."
            ]
          },
          {
            "Name": "PendingVote",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Another vote is pending."
            ]
          },
          {
            "Name": "PendingUpdateReferendumStatus",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Another update referendum status is pending."
            ]
          },
          {
            "Name": "NoData",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No data available in storage."
            ]
          },
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Poll is not ongoing."
            ]
          },
          {
            "Name": "NotCompleted",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Poll is not completed."
            ]
          },
          {
            "Name": "NotKilled",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Poll is not killed."
            ]
          },
          {
            "Name": "NotExpired",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Poll is not expired."
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "NoPermissionYet",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "NotStandardVote",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The given vote is not Standard vote."
            ]
          },
          {
            "Name": "InvalidConviction",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The given conviction is not valid."
            ]
          },
          {
            "Name": "OutOfRange",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The given value is out of range."
            ]
          },
          {
            "Name": "InvalidCallDispatch",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "CallDecodeFailed",
            "TypeFields": null,
            "Index": 21
          }
        ],
        "Path": [
          "bifrost_vtoken_voting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1004": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 307
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1005": {
        "TypeFields": [
          {
            "Name": "principal",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "borrow_index",
            "TypeName": "Rate",
            "TypeId": 458
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "BorrowSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "1006": {
        "TypeFields": [
          {
            "Name": "voucher_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_collateral",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "Deposits"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "1007": {
        "TypeFields": [
          {
            "Name": "total_earned_prior",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "exchange_rate_prior",
            "TypeName": "Rate",
            "TypeId": 458
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "EarnedSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "1008": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "lend_market",
          "types",
          "RewardMarketState"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "1009": {
        "Variants": [
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Insufficient liquidity to borrow more or disable collateral"
            ]
          },
          {
            "Name": "InsufficientDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Insufficient deposit to redeem"
            ]
          },
          {
            "Name": "TooMuchRepay",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Repay amount greater than allowed"
            ]
          },
          {
            "Name": "DuplicateOperation",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Asset already enabled/disabled collateral"
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "No deposit asset"
            ]
          },
          {
            "Name": "InsufficientCollateral",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Repay amount more than collateral amount"
            ]
          },
          {
            "Name": "LiquidatorIsBorrower",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Liquidator is same as borrower"
            ]
          },
          {
            "Name": "DepositsAreNotCollateral",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Deposits are not used as a collateral"
            ]
          },
          {
            "Name": "InsufficientShortfall",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Insufficient shortfall to repay"
            ]
          },
          {
            "Name": "InsufficientReserves",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Insufficient reserves"
            ]
          },
          {
            "Name": "InvalidRateModelParam",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Invalid rate model params"
            ]
          },
          {
            "Name": "MarketNotActivated",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Market not activated"
            ]
          },
          {
            "Name": "PriceOracleNotReady",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Oracle price not ready"
            ]
          },
          {
            "Name": "PriceIsZero",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Oracle price is zero"
            ]
          },
          {
            "Name": "InvalidCurrencyId",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Invalid asset id"
            ]
          },
          {
            "Name": "InvalidLendTokenId",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Invalid lend token id"
            ]
          },
          {
            "Name": "MarketDoesNotExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Market does not exist"
            ]
          },
          {
            "Name": "MarketAlreadyExists",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Market already exists"
            ]
          },
          {
            "Name": "NewMarketMustHavePendingState",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "New markets must have a pending state"
            ]
          },
          {
            "Name": "SupplyCapacityExceeded",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Upper bound of supplying is exceeded"
            ]
          },
          {
            "Name": "BorrowCapacityExceeded",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Upper bound of borrowing is exceeded"
            ]
          },
          {
            "Name": "InsufficientCash",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Insufficient cash in the pool"
            ]
          },
          {
            "Name": "InvalidFactor",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The factor should be greater than 0% and less than 100%"
            ]
          },
          {
            "Name": "InvalidSupplyCap",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The supply cap cannot be zero"
            ]
          },
          {
            "Name": "InvalidExchangeRate",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The exchange rate should be greater than 0.02 and less than 1"
            ]
          },
          {
            "Name": "InvalidAmount",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Amount cannot be zero"
            ]
          },
          {
            "Name": "PayerIsSigner",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Payer cannot be signer"
            ]
          },
          {
            "Name": "CodecError",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Codec error"
            ]
          },
          {
            "Name": "CollateralReserved",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Collateral is reserved and cannot be liquidated"
            ]
          },
          {
            "Name": "MarketBondDoesNotExist",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Market bond does not exist"
            ]
          },
          {
            "Name": "ConversionError",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Error converting Vec to BoundedVec."
            ]
          }
        ],
        "Path": [
          "lend_market",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1010": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<T, S>",
            "TypeId": 1011
          }
        ],
        "Path": [
          "orml_utilities",
          "ordered_set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1011": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1012": {
        "Variants": [
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender does not have permission"
            ]
          },
          {
            "Name": "AlreadyFeeded",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Feeder has already feeded at this block"
            ]
          }
        ],
        "Path": [
          "orml_oracle",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1013": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1014": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1015": {
        "Variants": [
          {
            "Name": "ArgumentsError",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Arguments error, old rate is equal to new rate"
            ]
          },
          {
            "Name": "NotSupportTokenType",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not support token type"
            ]
          }
        ],
        "Path": [
          "leverage_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1016": {
        "TypeIds": [
          0,
          1017
        ],
        "TypeDef": "Tuple"
      },
      "1017": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1018": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Overflow error, indicating that a mathematical operation exceeded the allowed numeric range."
            ]
          },
          {
            "Name": "ChannelNameTooLong",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Error indicating that the provided channel name exceeds the maximum allowed length."
            ]
          },
          {
            "Name": "ConversionError",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Conversion error, indicating a failure during a type conversion operation."
            ]
          },
          {
            "Name": "ChannelNotExist",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Error indicating that the specified channel does not exist in storage."
            ]
          },
          {
            "Name": "TransferError",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer error, indicating that a fund transfer operation has failed."
            ]
          },
          {
            "Name": "VtokenNotConfiguredForCommission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Error indicating that the vToken is not configured for commission calculations."
            ]
          },
          {
            "Name": "InvalidCommissionRate",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid commission rate, indicating that the provided commission rate is out of range or malformed."
            ]
          },
          {
            "Name": "CommissionTokenAlreadySet",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Error indicating that the commission token has already been set and cannot be reconfigured."
            ]
          },
          {
            "Name": "InvalidVtoken",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid vToken, indicating that the provided vToken is invalid or unrecognized."
            ]
          },
          {
            "Name": "NoChangesMade",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Error indicating that no changes were made during a modification operation.",
              "This means that a modification request was issued but did not result in any actual changes."
            ]
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Error indicating a division operation encountered a divisor of zero.",
              "This is a critical error, as division by zero is undefined and cannot be performed."
            ]
          },
          {
            "Name": "RemovalNotComplete",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Error indicating that the removal operation was not successfully completed.",
              "This means an attempt to remove a resource or record did not succeed."
            ]
          },
          {
            "Name": "TokenToVtokenConversionFailed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Error indicating a failure during token-to-vToken conversion via exchange rate calculation.",
              "This can occur when the conversion formula encounters an unexpected condition or invalid input."
            ]
          }
        ],
        "Path": [
          "bifrost_channel_commission",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1019": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CalculationOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "LessThanExpected",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "LessThanExistentialDeposit",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "bifrost_clouds_convert",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1020": {
        "Variants": [
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Insufficient balance."
            ]
          },
          {
            "Name": "CurrencyIdNotExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Currency does not exist."
            ]
          },
          {
            "Name": "CurrencyIdError",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Currency is not supported."
            ]
          },
          {
            "Name": "ZeroDuration",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Duration can't be zero."
            ]
          },
          {
            "Name": "ZeroMinSwapValue",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Field min_swap_value can't be zero."
            ]
          }
        ],
        "Path": [
          "bifrost_buy_back",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1021": {
        "TypeIds": [
          502,
          53
        ],
        "TypeDef": "Tuple"
      },
      "1022": {
        "TypeIds": [
          502,
          506
        ],
        "TypeDef": "Tuple"
      },
      "1023": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 1024
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 507
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1024": {
        "TypeId": 507,
        "TypeDef": "Sequence"
      },
      "1025": {
        "Variants": [
          {
            "Name": "DelegatorIndexOverflow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Delegator index has exceeded the maximum allowed value of 65535."
            ]
          },
          {
            "Name": "ValidatorsOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The maximum number of validators has been reached."
            ]
          },
          {
            "Name": "UnlockRecordOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "UnlockRecordOverflow"
            ]
          },
          {
            "Name": "UnsupportedStakingProtocol",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The staking protocol is not supported."
            ]
          },
          {
            "Name": "DelegatorIndexNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The delegator index was not found."
            ]
          },
          {
            "Name": "ConfigurationNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The Configuration was not found."
            ]
          },
          {
            "Name": "DelegatorNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The delegator was not found."
            ]
          },
          {
            "Name": "LedgerNotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The ledger was not found."
            ]
          },
          {
            "Name": "ValidatorNotFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The validator was not found."
            ]
          },
          {
            "Name": "XcmFeeNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Missing XCM fee value."
            ]
          },
          {
            "Name": "PendingStatusNotFound",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Missing pending status."
            ]
          },
          {
            "Name": "TimeUnitNotFound",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The specified time unit does not exist."
            ]
          },
          {
            "Name": "DelegatorAlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The delegator already exists."
            ]
          },
          {
            "Name": "DelegatorIndexAlreadyExists",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The delegator index already exists."
            ]
          },
          {
            "Name": "ValidatorAlreadyExists",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The validator already exists."
            ]
          },
          {
            "Name": "DerivativeAccountIdFailed",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Failed to derive the derivative account ID."
            ]
          },
          {
            "Name": "ValidatingFailed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Error during validation."
            ]
          },
          {
            "Name": "DeliveringFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error during delivery."
            ]
          },
          {
            "Name": "CalculateProtocolFeeFailed",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "calculate protocol fee failed."
            ]
          },
          {
            "Name": "IncreaseTokenPoolFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "IncreaseTokenPoolFailed"
            ]
          },
          {
            "Name": "UpdateIntervalTooShort",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The update interval is too short."
            ]
          },
          {
            "Name": "UpdateTokenExchangeRateAmountTooLarge",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The specified token exchange rate amount is too large."
            ]
          },
          {
            "Name": "InvalidParameter",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid parameter."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Not authorized."
            ]
          }
        ],
        "Path": [
          "bifrost_slp_v2",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "1026": {
        "TypeFields": [
          {
            "TypeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
            "TypeId": 1039
          }
        ],
        "Path": [
          "fp_self_contained",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 62
          },
          {
            "Name": "Call",
            "TypeId": 55
          },
          {
            "Name": "Signature",
            "TypeId": 278
          },
          {
            "Name": "Extra",
            "TypeId": 1027
          }
        ],
        "TypeDef": "Composite"
      },
      "1027": {
        "TypeIds": [
          1028,
          1029,
          1030,
          1031,
          1032,
          1034,
          1035,
          1036,
          1037
        ],
        "TypeDef": "Tuple"
      },
      "1028": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1029": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1030": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1031": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1032": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 1033
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1033": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "1034": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 63
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1035": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1036": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 91
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1037": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "Mode",
            "TypeId": 1038
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "CheckMetadataHash"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1038": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "Mode"
        ],
        "TypeDef": "Variant"
      },
      "1039": {
        "TypeFields": [
          {
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 62
          },
          {
            "Name": "Call",
            "TypeId": 55
          },
          {
            "Name": "Signature",
            "TypeId": 278
          },
          {
            "Name": "Extra",
            "TypeId": 1027
          }
        ],
        "TypeDef": "Composite"
      },
      "1040": {
        "Path": [
          "bifrost_polkadot_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "InherentsApplied",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 19,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 626
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 627,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 625,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 628,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 56
        },
        "Events": {
          "TypeId": 22
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 629,
            "Value": "Yk0YbAALACBKqdEBAgBAAUJHhxkAAQsw9qenLgECANAAAQsAmPc+XQECAPAAAQAAQkeHGQABCzB++hGjAQIAIAEBCwAgSqnRAQIAQAEBBwCIUmp0AgBQAEJHhxkAAAAA",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 632,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "+gAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 634,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 635,
            "Value": "QGJpZnJvc3RfcG9sa2Fkb3RAYmlmcm9zdF9wb2xrYWRvdAAAAAA5SgAAAAAAAGzSvJiX7tCPFQMAAADfastomQdgmwUAAABA/jrUAfiVmgYAAAC8nYmQT1uSPwEAAABYIhH2W7FLiQUAAADmWwDkbO3QqgIAAAALtnpS/NBA/wEAAAAOvI/YSuIK2gEAAABdHfL+fU9ryAEAAAA3yLsTUKmiqAQAAAA345f8fJH15AIAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAADqk+Pxbz1pYgIAAADdcY1cxTJi1AEAAADXvdiicsoNZQEAAABv9S7oWObFvQEAAACRscixYyjrkgIAAAD4d0aPTKDoJgEAAABgrtQ8tSRW8QEAAADcZVRo2DlBIAEAAAANlLgMF4Yw8AEAAAAG81VwrrV6LQEAAACx75FadSx6RgEAAABW7+9tuyE7rwEAAABODpWHTRpqPwEAAAD7xXe510fv1gEAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 53,
            "Value": "AAA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 639
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 60
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 12,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Indices",
        "Storage": {
          "Prefix": "Indices",
          "Entries": [
            {
              "Name": "Accounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 640
                }
              },
              "Default": "AA==",
              "Docs": [
                " The lookup from index to account."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 61
        },
        "Events": {
          "TypeId": 31
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The deposit needed for reserving an index."
            ]
          }
        ],
        "Errors": {
          "TypeId": 641
        },
        "Index": 2
      },
      "5": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "UnincludedSegment",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 642,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Latest included block descendants the runtime accepted. In other words, these are",
                " ancestors of the currently executing block which have not been included in the observed",
                " relay-chain state.",
                "",
                " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                " in the pallet."
              ]
            },
            {
              "Name": "AggregatedUnincludedSegment",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 651,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                " respect to relay chain constraints."
              ]
            },
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be",
                " applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                " with the new validation code. This concludes the upgrade process."
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 67,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block.",
                "",
                " This is updated in `on_finalize`."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 652,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "UpgradeGoAhead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 649,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Optional upgrade go-ahead signal from the relay-chain.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 69,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 654,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 659,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 661,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 662,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 665,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "UpwardDeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 458,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by for UMP."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See `Pallet::set_custom_validation_head_data` for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 65
        },
        "Events": {
          "TypeId": 32
        },
        "Constants": [
          {
            "Name": "SelfParaId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": [
              " Returns the parachain ID we are running with."
            ]
          }
        ],
        "Errors": {
          "TypeId": 667
        },
        "Index": 5
      },
      "6": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 74,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 79
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 6
      },
      "7": {
        "Name": "TxPause",
        "Storage": {
          "Prefix": "TxPause",
          "Entries": [
            {
              "Name": "PausedCalls",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 35,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of calls that are explicitly paused."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 80
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "MaxNameLen",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " Maximum length for pallet name and call name SCALE encoded string names.",
              "",
              " TOO LONG NAMES WILL BE TREATED AS PAUSED."
            ]
          }
        ],
        "Errors": {
          "TypeId": 668
        },
        "Index": 7
      },
      "8": {
        "Name": "MultiBlockMigrations",
        "Storage": {
          "Prefix": "MultiBlockMigrations",
          "Entries": [
            {
              "Name": "Cursor",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 83,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The currently active migration to run and its cursor.",
                "",
                " `None` indicates that no migration is running."
              ]
            },
            {
              "Name": "Historic",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 36,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " Set of all successfully executed migrations.",
                "",
                " This is used as blacklist, to not re-execute migrations that have not been removed from the",
                " codebase yet. Governance can regularly clear this out via `clear_historic`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 81
        },
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "CursorMaxLen",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The maximal length of an encoded cursor.",
              "",
              " A good default needs to selected such that no migration will ever have a cursor with MEL",
              " above this limit. This is statically checked in `integrity_test`."
            ]
          },
          {
            "Name": "IdentifierMaxLen",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximal length of an encoded identifier.",
              "",
              " A good default needs to selected such that no migration will ever have an identifier",
              " with MEL above this limit. This is statically checked in `integrity_test`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 669
        },
        "Index": 8
      },
      "10": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 670
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 674
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 677
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 682
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 90
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 685
        },
        "Index": 10
      },
      "11": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 458,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 686,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 41
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 11
      },
      "20": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 20
      },
      "22": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 92,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 687,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 360,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 95
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 689,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 94
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [],
        "Errors": {
          "TypeId": 691
        },
        "Index": 22
      },
      "23": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 692,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 694,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "SlotDuration",
            "TypeId": 12,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The slot duration Aura should run with, expressed in milliseconds.",
              " The effective value of this type should not change while the chain is running.",
              "",
              " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
            ]
          }
        ],
        "Errors": null,
        "Index": 23
      },
      "24": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 692,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will",
                " always be updated to the latest AuRa authorities in `on_finalize`."
              ]
            },
            {
              "Name": "SlotInfo",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 695,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current slot paired with a number of authored blocks.",
                "",
                " Updated on each block initialization."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 24
      },
      "25": {
        "Name": "ParachainStaking",
        "Storage": {
          "Prefix": "ParachainStaking",
          "Entries": [
            {
              "Name": "CollatorCommission",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Commission percent taken off of rewards for all collators"
              ]
            },
            {
              "Name": "TotalSelected",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The total candidates selected every round"
              ]
            },
            {
              "Name": "ParachainBondInfo",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 696,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Parachain bond config info { account, percent_of_inflation }"
              ]
            },
            {
              "Name": "Round",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 697,
                "Item2": null
              },
              "Default": "AQAAAAEAAAAUAAAA",
              "Docs": [
                " Current round index and next round scheduled transition"
              ]
            },
            {
              "Name": "DelegatorState",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 698
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get delegator state associated with an account if account is delegating else None"
              ]
            },
            {
              "Name": "CandidateInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 703
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get collator candidate info associated with an account if account is candidate else None"
              ]
            },
            {
              "Name": "DelegationScheduledRequests",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 708
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores outstanding delegation requests per collator."
              ]
            },
            {
              "Name": "TopDelegations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 710
                }
              },
              "Default": "AA==",
              "Docs": [
                " Top delegations for collator candidate"
              ]
            },
            {
              "Name": "BottomDelegations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 710
                }
              },
              "Default": "AA==",
              "Docs": [
                " Bottom delegations for collator candidate"
              ]
            },
            {
              "Name": "SelectedCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 92,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The collator candidates selected for the current round"
              ]
            },
            {
              "Name": "Total",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total capital locked by this staking pallet"
              ]
            },
            {
              "Name": "CandidatePool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 699,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The pool of collator candidates, each with their total backing stake"
              ]
            },
            {
              "Name": "AtStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 712
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Snapshot of collator delegation stake at the start of the round"
              ]
            },
            {
              "Name": "DelayedPayouts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 713
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delayed payouts"
              ]
            },
            {
              "Name": "Staked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total counted stake for selected candidates in the round"
              ]
            },
            {
              "Name": "InflationConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 714,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Inflation configuration"
              ]
            },
            {
              "Name": "Points",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Total points awarded to collators for block production in the round"
              ]
            },
            {
              "Name": "AwardedPts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Points for each collator per round"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 97
        },
        "Events": {
          "TypeId": 43
        },
        "Constants": [
          {
            "Name": "MinBlocksPerRound",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Minimum number of blocks per round"
            ]
          },
          {
            "Name": "LeaveCandidatesDelay",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of rounds that candidates remain bonded before exit request is executable"
            ]
          },
          {
            "Name": "CandidateBondLessDelay",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of rounds candidate requests to decrease self-bond must wait to be executable"
            ]
          },
          {
            "Name": "LeaveDelegatorsDelay",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of rounds that delegators remain bonded before exit request is executable"
            ]
          },
          {
            "Name": "RevokeDelegationDelay",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of rounds that delegations remain bonded before revocation request is executable"
            ]
          },
          {
            "Name": "DelegationBondLessDelay",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of rounds that delegation less requests must wait before executable"
            ]
          },
          {
            "Name": "RewardPaymentDelay",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds after which block authors are rewarded"
            ]
          },
          {
            "Name": "MinSelectedCandidates",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": [
              " Minimum number of selected candidates every round"
            ]
          },
          {
            "Name": "MaxTopDelegationsPerCandidate",
            "TypeId": 4,
            "Value": "LAEAAA==",
            "Docs": [
              " Maximum top delegations counted per candidate"
            ]
          },
          {
            "Name": "MaxBottomDelegationsPerCandidate",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Maximum bottom delegations (not counted) per candidate"
            ]
          },
          {
            "Name": "MaxDelegationsPerDelegator",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum delegations per delegator"
            ]
          },
          {
            "Name": "MinCollatorStk",
            "TypeId": 6,
            "Value": "AIDgN3nDEQAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"
            ]
          },
          {
            "Name": "MinCandidateStk",
            "TypeId": 6,
            "Value": "AIDgN3nDEQAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any account to be a collator candidate"
            ]
          },
          {
            "Name": "MinDelegation",
            "TypeId": 6,
            "Value": "ACA9iHktAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake for any registered on-chain account to delegate"
            ]
          },
          {
            "Name": "MinDelegatorStk",
            "TypeId": 6,
            "Value": "ACA9iHktAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake for any registered on-chain account to be a delegator"
            ]
          },
          {
            "Name": "AllowInflation",
            "TypeId": 8,
            "Value": "AA==",
            "Docs": [
              " Allow inflation or not"
            ]
          },
          {
            "Name": "PaymentInRound",
            "TypeId": 6,
            "Value": "AEAPhLWjAAAAAAAAAAAAAA==",
            "Docs": [
              " Fix payment in one round if no inflation"
            ]
          },
          {
            "Name": "ToMigrateInvulnables",
            "TypeId": 92,
            "Value": "EFx+nM0QRcrH+MXHennIf0QBnR3aT1AycTvaicXXPLNrYGsKrTda4XFfvmoHMVE2qOnByEqRIw9qDClsKVNYEzW2uoHnO9OSA+AG/JnMHkGXZ0XeLqIAe/Yu18mkjMxbHc5CzqLdDUrIfM3V8PLhAQlVRn9aN1h89q+O4rS6eBA0",
            "Docs": [
              " Invulnables to migrate"
            ]
          },
          {
            "Name": "InitSeedStk",
            "TypeId": 6,
            "Value": "AIDgN3nDEQAAAAAAAAAAAA==",
            "Docs": [
              " Invulnables init stake"
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvc3Rha2U=",
            "Docs": [
              " PalletId"
            ]
          }
        ],
        "Errors": {
          "TypeId": 716
        },
        "Index": 25
      },
      "36": {
        "Name": "ConvictionVoting",
        "Storage": {
          "Prefix": "ConvictionVoting",
          "Entries": [
            {
              "Name": "VotingFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 718
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All voting for a particular voter in a particular voting class. We store the balance for the",
                " number of votes that we have recorded."
              ]
            },
            {
              "Name": "ClassLocksFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 726
                }
              },
              "Default": "AA==",
              "Docs": [
                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                " this list."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 100
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "Errors": {
          "TypeId": 729
        },
        "Index": 36
      },
      "37": {
        "Name": "Referenda",
        "Storage": {
          "Prefix": "Referenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 730
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 53,
                  "Value": 738
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 53,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 103
        },
        "Events": {
          "TypeId": 52
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "gBMDAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 741,
            "Value": "IAAAEHJvb3QBAAAAAADFLryisQAAAAAAAAAAALAEAACAEwMAQDgAAEA4AAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAADKmjsAAAAAAGXNHQEASHdoaXRlbGlzdGVkX2NhbGxlcmQAAAAAgOA3ecMRAAAAAAAAAAAAMgAAAIATAwAyAAAAMgAAAALslyUQAAAAAHtXPBcAAAAAQjkvEgAAAAACRhYAAAAAAABnLgAAAAAAALoWMQEAAAAAAgBAZmVsbG93c2hpcF9hZG1pbgoAAAAAQPCbvOEIAAAAAAAAAAAAsAQAAIATAwAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////AwBQcmVmZXJlbmR1bV9jYW5jZWxsZXLoAwAAAIDgN3nDEQAAAAAAAAAAALAEAADAiQEACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////wQARHJlZmVyZW5kdW1fa2lsbGVy6AMAAACAYhde0VgAAAAAAAAAAACwBAAAgBMDAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////8KADhsaXF1aWRfc3Rha2luZwoAAAAAQPCbvOEIAAAAAAAAAAAAsAQAAIATAwAIBwAAZAAAAAJn8GQEAAAAAN1GxgcAAAAAkUHqGQAAAAACb1ZCAAAAAACRioMAAAAAALc6vv//////DAAoc2FscF9hZG1pbgoAAAAAQPCbvOEIAAAAAAAAAAAAlgAAAIATAwBYAgAAZAAAAAJn8GQEAAAAAN1GxgcAAAAAkUHqGQAAAAACb1ZCAAAAAACRioMAAAAAALc6vv//////DQA4dHJlYXN1cnlfc3BlbmRkAAAAAEBjUr/GAQAAAAAAAAAAALAEAACAEwMACAcAAGQAAAAAWwH2MABlzR0Aypo7AhFh2wAAAAAAv9GqAQAAAAAglyr//////w==",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 747
        },
        "Index": 37
      },
      "38": {
        "Name": "Origins",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 38
      },
      "39": {
        "Name": "Whitelist",
        "Storage": {
          "Prefix": "Whitelist",
          "Entries": [
            {
              "Name": "WhitelistedCall",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 13,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 128
        },
        "Events": {
          "TypeId": 520
        },
        "Constants": [],
        "Errors": {
          "TypeId": 748
        },
        "Index": 39
      },
      "40": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 749,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The suspended inbound XCMP channels. All others are not suspended.",
                "",
                " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                " within the block and therefore only included once in the proof size.",
                "",
                " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                " will be smaller."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 752,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 756,
                  "Value": 757
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 74,
                  "Value": 757
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 758,
                "Item2": null
              },
              "Default": "IAAAADAAAAAIAAAA",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            },
            {
              "Name": "DeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 74,
                  "Value": 458
                }
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 129
        },
        "Events": {
          "TypeId": 525
        },
        "Constants": [
          {
            "Name": "MaxInboundSuspended",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
              "",
              " Any further channel suspensions will fail and messages may get dropped without further",
              " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
              " [`InboundXcmpSuspended`] still applies at that scale."
            ]
          },
          {
            "Name": "MaxActiveOutboundChannels",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
              "",
              " If this is reached, then no further messages can be sent to channels that do not yet",
              " have a message queued. This should be set to the expected maximum of outbound channels",
              " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
              " since otherwise the congestion control protocol will not work as intended and messages",
              " may be dropped. This value increases the PoV and should therefore not be picked too",
              " high. Governance needs to pay attention to not open more channels than this value."
            ]
          },
          {
            "Name": "MaxPageSize",
            "TypeId": 4,
            "Value": "AJwBAA==",
            "Docs": [
              " The maximal page size for HRMP message pages.",
              "",
              " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
              " benchmarking. The limit for the size of a message is slightly below this, since some",
              " overhead is incurred for encoding the format."
            ]
          }
        ],
        "Errors": {
          "TypeId": 759
        },
        "Index": 40
      },
      "41": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 760
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 765,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 765,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 765,
                  "Value": 766
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 767,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 770,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 771,
                  "Value": 772
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 776
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "Name": "XcmExecutionSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Global suspension state of the XCM executor."
              ]
            },
            {
              "Name": "ShouldRecordXcm",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                " Only one XCM program will be recorded at a time.",
                " This is meant to be used in runtime APIs, and it's advised it stays false",
                " for all other use cases, so as to not degrade regular performance.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            },
            {
              "Name": "RecordedXcm",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 192,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                " will be stored here.",
                " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 130
        },
        "Events": {
          "TypeId": 526
        },
        "Constants": [
          {
            "Name": "AdvertisedXcmVersion",
            "TypeId": 4,
            "Value": "BAAAAA==",
            "Docs": [
              " The latest supported version that we advertise. Generally just set it to",
              " `pallet_xcm::CurrentXcmVersion`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 779
        },
        "Index": 41
      },
      "42": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 225
        },
        "Events": {
          "TypeId": 528
        },
        "Constants": [],
        "Errors": null,
        "Index": 42
      },
      "44": {
        "Name": "MessageQueue",
        "Storage": {
          "Prefix": "MessageQueue",
          "Entries": [
            {
              "Name": "BookStateFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 227,
                  "Value": 780
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "Name": "ServiceHead",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 227,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 783,
                  "Value": 784
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 226
        },
        "Events": {
          "TypeId": 529
        },
        "Constants": [
          {
            "Name": "HeapSize",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "Name": "MaxStale",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "Name": "ServiceWeight",
            "TypeId": 523,
            "Value": "AQcAWED7ogIAcAA=",
            "Docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items `on_initialize`.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
              " it run in `on_idle`."
            ]
          },
          {
            "Name": "IdleMaxServiceWeight",
            "TypeId": 523,
            "Value": "AQcAWED7ogIAcAA=",
            "Docs": [
              " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
              " should be provided to the message queue for servicing enqueued items `on_idle`.",
              " Useful for parachains to process messages at the same block they are received.",
              "",
              " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 786
        },
        "Index": 44
      },
      "50": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 228
        },
        "Events": {
          "TypeId": 531
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 787
        },
        "Index": 50
      },
      "51": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 788
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Retries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 232,
                  "Value": 792
                }
              },
              "Default": "AA==",
              "Docs": [
                " Retry configurations for items to be executed, indexed by task address."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 232
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 230
        },
        "Events": {
          "TypeId": 533
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 10,
            "Value": "CwCAbod0AQIAAAE=",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 793
        },
        "Index": 51
      },
      "52": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 794
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 798
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 233
        },
        "Events": {
          "TypeId": 534
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "ABztrpIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AFgyAc0BAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "ABztrpIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "ALBkApoDAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 802
        },
        "Index": 52
      },
      "53": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 803,
                  "Value": 804
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 236
        },
        "Events": {
          "TypeId": 535
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AJw4RfAEAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AADrCL8BAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 806
        },
        "Index": 53
      },
      "54": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 807
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account. First item is the",
                " registration, second is the account's primary username.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 275
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 813
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 815,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            },
            {
              "Name": "UsernameAuthorities",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 819
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of the accounts who are authorized to grant usernames."
              ]
            },
            {
              "Name": "AccountOfUsername",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 281,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Reverse lookup from `username` to the `AccountId` that has registered it. The value should",
                " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity.",
                "",
                " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one",
                " primary username."
              ]
            },
            {
              "Name": "PendingUsernames",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 281,
                  "Value": 821
                }
              },
              "Default": "AA==",
              "Docs": [
                " Usernames that an authority has granted, but that the account controller has not confirmed",
                " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature",
                " because they are a pure proxy, multisig, etc. In order to confirm it, they should call",
                " [`Call::accept_username`].",
                "",
                " First tuple item is the account and second is the acceptance deadline."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 239
        },
        "Events": {
          "TypeId": 536
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "AAyZJDcOAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity."
            ]
          },
          {
            "Name": "ByteDeposit",
            "TypeId": 6,
            "Value": "AFhH+A0AAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per encoded byte for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "AJR3UwcDAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maximum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          },
          {
            "Name": "PendingUsernameExpiration",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The number of blocks within which a username grant must be accepted."
            ]
          },
          {
            "Name": "MaxSuffixLength",
            "TypeId": 4,
            "Value": "BwAAAA==",
            "Docs": [
              " The maximum length of a suffix."
            ]
          },
          {
            "Name": "MaxUsernameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of a username, including its suffix and any system-added delimiters."
            ]
          }
        ],
        "Errors": {
          "TypeId": 822
        },
        "Index": 54
      },
      "60": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingStartAt",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Start at"
              ]
            },
            {
              "Name": "Cliff",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Cliff vesting"
              ]
            },
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 823
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 825,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 282
        },
        "Events": {
          "TypeId": 537
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 4,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 826
        },
        "Index": 60
      },
      "61": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 827
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 828,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "Name": "SpendCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "Name": "Spends",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 829
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spends that have been approved and being processed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 284
        },
        "Events": {
          "TypeId": 538
        },
        "Constants": [
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "gFEBAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 394,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "Name": "PayoutPeriod",
            "TypeId": 4,
            "Value": "gJcGAA==",
            "Docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 831
        },
        "Index": 61
      },
      "64": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 832
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "RequestStatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 835
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 839,
                  "Value": 840
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 286
        },
        "Events": {
          "TypeId": 539
        },
        "Constants": [],
        "Errors": {
          "TypeId": 841
        },
        "Index": 64
      },
      "65": {
        "Name": "Ethereum",
        "Storage": {
          "Prefix": "Ethereum",
          "Entries": [
            {
              "Name": "Pending",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 842,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current building block's transactions and receipts."
              ]
            },
            {
              "Name": "CurrentBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 851,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum block."
              ]
            },
            {
              "Name": "CurrentReceipts",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 856,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum receipts."
              ]
            },
            {
              "Name": "CurrentTransactionStatuses",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 857,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current transaction statuses."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 291,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 288
        },
        "Events": {
          "TypeId": 540
        },
        "Constants": [],
        "Errors": {
          "TypeId": 858
        },
        "Index": 65
      },
      "66": {
        "Name": "EVM",
        "Storage": {
          "Prefix": "EVM",
          "Entries": [
            {
              "Name": "AccountCodes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 125,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountCodesMetadata",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 125,
                  "Value": 859
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountStorages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 860,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "Suicided",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 125,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 300
        },
        "Events": {
          "TypeId": 549
        },
        "Constants": [],
        "Errors": {
          "TypeId": 861
        },
        "Index": 66
      },
      "67": {
        "Name": "EVMChainId",
        "Storage": {
          "Prefix": "EVMChainId",
          "Entries": [
            {
              "Name": "ChainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The EVM chain ID."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 67
      },
      "68": {
        "Name": "DynamicFee",
        "Storage": {
          "Prefix": "DynamicFee",
          "Entries": [
            {
              "Name": "MinGasPrice",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 291,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "TargetMinGasPrice",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 291,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 304
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 68
      },
      "69": {
        "Name": "EVMAccounts",
        "Storage": {
          "Prefix": "EVMAccounts",
          "Entries": [
            {
              "Name": "AccountExtension",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 125,
                  "Value": 254
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps an EVM address to the last 12 bytes of a substrate account."
              ]
            },
            {
              "Name": "ContractDeployer",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 125,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " Whitelisted addresses that are allowed to deploy smart contracts."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 305
        },
        "Events": {
          "TypeId": 551
        },
        "Constants": [
          {
            "Name": "FeeMultiplier",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Fee multiplier for the binding of addresses."
            ]
          }
        ],
        "Errors": {
          "TypeId": 862
        },
        "Index": 69
      },
      "70": {
        "Name": "XTokens",
        "Storage": null,
        "Calls": {
          "TypeId": 306
        },
        "Events": {
          "TypeId": 552
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 108,
            "Value": "AAA=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 10,
            "Value": "Aihr7gA=",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          },
          {
            "Name": "RateLimiterId",
            "TypeId": 285,
            "Value": "",
            "Docs": [
              " The id of the RateLimiter."
            ]
          }
        ],
        "Errors": {
          "TypeId": 863
        },
        "Index": 70
      },
      "71": {
        "Name": "Tokens",
        "Storage": {
          "Prefix": "Tokens",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total issuance of a token type."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 864,
                  "Value": 865
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks of a token type under an account.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Accounts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 864,
                  "Value": 868
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The balance of a token type under an account.",
                "",
                " NOTE: If the total is ever zero, decrease account ref account.",
                "",
                " NOTE: This is only used in the case that this module is used to store",
                " balances."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 864,
                  "Value": 869
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 312
        },
        "Events": {
          "TypeId": 553
        },
        "Constants": [
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 872
        },
        "Index": 71
      },
      "72": {
        "Name": "Currencies",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "GetNativeCurrencyId",
            "TypeId": 307,
            "Value": "AAE=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 873
        },
        "Index": 72
      },
      "73": {
        "Name": "UnknownTokens",
        "Storage": {
          "Prefix": "UnknownTokens",
          "Entries": [
            {
              "Name": "ConcreteFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 874,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Concrete fungible balances under a given location and a concrete",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            },
            {
              "Name": "AbstractFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 875,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Abstract fungible balances under a given location and a abstract",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 554
        },
        "Constants": [],
        "Errors": {
          "TypeId": 876
        },
        "Index": 73
      },
      "74": {
        "Name": "OrmlXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 313
        },
        "Events": {
          "TypeId": 555
        },
        "Constants": [],
        "Errors": {
          "TypeId": 877
        },
        "Index": 74
      },
      "80": {
        "Name": "ZenlinkProtocol",
        "Storage": {
          "Prefix": "ZenlinkProtocol",
          "Entries": [
            {
              "Name": "ForeignLedger",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 878,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Foreign foreign storage",
                " The number of units of assets held by any given account."
              ]
            },
            {
              "Name": "ForeignMeta",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 316,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " TWOX-NOTE: `AssetId` is trusted, so this is safe."
              ]
            },
            {
              "Name": "ForeignList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 317,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "KLast",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 879,
                  "Value": 291
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88",
                " Last unliquidated protocol fee;"
              ]
            },
            {
              "Name": "FeeMeta",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 880,
                "Item2": null
              },
              "Default": "AAA=",
              "Docs": [
                " (Option<fee_receiver>, fee_point)"
              ]
            },
            {
              "Name": "FeeReceiver",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 316,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " AssetId => fee_receiver"
              ]
            },
            {
              "Name": "LiquidityPairs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 879,
                  "Value": 881
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PairStatuses",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 879,
                  "Value": 882
                }
              },
              "Default": "Ag==",
              "Docs": [
                " (T::AssetId, T::AssetId) -> PairStatus"
              ]
            },
            {
              "Name": "BootstrapPersonalSupply",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 885,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "BootstrapEndStatus",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 879,
                  "Value": 882
                }
              },
              "Default": "Ag==",
              "Docs": [
                " End status of bootstrap",
                "",
                " BootstrapEndStatus: map bootstrap pair => pairStatus"
              ]
            },
            {
              "Name": "BootstrapRewards",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 879,
                  "Value": 886
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "BootstrapLimits",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 879,
                  "Value": 886
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 314
        },
        "Events": {
          "TypeId": 556
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "L3plbmxpbms=",
            "Docs": [
              " This pallet id."
            ]
          }
        ],
        "Errors": {
          "TypeId": 887
        },
        "Index": 80
      },
      "90": {
        "Name": "Ismp",
        "Storage": {
          "Prefix": "Ismp",
          "Entries": [
            {
              "Name": "StateCommitments",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 330,
                  "Value": 352
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds a map of state machine heights to their verified state commitments. These state",
                " commitments end up here after they are successfully verified by a `ConsensusClient`"
              ]
            },
            {
              "Name": "ConsensusStates",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 18,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds a map of consensus state identifiers to their consensus state."
              ]
            },
            {
              "Name": "ConsensusStateClient",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 18,
                  "Value": 18
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of consensus state identifier to it's associated consensus client identifier"
              ]
            },
            {
              "Name": "UnbondingPeriod",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 18,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of consensus state identifiers to their unbonding periods"
              ]
            },
            {
              "Name": "ChallengePeriod",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 331,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of state machine Ids to their challenge periods"
              ]
            },
            {
              "Name": "FrozenConsensusClients",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 18,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds a map of consensus clients frozen due to byzantine",
                " behaviour"
              ]
            },
            {
              "Name": "LatestStateMachineHeight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 331,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The latest verified height for a state machine"
              ]
            },
            {
              "Name": "ConsensusClientUpdateTime",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 18,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds the timestamp at which a consensus client was recently updated.",
                " Used in ensuring that the configured challenge period elapses."
              ]
            },
            {
              "Name": "StateMachineUpdateTime",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 330,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds the timestamp at which a state machine height was updated.",
                " Used in ensuring that the configured challenge period elapses."
              ]
            },
            {
              "Name": "Responded",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Tracks requests that have been responded to",
                " The key is the request commitment"
              ]
            },
            {
              "Name": "Nonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Latest nonce for messages sent from this chain"
              ]
            },
            {
              "Name": "ChildTrieRoot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The child trie root of messages"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 320
        },
        "Events": {
          "TypeId": 557
        },
        "Constants": [],
        "Errors": {
          "TypeId": 888
        },
        "Index": 90
      },
      "91": {
        "Name": "IsmpParachain",
        "Storage": {
          "Prefix": "IsmpParachain",
          "Entries": [
            {
              "Name": "RelayChainStateCommitments",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of relay chain heights to it's state commitment. The state commitment of the parent",
                " relay block is inserted at every block in `on_finalize`. This commitment is gotten from",
                " parachain-system."
              ]
            },
            {
              "Name": "ConsensusUpdated",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Tracks whether we've already seen the `update_parachain_consensus` inherent"
              ]
            },
            {
              "Name": "Parachains",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " List of parachains that this state machine is interested in."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 357
        },
        "Events": {
          "TypeId": 563
        },
        "Constants": [],
        "Errors": null,
        "Index": 91
      },
      "92": {
        "Name": "Hyperbridge",
        "Storage": {
          "Prefix": "Hyperbridge",
          "Entries": [
            {
              "Name": "HostParams",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 565,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The host parameters of the pallet-hyperbridge."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 564
        },
        "Constants": [],
        "Errors": {
          "TypeId": 889
        },
        "Index": 92
      },
      "94": {
        "Name": "TokenGateway",
        "Storage": {
          "Prefix": "TokenGateway",
          "Entries": [
            {
              "Name": "SupportedAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Assets supported by this instance of token gateway",
                " A map of the local asset id to the token gateway asset id"
              ]
            },
            {
              "Name": "NativeAssets",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Assets that originate from this chain"
              ]
            },
            {
              "Name": "LocalAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " Assets supported by this instance of token gateway",
                " A map of the token gateway asset id to the local asset id"
              ]
            },
            {
              "Name": "Decimals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 2
                }
              },
              "Default": "AA==",
              "Docs": [
                " The decimals used by the EVM counterpart of this asset"
              ]
            },
            {
              "Name": "TokenGatewayAddresses",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 328,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": [
                " The token gateway adresses on different chains"
              ]
            },
            {
              "Name": "WhitelistAddresses",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 328,
                  "Value": 571
                }
              },
              "Default": "AA==",
              "Docs": [
                " The whitelist adresses on different chains"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 361
        },
        "Events": {
          "TypeId": 570
        },
        "Constants": [
          {
            "Name": "MaxLengthLimit",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " BoundedVec maximum length"
            ]
          }
        ],
        "Errors": {
          "TypeId": 890
        },
        "Index": 94
      },
      "100": {
        "Name": "FlexibleFee",
        "Storage": {
          "Prefix": "FlexibleFee",
          "Entries": [
            {
              "Name": "UniversalFeeCurrencyOrderList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 382,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Universal fee currency order list for all users"
              ]
            },
            {
              "Name": "UserDefaultFeeCurrency",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " User default fee currency, if set, will be used as the first fee currency, and then use the",
                " universal fee currency order list"
              ]
            },
            {
              "Name": "ExtraFeeByCall",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 281,
                  "Value": 385
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extra fee by call"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 380
        },
        "Events": {
          "TypeId": 572
        },
        "Constants": [
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Get TreasuryAccount"
            ]
          },
          {
            "Name": "MaxFeeCurrencyOrderListLen",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Maximum number of CurrencyId's to support handling fees."
            ]
          },
          {
            "Name": "MinAssetHubExecutionFee",
            "TypeId": 6,
            "Value": "ANDtkC4AAAAAAAAAAAAAAA==",
            "Docs": [
              " When this number is reached, the DOT is sent to AssetHub"
            ]
          },
          {
            "Name": "MinRelaychainExecutionFee",
            "TypeId": 6,
            "Value": "ANDtkC4AAAAAAAAAAAAAAA==",
            "Docs": [
              " When this number is reached, the DOT is sent to Relaychain"
            ]
          },
          {
            "Name": "RelaychainCurrencyId",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": [
              " The currency id of the RelayChain"
            ]
          },
          {
            "Name": "ParachainId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": []
          },
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvZmxleGk=",
            "Docs": []
          },
          {
            "Name": "AllowVBNCAsFee",
            "TypeId": 8,
            "Value": "AQ==",
            "Docs": [
              " The `AllowVBNCAsFee` constant determines whether VBNC is allowed as a fee currency."
            ]
          }
        ],
        "Errors": {
          "TypeId": 891
        },
        "Index": 100
      },
      "105": {
        "Name": "Salp",
        "Storage": {
          "Prefix": "Salp",
          "Entries": [
            {
              "Name": "MultisigConfirmAccount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Multisig confirm account"
              ]
            },
            {
              "Name": "CurrentTrieIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Tracker for the next available fund index"
              ]
            },
            {
              "Name": "CurrentNonce",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Tracker for the next nonce index"
              ]
            },
            {
              "Name": "QueryIdContributionInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 892
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record contribution"
              ]
            },
            {
              "Name": "Funds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 893
                }
              },
              "Default": "AA==",
              "Docs": [
                " Info on all of the funds."
              ]
            },
            {
              "Name": "RedeemPool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The balance can be redeemed to users."
              ]
            },
            {
              "Name": "FailedFundsToRefund",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 895,
                  "Value": 893
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ReserveInfos",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 896
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 386
        },
        "Events": {
          "TypeId": 574
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvc2FscCM=",
            "Docs": [
              " ModuleID for the crowdloan module. An appropriate value could be",
              " ```ModuleId(*b\"py/cfund\")```"
            ]
          },
          {
            "Name": "MinContribution",
            "TypeId": 6,
            "Value": "AHQ7pAsAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
              " at least ExistentialDeposit."
            ]
          },
          {
            "Name": "RelayChainToken",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": []
          },
          {
            "Name": "LeasePeriod",
            "TypeId": 4,
            "Value": "AHUSAA==",
            "Docs": [
              " The number of blocks over which a single period lasts."
            ]
          },
          {
            "Name": "VSBondValidPeriod",
            "TypeId": 4,
            "Value": "gJcGAA==",
            "Docs": []
          },
          {
            "Name": "ReleaseCycle",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " The time interval from 1:1 redeem-pool to bancor-pool to release."
            ]
          },
          {
            "Name": "ReleaseRatio",
            "TypeId": 47,
            "Value": "Mg==",
            "Docs": [
              " The release ratio from the 1:1 redeem-pool to the bancor-pool per cycle.",
              "",
              " **NOTE: THE RELEASE RATIO MUST BE IN [0, 1].**"
            ]
          },
          {
            "Name": "RemoveKeysLimit",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": []
          },
          {
            "Name": "SlotLength",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": []
          },
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "BuybackPalletId",
            "TypeId": 715,
            "Value": "YmYvc2FscGM=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 897
        },
        "Index": 105
      },
      "114": {
        "Name": "AssetRegistry",
        "Storage": {
          "Prefix": "AssetRegistry",
          "Entries": [
            {
              "Name": "NextForeignAssetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next available Foreign AssetId ID.",
                "",
                " NextForeignAssetId: ForeignAssetId"
              ]
            },
            {
              "Name": "NextTokenId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 2,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Next available TokenId ID.",
                "",
                " NextTokenId: TokenId"
              ]
            },
            {
              "Name": "CurrencyIdToLocations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 108
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for Locations.",
                "",
                " CurrencyIdToLocations: map CurrencyId => Option<Location>"
              ]
            },
            {
              "Name": "LocationToCurrencyIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 108,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for CurrencyIds.",
                "",
                " LocationToCurrencyIds: map Location => Option<CurrencyId>"
              ]
            },
            {
              "Name": "CurrencyIdToWeights",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 10
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AssetMetadatas",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 576,
                  "Value": 390
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for AssetMetadatas.",
                "",
                " AssetMetadatas: map AssetIds => Option<AssetMetadata>"
              ]
            },
            {
              "Name": "CurrencyMetadatas",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 390
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for AssetMetadata.",
                "",
                " CurrencyMetadatas: map CurrencyId => Option<AssetMetadata>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 389
        },
        "Events": {
          "TypeId": 575
        },
        "Constants": [],
        "Errors": {
          "TypeId": 898
        },
        "Index": 114
      },
      "115": {
        "Name": "VtokenMinting",
        "Storage": {
          "Prefix": "VtokenMinting",
          "Entries": [
            {
              "Name": "Fees",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 899,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The mint fee and redeem fee."
              ]
            },
            {
              "Name": "TokenPool",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Token pool amount"
              ]
            },
            {
              "Name": "UnlockDuration",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 393
                }
              },
              "Default": "AA==",
              "Docs": [
                " Unlock duration for each currency"
              ]
            },
            {
              "Name": "OngoingTimeUnit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 393
                }
              },
              "Default": "AA==",
              "Docs": [
                " Ongoing time unit for each currency"
              ]
            },
            {
              "Name": "MinimumMint",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum mint amount for each currency"
              ]
            },
            {
              "Name": "MinimumRedeem",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum redeem amount for each currency"
              ]
            },
            {
              "Name": "TokenUnlockNextId",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next unlock id for each currency"
              ]
            },
            {
              "Name": "TokenUnlockLedger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 900,
                  "Value": 901
                }
              },
              "Default": "AA==",
              "Docs": [
                " According to currency_id and unlock_id, unlock information are stored."
              ]
            },
            {
              "Name": "UserUnlockLedger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 864,
                  "Value": 903
                }
              },
              "Default": "AA==",
              "Docs": [
                " According to the user's account, the locked amount and unlock id list are stored."
              ]
            },
            {
              "Name": "TimeUnitUnlockLedger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 905,
                  "Value": 906
                }
              },
              "Default": "AA==",
              "Docs": [
                " The total amount of tokens that are currently locked for unlocking."
              ]
            },
            {
              "Name": "TokenToRebond",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " The total amount of tokens that are currently locked for rebonding."
              ]
            },
            {
              "Name": "MinTimeUnit",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 393
                }
              },
              "Default": "AAA=",
              "Docs": [
                " The min time unit for each currency"
              ]
            },
            {
              "Name": "UnlockingTotal",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total amount of tokens that are currently unlocking."
              ]
            },
            {
              "Name": "HookIterationLimit",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The hook iteration limit"
              ]
            },
            {
              "Name": "SupportedEth",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 395,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "EthUnlockNextId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next unlock id for all ETH tokens in SupportedEth list"
              ]
            },
            {
              "Name": "MintWithLockBlocks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VtokenIncentiveCoef",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VtokenLockLedger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 864,
                  "Value": 908
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 392
        },
        "Events": {
          "TypeId": 577
        },
        "Constants": [
          {
            "Name": "MaximumUnlockIdOfUser",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum unlock id of user"
            ]
          },
          {
            "Name": "MaximumUnlockIdOfTimeUnit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Maximum unlock id of time unit"
            ]
          },
          {
            "Name": "MaxLockRecords",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum unlocked vtoken records minted in an incentive mode"
            ]
          },
          {
            "Name": "EntranceAccount",
            "TypeId": 715,
            "Value": "YmYvdnRraW4=",
            "Docs": [
              " Currency receive account"
            ]
          },
          {
            "Name": "ExitAccount",
            "TypeId": 715,
            "Value": "YmYvdnRvdXQ=",
            "Docs": [
              " Currency exit account"
            ]
          },
          {
            "Name": "FeeAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Fee account"
            ]
          },
          {
            "Name": "RedeemFeeAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Redeem fee account"
            ]
          },
          {
            "Name": "IncentivePoolAccount",
            "TypeId": 715,
            "Value": "YmYvaW5wb28=",
            "Docs": []
          },
          {
            "Name": "RelayChainToken",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": []
          },
          {
            "Name": "MoonbeamChainId",
            "TypeId": 4,
            "Value": "1AcAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 912
        },
        "Index": 115
      },
      "116": {
        "Name": "Slp",
        "Storage": {
          "Prefix": "Slp",
          "Entries": [
            {
              "Name": "OperateOrigins",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " One operate origin(can be a multisig account) for a currency. An operating origins are",
                " normal account in Bifrost chain."
              ]
            },
            {
              "Name": "FeeSources",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 405
                }
              },
              "Default": "AA==",
              "Docs": [
                " Origins and Amounts for the staking operating account fee supplement. An operating account",
                " is identified in MultiLocation format."
              ]
            },
            {
              "Name": "HostingFees",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 431
                }
              },
              "Default": "AA==",
              "Docs": [
                " Hosting fee percentage and beneficiary account for different chains"
              ]
            },
            {
              "Name": "DelegatorsIndex2Multilocation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 913,
                  "Value": 139
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegators in service. A delegator is identified in MultiLocation format.",
                " Currency Id + Sub-account index => MultiLocation"
              ]
            },
            {
              "Name": "DelegatorsMultilocation2Index",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 914,
                  "Value": 53
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegators in service. Currency Id + MultiLocation => Sub-account index"
              ]
            },
            {
              "Name": "DelegatorNextIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 53
                }
              },
              "Default": "AAA=",
              "Docs": [
                " Next index of different currency delegators."
              ]
            },
            {
              "Name": "Validators",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 915
                }
              },
              "Default": "AA==",
              "Docs": [
                " (VWL) Validator in service. A validator is identified in MultiLocation format."
              ]
            },
            {
              "Name": "ValidatorBoostList",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 916
                }
              },
              "Default": "AA==",
              "Docs": [
                " (VBL) Validator Boost List -> (validator multilocation, due block number)"
              ]
            },
            {
              "Name": "ValidatorsByDelegator",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 914,
                  "Value": 915
                }
              },
              "Default": "AA==",
              "Docs": [
                " Validators for each delegator. CurrencyId + Delegator => Vec<Validator>"
              ]
            },
            {
              "Name": "ValidatorsByDelegatorXcmUpdateQueue",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 917
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "DelegatorLedgers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 914,
                  "Value": 408
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegator ledgers. A delegator is identified in MultiLocation format."
              ]
            },
            {
              "Name": "DelegatorLedgerXcmUpdateQueue",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 918
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MinimumsAndMaximums",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " Minimum and Maximum constraints for different chains."
              ]
            },
            {
              "Name": "CurrencyDelays",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 429
                }
              },
              "Default": "AA==",
              "Docs": [
                " TimeUnit delay params for different chains."
              ]
            },
            {
              "Name": "DelegatorLatestTuneRecord",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 914,
                  "Value": 393
                }
              },
              "Default": "AA==",
              "Docs": [
                " A delegator's tuning record of exchange rate for the current time unit.",
                " Currency Id + Delegator Id => latest tuned TimeUnit"
              ]
            },
            {
              "Name": "CurrencyLatestTuneRecord",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 919
                }
              },
              "Default": "AA==",
              "Docs": [
                " Currency's tuning record of exchange rate for the current time unit.",
                " Currency Id => (latest tuned TimeUnit, number of tuning times)"
              ]
            },
            {
              "Name": "CurrencyTuneExchangeRateLimit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 433
                }
              },
              "Default": "AA==",
              "Docs": [
                " For each currencyId: how many times that a Currency's all delegators can tune the exchange",
                " rate for a single time unit, and how much at most each time can tune the",
                " exchange rate"
              ]
            },
            {
              "Name": "DelegationsOccupied",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming",
                " is unaccepted."
              ]
            },
            {
              "Name": "LastTimeUpdatedOngoingTimeUnit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OngoingTimeUnitUpdateInterval",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "SupplementFeeAccountWhitelist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 920
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 396
        },
        "Events": {
          "TypeId": 579
        },
        "Constants": [
          {
            "Name": "MaxTypeEntryPerBlock",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxRefundPerBlock",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxLengthLimit",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": []
          },
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 922
        },
        "Index": 116
      },
      "117": {
        "Name": "XcmInterface",
        "Storage": {
          "Prefix": "XcmInterface",
          "Entries": [
            {
              "Name": "XcmWeightAndFee",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 923,
                  "Value": 399
                }
              },
              "Default": "AA==",
              "Docs": [
                " The dest weight limit and fee for execution XCM msg sent by XcmInterface. Must be",
                " sufficient, otherwise the execution of XCM msg on relaychain will fail.",
                "",
                " XcmWeightAndFee: map: XcmOperationType => (Weight, Balance)"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 434
        },
        "Events": {
          "TypeId": 589
        },
        "Constants": [
          {
            "Name": "ParachainId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 924
        },
        "Index": 117
      },
      "118": {
        "Name": "TokenConversion",
        "Storage": {
          "Prefix": "TokenConversion",
          "Entries": [
            {
              "Name": "RelaychainLease",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "ExchangeRate",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 440,
                  "Value": 441
                }
              },
              "Default": "AAA=",
              "Docs": []
            },
            {
              "Name": "ExchangeFee",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 439,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " exchange fee"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 438
        },
        "Events": {
          "TypeId": 590
        },
        "Constants": [
          {
            "Name": "RelayCurrencyId",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": []
          },
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "VsbondAccount",
            "TypeId": 715,
            "Value": "YmYvc2FscGI=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 925
        },
        "Index": 118
      },
      "119": {
        "Name": "Farming",
        "Storage": {
          "Prefix": "Farming",
          "Entries": [
            {
              "Name": "PoolNextId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Record the id of the new pool."
              ]
            },
            {
              "Name": "GaugePoolNextId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Record the id of the new gauge pool."
              ]
            },
            {
              "Name": "RetireLimit",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The upper limit of a single retirement pool"
              ]
            },
            {
              "Name": "PoolInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 926
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record reward pool info.",
                "",
                " map PoolId => PoolInfo"
              ]
            },
            {
              "Name": "GaugePoolInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 930
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record gauge farming pool info.",
                "",
                " map PoolId => GaugePoolInfo"
              ]
            },
            {
              "Name": "GaugeInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 936
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record gauge config"
              ]
            },
            {
              "Name": "SharesAndWithdrawnRewards",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 937
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record share amount, reward currency and withdrawn reward amount for",
                " specific `AccountId` under `PoolId`.",
                "",
                " double_map (PoolId, AccountId) => ShareInfo"
              ]
            },
            {
              "Name": "BoostPoolInfos",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 938,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Record all voting pool information."
              ]
            },
            {
              "Name": "UserBoostInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 939
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record the voting pool id and the voting percentage of the user."
              ]
            },
            {
              "Name": "BoostWhitelist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record the pools which the user can voted for."
              ]
            },
            {
              "Name": "BoostNextRoundWhitelist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record the pools which the user can voted for in the next round."
              ]
            },
            {
              "Name": "BoostVotingPools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record the voting amount for each pool."
              ]
            },
            {
              "Name": "BoostBasicRewards",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 941,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Voting rewards for corresponding currency."
              ]
            },
            {
              "Name": "UserFarmingPool",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 942
                }
              },
              "Default": "AA==",
              "Docs": [
                " The pool ID of the user participating in the farming pool."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 442
        },
        "Events": {
          "TypeId": 591
        },
        "Constants": [
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "Keeper",
            "TypeId": 715,
            "Value": "YmYvZm1rcHI=",
            "Docs": [
              " ModuleID for creating sub account"
            ]
          },
          {
            "Name": "RewardIssuer",
            "TypeId": 715,
            "Value": "YmYvZm1yaXI=",
            "Docs": []
          },
          {
            "Name": "FarmingBoost",
            "TypeId": 715,
            "Value": "YmYvZm1ic3Q=",
            "Docs": []
          },
          {
            "Name": "WhitelistMaximumLimit",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": []
          },
          {
            "Name": "GaugeRewardIssuer",
            "TypeId": 715,
            "Value": "YmYvZm1nYXI=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 943
        },
        "Index": 119
      },
      "120": {
        "Name": "SystemStaking",
        "Storage": {
          "Prefix": "SystemStaking",
          "Entries": [
            {
              "Name": "Round",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 944,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current Round Information"
              ]
            },
            {
              "Name": "TokenStatus",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 945
                }
              },
              "Default": "AA==",
              "Docs": [
                " The tokenInfo for each currency"
              ]
            },
            {
              "Name": "TokenList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 947,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " All token sets"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 448
        },
        "Events": {
          "TypeId": 592
        },
        "Constants": [
          {
            "Name": "BenefitReceivingAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL2ZlZXNoAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "MaxTokenLen",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": [
              " Max token length 500"
            ]
          },
          {
            "Name": "MaxFarmingPoolIdLen",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Max farming poolid length"
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvc3lzc3Q=",
            "Docs": [
              " ModuleID for creating sub account"
            ]
          },
          {
            "Name": "BlocksPerRound",
            "TypeId": 4,
            "Value": "uAsAAA==",
            "Docs": [
              " The number of blocks per round, as defined in the runtime.",
              "",
              " This value is set to 1500 in the runtime configuration."
            ]
          }
        ],
        "Errors": {
          "TypeId": 948
        },
        "Index": 120
      },
      "122": {
        "Name": "FeeShare",
        "Storage": {
          "Prefix": "FeeShare",
          "Entries": [
            {
              "Name": "DistributionInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 594
                }
              },
              "Default": "AA==",
              "Docs": [
                " The distribution information"
              ]
            },
            {
              "Name": "TokensProportions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 48
                }
              },
              "Default": "AA==",
              "Docs": [
                " The proportion of the token distribution"
              ]
            },
            {
              "Name": "DollarStandardInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 595
                }
              },
              "Default": "AA==",
              "Docs": [
                " USD Standard Accumulation Logic Configuration"
              ]
            },
            {
              "Name": "DistributionNextId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next distribution ID"
              ]
            },
            {
              "Name": "AutoEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 232,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The era length and the next era"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 449
        },
        "Events": {
          "TypeId": 593
        },
        "Constants": [
          {
            "Name": "FeeSharePalletId",
            "TypeId": 715,
            "Value": "YmYvZmVlc2g=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 949
        },
        "Index": 122
      },
      "123": {
        "Name": "CrossInOut",
        "Storage": {
          "Prefix": "CrossInOut",
          "Entries": [
            {
              "Name": "CrossCurrencyRegistry",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 285
                }
              },
              "Default": "AA==",
              "Docs": [
                " To store currencies that support indirect cross-in and cross-out."
              ]
            },
            {
              "Name": "IssueWhiteList",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 950
                }
              },
              "Default": "AA==",
              "Docs": [
                " Accounts in the whitelist can issue the corresponding Currency."
              ]
            },
            {
              "Name": "RegisterWhiteList",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 950
                }
              },
              "Default": "AA==",
              "Docs": [
                " Accounts in the whitelist can register the mapping between a multilocation and an accountId."
              ]
            },
            {
              "Name": "AccountToOuterMultilocation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 132
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping a Bifrost account to a multilocation of a outer chain"
              ]
            },
            {
              "Name": "OuterMultilocationToAccount",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 952,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping a multilocation of a outer chain to a Bifrost account"
              ]
            },
            {
              "Name": "CrossingMinimumAmount",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 476
                }
              },
              "Default": "AA==",
              "Docs": [
                " minimum crossin and crossout amount���crossinMinimum, crossoutMinimum���"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 456
        },
        "Events": {
          "TypeId": 596
        },
        "Constants": [
          {
            "Name": "MaxLengthLimit",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 953
        },
        "Index": 123
      },
      "124": {
        "Name": "BbBNC",
        "Storage": {
          "Prefix": "BbBNC",
          "Entries": [
            {
              "Name": "Supply",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total supply of locked tokens"
              ]
            },
            {
              "Name": "BbConfigs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 598,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAABkAAAA",
              "Docs": [
                " Configurations"
              ]
            },
            {
              "Name": "Epoch",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 291,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Global epoch"
              ]
            },
            {
              "Name": "Locked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 954
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Locked tokens. [position => LockedBalance]"
              ]
            },
            {
              "Name": "UserLocked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " User locked tokens. [who => value]"
              ]
            },
            {
              "Name": "PointHistory",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 291,
                  "Value": 955
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Each week has a Point struct stored in PointHistory."
              ]
            },
            {
              "Name": "UserPointHistory",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 957,
                  "Value": 955
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " User point history. [(who, epoch) => Point]"
              ]
            },
            {
              "Name": "UserPointEpoch",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 291
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " User point epoch. [who => epoch]"
              ]
            },
            {
              "Name": "SlopeChanges",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 956
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Slope changes. [block => slope]"
              ]
            },
            {
              "Name": "IncentiveConfigs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 599
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Farming pool incentive configurations.[pool_id => IncentiveConfig]"
              ]
            },
            {
              "Name": "UserRewardPerTokenPaid",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 600
                }
              },
              "Default": "AA==",
              "Docs": [
                " User reward per token paid. [who => reward per token]"
              ]
            },
            {
              "Name": "Rewards",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 600
                }
              },
              "Default": "AA==",
              "Docs": [
                " User rewards. [who => rewards]"
              ]
            },
            {
              "Name": "UserMarkupInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 958
                }
              },
              "Default": "AA==",
              "Docs": [
                " User markup infos. [who => UserMarkupInfo]"
              ]
            },
            {
              "Name": "LockedTokens",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 959
                }
              },
              "Default": "AA==",
              "Docs": [
                " Locked tokens for markup. [(token, who) => value]"
              ]
            },
            {
              "Name": "TotalLock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total locked tokens for markup. [token => value]"
              ]
            },
            {
              "Name": "MarkupCoefficient",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 960
                }
              },
              "Default": "AA==",
              "Docs": [
                " Markup coefficient. [token => MarkupCoefficientInfo]"
              ]
            },
            {
              "Name": "Position",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The last position of all."
              ]
            },
            {
              "Name": "UserPositions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 961
                }
              },
              "Default": "AA==",
              "Docs": [
                " Positions owned by the user. [who => positions]"
              ]
            },
            {
              "Name": "ExpiringPositions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 962
                }
              },
              "Default": "AA==",
              "Docs": [
                " Track positions by their expiration time"
              ]
            },
            {
              "Name": "NextExpiringBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Track the next block that has expiring positions"
              ]
            },
            {
              "Name": "PositionOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Track position owner. [position => owner]"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 457
        },
        "Events": {
          "TypeId": 597
        },
        "Constants": [
          {
            "Name": "TokenType",
            "TypeId": 307,
            "Value": "AQE=",
            "Docs": []
          },
          {
            "Name": "IncentivePalletId",
            "TypeId": 715,
            "Value": "YmYvYmJpY3Q=",
            "Docs": []
          },
          {
            "Name": "BuyBackAccount",
            "TypeId": 715,
            "Value": "YmYvYnliY2s=",
            "Docs": []
          },
          {
            "Name": "Week",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": []
          },
          {
            "Name": "MaxBlock",
            "TypeId": 4,
            "Value": "AM1AAQ==",
            "Docs": []
          },
          {
            "Name": "Multiplier",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "VoteWeightMultiplier",
            "TypeId": 458,
            "Value": "AACLvQaJaAoAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxPositions",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of positions that should exist on an account."
            ]
          },
          {
            "Name": "MarkupRefreshLimit",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum number of users per refresh."
            ]
          },
          {
            "Name": "OneYear",
            "TypeId": 4,
            "Value": "QDNQAA==",
            "Docs": []
          },
          {
            "Name": "FiveYears",
            "TypeId": 4,
            "Value": "QACRAQ==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 963
        },
        "Index": 124
      },
      "125": {
        "Name": "Slpx",
        "Storage": {
          "Prefix": "Slpx",
          "Entries": [
            {
              "Name": "WhitelistAccountId",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 461,
                  "Value": 964
                }
              },
              "Default": "AA==",
              "Docs": [
                " Contract whitelist"
              ]
            },
            {
              "Name": "ExecutionFee",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Charge corresponding fees for different CurrencyId"
              ]
            },
            {
              "Name": "TransferToFee",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 461,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " XCM fee for transferring to Moonbeam(BNC)"
              ]
            },
            {
              "Name": "XcmEthereumCallConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 965,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Xcm Oracle configuration"
              ]
            },
            {
              "Name": "CurrencyIdList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 395,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Currency to support xcm oracle"
              ]
            },
            {
              "Name": "SupportXcmFeeList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 966,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Currency to support xcm fee"
              ]
            },
            {
              "Name": "OrderQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 967,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Order queue"
              ]
            },
            {
              "Name": "DelayBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Delay block"
              ]
            },
            {
              "Name": "HyperBridgeOracle",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 969
                }
              },
              "Default": "AA==",
              "Docs": [
                " HyperBridge Oracle Config"
              ]
            },
            {
              "Name": "HydrationOracle",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 970,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Hydration chain oracle configuration"
              ]
            },
            {
              "Name": "AsyncMintConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 469,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Async Mint configuration"
              ]
            },
            {
              "Name": "AsyncMintExecutions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 900,
                  "Value": 971
                }
              },
              "Default": "AAAAAAA=",
              "Docs": [
                " Async Mint execution records"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 459
        },
        "Events": {
          "TypeId": 601
        },
        "Constants": [
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " TreasuryAccount"
            ]
          },
          {
            "Name": "ParachainId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": [
              " ParaId of the parachain"
            ]
          },
          {
            "Name": "MaxOrderSize",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": [
              " The maximum number of order"
            ]
          },
          {
            "Name": "MaxUserOrderSize",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum number of user order"
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmlmLXNscHg=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 972
        },
        "Index": 125
      },
      "126": {
        "Name": "FellowshipCollective",
        "Storage": {
          "Prefix": "FellowshipCollective",
          "Entries": [
            {
              "Name": "MemberCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 53,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of members in the collective who have at least the rank according to the index",
                " of the vec."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 973
                }
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective."
              ]
            },
            {
              "Name": "IdToIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 974,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The index of each ranks's member into the group of members who have at least that rank."
              ]
            },
            {
              "Name": "IndexToId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 975,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The members in the collective by index. All indices in the range `0..MemberCount` will",
                " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 605
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "VotingCleanup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 976
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 470
        },
        "Events": {
          "TypeId": 604
        },
        "Constants": [],
        "Errors": {
          "TypeId": 977
        },
        "Index": 126
      },
      "127": {
        "Name": "FellowshipReferenda",
        "Storage": {
          "Prefix": "FellowshipReferenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 978
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 53,
                  "Value": 980
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 53,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 471
        },
        "Events": {
          "TypeId": 607
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 741,
            "Value": "KAAAKGNhbmRpZGF0ZXMKAAAAAEB6EPNaAAAAAAAAAAAAAAoAAACAcAAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAZc0dAEbDIwEAHG1lbWJlcnMKAAAAAKByThgJAAAAAAAAAAAAAAoAAACAcAAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAZc0dAEbDIwIALHByb2ZpY2llbnRzCgAAAACgck4YCQAAAAAAAAAAAAAKAAAAgHAAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AGXNHQBGwyMDABxmZWxsb3dzCgAAAACgck4YCQAAAAAAAAAAAAAKAAAAgHAAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AGXNHQBGwyMEADhzZW5pb3IgZmVsbG93cwoAAAAAoHJOGAkAAAAAAAAAAAAACgAAAIBwAAAyAAAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwBlzR0ARsMjBQAcZXhwZXJ0cwoAAAAAEKXU6AAAAAAAAAAAAAAACgAAAIBwAAAyAAAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwBlzR0ARsMjBgA4c2VuaW9yIGV4cGVydHMKAAAAABCl1OgAAAAAAAAAAAAAAAoAAACAcAAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAZc0dAEbDIwcAHG1hc3RlcnMKAAAAABCl1OgAAAAAAAAAAAAAAAoAAACAcAAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAZc0dAEbDIwgAOHNlbmlvciBtYXN0ZXJzCgAAAAAQpdToAAAAAAAAAAAAAAAKAAAAgHAAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AGXNHQBGwyMJADRncmFuZCBtYXN0ZXJzCgAAAAAQpdToAAAAAAAAAAAAAAAKAAAAgHAAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AGXNHQBGwyM=",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 981
        },
        "Index": 127
      },
      "128": {
        "Name": "StableAsset",
        "Storage": {
          "Prefix": "StableAsset",
          "Entries": [
            {
              "Name": "PoolCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The last pool id."
              ]
            },
            {
              "Name": "Pools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 982
                }
              },
              "Default": "AA==",
              "Docs": [
                " The pool info."
              ]
            },
            {
              "Name": "TokenRateCaches",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 941,
                  "Value": 476
                }
              },
              "Default": "AA==",
              "Docs": [
                " Price anchor used to bind the corresponding pool and currency."
              ]
            },
            {
              "Name": "TokenRateHardcap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 394
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record the maximum percentage that can exceed the token rate."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 608
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvc3RhYmw=",
            "Docs": []
          },
          {
            "Name": "FeePrecision",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "SwapExactOverAmount",
            "TypeId": 6,
            "Value": "ZAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "APrecision",
            "TypeId": 6,
            "Value": "ZAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "PoolAssetLimit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 983
        },
        "Index": 128
      },
      "129": {
        "Name": "StablePool",
        "Storage": null,
        "Calls": {
          "TypeId": 472
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 984
        },
        "Index": 129
      },
      "130": {
        "Name": "VtokenVoting",
        "Storage": {
          "Prefix": "VtokenVoting",
          "Entries": [
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 900,
                  "Value": 479
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "VotingForV2",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 951,
                  "Value": 985
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All voting for a particular voter in a particular voting class. We store the balance for the",
                " number of votes that we have recorded."
              ]
            },
            {
              "Name": "ClassLocksFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 992
                }
              },
              "Default": "AA==",
              "Docs": [
                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                " this list."
              ]
            },
            {
              "Name": "PendingReferendumInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 900
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PendingVotingInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 993
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PendingRemoveDelegatorVote",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 996
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VoteLockingPeriod",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "UndecidingTimeout",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Delegators",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 997
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VoteCapRatio",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 48
                }
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "DelegatorVotes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 900,
                  "Value": 999
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PendingDelegatorVotes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 900,
                  "Value": 999
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ReferendumTimeoutV3",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 900,
                  "Value": 942
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VoteDelegatorFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 1002,
                  "Value": 53
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ReferendumVoteStatusStore",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 900,
                  "Value": 482
                }
              },
              "Default": "Aw==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 477
        },
        "Events": {
          "TypeId": 609
        },
        "Constants": [
          {
            "Name": "ParachainId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": []
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum number of concurrent votes an account may have."
            ]
          },
          {
            "Name": "QueryTimeout",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": []
          },
          {
            "Name": "ReferendumCheckInterval",
            "TypeId": 4,
            "Value": "WAIAAA==",
            "Docs": []
          },
          {
            "Name": "RelayVCurrency",
            "TypeId": 307,
            "Value": "CQA=",
            "Docs": [
              " Relay currency"
            ]
          }
        ],
        "Errors": {
          "TypeId": 1003
        },
        "Index": 130
      },
      "131": {
        "Name": "LendMarket",
        "Storage": {
          "Prefix": "LendMarket",
          "Entries": [
            {
              "Name": "LastAccruedInterestTime",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The timestamp of the last calculation of accrued interest"
              ]
            },
            {
              "Name": "LiquidationFreeCollaterals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1004,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Liquidation free collateral."
              ]
            },
            {
              "Name": "TotalSupply",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total number of collateral tokens in circulation",
                " CollateralType -> Balance"
              ]
            },
            {
              "Name": "TotalBorrows",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total amount of outstanding borrows of the underlying in this market",
                " CurrencyId -> Balance"
              ]
            },
            {
              "Name": "TotalReserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total amount of reserves of the underlying held in this market",
                " CurrencyId -> Balance"
              ]
            },
            {
              "Name": "AccountBorrows",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 1005
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Mapping of account addresses to outstanding borrow balances",
                " CurrencyId -> Owner -> BorrowSnapshot"
              ]
            },
            {
              "Name": "AccountDeposits",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 1006
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Mapping of account addresses to deposit details",
                " CollateralType -> Owner -> Deposits"
              ]
            },
            {
              "Name": "AccountEarned",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 1007
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Mapping of account addresses to total deposit interest accrual",
                " CurrencyId -> Owner -> EarnedSnapshot"
              ]
            },
            {
              "Name": "BorrowIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Accumulator of the total earned interest rate since the opening of the market",
                " CurrencyId -> u128"
              ]
            },
            {
              "Name": "ExchangeRate",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The exchange rate from the underlying to the internal collateral"
              ]
            },
            {
              "Name": "BorrowRate",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Mapping of borrow rate to currency type"
              ]
            },
            {
              "Name": "SupplyRate",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Mapping of supply rate to currency type"
              ]
            },
            {
              "Name": "UtilizationRatio",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 394
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Borrow utilization ratio"
              ]
            },
            {
              "Name": "Markets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 484
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of asset id to its market"
              ]
            },
            {
              "Name": "UnderlyingAssetId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of lend token id to asset id",
                " `lend token id`: voucher token id",
                " `asset id`: underlying token id"
              ]
            },
            {
              "Name": "RewardSupplySpeed",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Mapping of token id to supply reward speed"
              ]
            },
            {
              "Name": "RewardBorrowSpeed",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Mapping of token id to borrow reward speed"
              ]
            },
            {
              "Name": "RewardSupplyState",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 1008
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The Reward market supply state for each market"
              ]
            },
            {
              "Name": "RewardBorrowState",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 1008
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The Reward market borrow state for each market"
              ]
            },
            {
              "Name": "RewardSupplierIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                "  The Reward index for each market for each supplier as of the last time they accrued Reward"
              ]
            },
            {
              "Name": "RewardBorrowerIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 951,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                "  The Reward index for each market for each borrower as of the last time they accrued Reward"
              ]
            },
            {
              "Name": "RewardAccured",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The reward accrued but not yet transferred to each user."
              ]
            },
            {
              "Name": "MarketBond",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 1004
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 483
        },
        "Events": {
          "TypeId": 610
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 715,
            "Value": "YmYvbGRta3Q=",
            "Docs": [
              " The loan's module id, keep all collaterals of CDPs."
            ]
          },
          {
            "Name": "RewardAssetId",
            "TypeId": 307,
            "Value": "AAE=",
            "Docs": [
              " Reward asset id."
            ]
          },
          {
            "Name": "LiquidationFreeAssetId",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": []
          },
          {
            "Name": "MaxLengthLimit",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 1009
        },
        "Index": 131
      },
      "132": {
        "Name": "Prices",
        "Storage": {
          "Prefix": "Prices",
          "Entries": [
            {
              "Name": "EmergencyPrice",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 458
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from currency id to it's emergency price"
              ]
            },
            {
              "Name": "ForeignToNativeAsset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from foreign vault token to our's vault token"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 491
        },
        "Events": {
          "TypeId": 611
        },
        "Constants": [
          {
            "Name": "RelayCurrency",
            "TypeId": 307,
            "Value": "CAA=",
            "Docs": [
              " Relay currency"
            ]
          }
        ],
        "Errors": null,
        "Index": 132
      },
      "133": {
        "Name": "Oracle",
        "Storage": {
          "Prefix": "Oracle",
          "Entries": [
            {
              "Name": "RawValues",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 864,
                  "Value": 613
                }
              },
              "Default": "AA==",
              "Docs": [
                " Raw values for each oracle operators"
              ]
            },
            {
              "Name": "Values",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 613
                }
              },
              "Default": "AA==",
              "Docs": [
                " Up to date combined value from Raw Values"
              ]
            },
            {
              "Name": "HasDispatched",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1010,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " If an oracle operator has fed a value in this block"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 492
        },
        "Events": {
          "TypeId": 612
        },
        "Constants": [
          {
            "Name": "RootOperatorAccountId",
            "TypeId": 0,
            "Value": "bW9kbGJmL29yYWNsAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " The root operator account id, record all sudo feeds on this account."
            ]
          },
          {
            "Name": "MaxHasDispatchedSize",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of HasDispatched"
            ]
          },
          {
            "Name": "MaxFeedValues",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size the vector used for feed values"
            ]
          }
        ],
        "Errors": {
          "TypeId": 1012
        },
        "Index": 133
      },
      "134": {
        "Name": "OracleMembership",
        "Storage": {
          "Prefix": "OracleMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1013,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 496
        },
        "Events": {
          "TypeId": 614
        },
        "Constants": [],
        "Errors": {
          "TypeId": 1014
        },
        "Index": 134
      },
      "135": {
        "Name": "LeverageStaking",
        "Storage": null,
        "Calls": {
          "TypeId": 497
        },
        "Events": {
          "TypeId": 615
        },
        "Constants": [],
        "Errors": {
          "TypeId": 1015
        },
        "Index": 135
      },
      "136": {
        "Name": "ChannelCommission",
        "Storage": {
          "Prefix": "ChannelCommission",
          "Entries": [
            {
              "Name": "ChannelNextId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Auto increment channel id"
              ]
            },
            {
              "Name": "Channels",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 1016
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping a channel id to a receive account and a name, ���channel_id =>(receive_account,",
                " name)���"
              ]
            },
            {
              "Name": "CommissionTokens",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping a vtoken to a commission token, ���vtoken => commission_token���"
              ]
            },
            {
              "Name": "ChannelCommissionTokenRates",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 941,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping a channel + vtoken to corresponding commission rate, ���(channel_id, vtoken) =>",
                " commission rate���"
              ]
            },
            {
              "Name": "ChannelVtokenShares",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 941,
                  "Value": 394
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Mapping a channel + vtoken to corresponding channel share, ���(channel_id, vtoken) => share���"
              ]
            },
            {
              "Name": "VtokenIssuanceSnapshots",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " ���vtoken => (old_issuance, new_issuance)���,old_issuance is the vtoken issuance at last",
                " clearing point,  new_issuance is the ongoing accumulative issuance the last clearing point"
              ]
            },
            {
              "Name": "PeriodVtokenTotalMint",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Vtoken total minted amount in the ongoing period for the chain, ���vtoken => (old_total_mint,",
                " new_total_mint)���"
              ]
            },
            {
              "Name": "PeriodVtokenTotalRedeem",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Vtoken total redeemed amount in the ongoing period for the chain, ���vtoken =>",
                " (old_total_redeem, new_total_redeem)���"
              ]
            },
            {
              "Name": "PeriodChannelVtokenMint",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 941,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Vtoken minted amount in the ongoing period for the channel, ���(channel_id, vtoken) =>",
                " (old_mint_amount, new_mint_amount)���"
              ]
            },
            {
              "Name": "PeriodTotalCommissions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 476
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Commission pool for last period and ongoing period, ���commission token => (old_amount,",
                " new_amount)���"
              ]
            },
            {
              "Name": "PeriodClearedCommissions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Commission amount that has been cleared for the current clearing process, ���commission token",
                " => amount���"
              ]
            },
            {
              "Name": "ChannelClaimableCommissions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 941,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Commission amount to be claimed by channels, ���channel id + commission token => amount���"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 498
        },
        "Events": {
          "TypeId": 616
        },
        "Constants": [
          {
            "Name": "ClearingDuration",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": []
          },
          {
            "Name": "NameLengthLimit",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 1018
        },
        "Index": 136
      },
      "137": {
        "Name": "CloudsConvert",
        "Storage": null,
        "Calls": {
          "TypeId": 499
        },
        "Events": {
          "TypeId": 617
        },
        "Constants": [
          {
            "Name": "LockedBlocks",
            "TypeId": 4,
            "Value": "AM1AAQ==",
            "Docs": [
              " locked blocks for veBNC converted from clouds"
            ]
          }
        ],
        "Errors": {
          "TypeId": 1019
        },
        "Index": 137
      },
      "138": {
        "Name": "BuyBack",
        "Storage": {
          "Prefix": "BuyBack",
          "Entries": [
            {
              "Name": "Infos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 619
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "SwapOutMin",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AddLiquiditySwapOutMin",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 307,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 500
        },
        "Events": {
          "TypeId": 618
        },
        "Constants": [
          {
            "Name": "TreasuryAccount",
            "TypeId": 0,
            "Value": "bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "BuyBackAccount",
            "TypeId": 715,
            "Value": "YmYvYnliY2s=",
            "Docs": []
          },
          {
            "Name": "LiquidityAccount",
            "TypeId": 715,
            "Value": "YmYvbGlxZHQ=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 1020
        },
        "Index": 138
      },
      "139": {
        "Name": "SlpV2",
        "Storage": {
          "Prefix": "SlpV2",
          "Entries": [
            {
              "Name": "ConfigurationByStakingProtocol",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 502,
                  "Value": 503
                }
              },
              "Default": "AA==",
              "Docs": [
                " Configuration for different staking protocols."
              ]
            },
            {
              "Name": "DelegatorByStakingProtocolAndDelegatorIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 1021,
                  "Value": 506
                }
              },
              "Default": "AA==",
              "Docs": [
                " StakingProtocol + DelegatorIndex => Delegator"
              ]
            },
            {
              "Name": "DelegatorIndexByStakingProtocolAndDelegator",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 1022,
                  "Value": 53
                }
              },
              "Default": "AA==",
              "Docs": [
                " StakingProtocol + Delegator => DelegatorIndex"
              ]
            },
            {
              "Name": "LedgerByStakingProtocolAndDelegator",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 1022,
                  "Value": 509
                }
              },
              "Default": "AA==",
              "Docs": [
                " StakingProtocol + DelegatorIndex => Delegator"
              ]
            },
            {
              "Name": "ValidatorsByStakingProtocolAndDelegator",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 1022,
                  "Value": 1023
                }
              },
              "Default": "AA==",
              "Docs": [
                " Validators for different staking protocols."
              ]
            },
            {
              "Name": "NextDelegatorIndexByStakingProtocol",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 502,
                  "Value": 53
                }
              },
              "Default": "AAA=",
              "Docs": [
                " Next index of different staking protocols."
              ]
            },
            {
              "Name": "PendingStatusByQueryId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 623
                }
              },
              "Default": "AA==",
              "Docs": [
                " Pending status for different query id."
              ]
            },
            {
              "Name": "LastUpdateOngoingTimeUnitBlockNumber",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 502,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last update ongoing time unit block number for different staking protocols."
              ]
            },
            {
              "Name": "LastUpdateTokenExchangeRateBlockNumber",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 1022,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last update token exchange rate block number for different staking protocols."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 501
        },
        "Events": {
          "TypeId": 620
        },
        "Constants": [
          {
            "Name": "QueryTimeout",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The query timeout."
            ]
          },
          {
            "Name": "CommissionPalletId",
            "TypeId": 715,
            "Value": "YmYvY29tbXM=",
            "Docs": [
              " Commission master Pallet Id to get the commission master account"
            ]
          },
          {
            "Name": "ParachainId",
            "TypeId": 74,
            "Value": "7gcAAA==",
            "Docs": [
              " Bifrost parachain id."
            ]
          },
          {
            "Name": "MaxValidators",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " Maximum validators"
            ]
          }
        ],
        "Errors": {
          "TypeId": 1025
        },
        "Index": 139
      }
    },
    "Extrinsic": {
      "TypeId": 1026,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 1028,
          "AddSignedExtType": 285
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 1029,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 1030,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 1031,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 1032,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 1034,
          "AddSignedExtType": 285
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 1035,
          "AddSignedExtType": 285
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 1036,
          "AddSignedExtType": 285
        },
        {
          "SignedIdentifier": "CheckMetadataHash",
          "SignedExtType": 1037,
          "AddSignedExtType": 33
        }
      ]
    },
    "TypeId": 1040
  }
}