//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Opal.NetApi.Generated.Model.pallet_collator_selection.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> add_invulnerable
        /// Add a collator to the list of invulnerable (fixed) collators.
        /// </summary>
        add_invulnerable = 0,
        
        /// <summary>
        /// >> remove_invulnerable
        /// Remove a collator from the list of invulnerable (fixed) collators.
        /// </summary>
        remove_invulnerable = 1,
        
        /// <summary>
        /// >> get_license
        /// Purchase a license on block collation for this account.
        /// It does not make it a collator candidate, use `onboard` afterward. The account must
        /// (a) already have registered session keys and (b) be able to reserve the `LicenseBond`.
        /// 
        /// This call is not available to `Invulnerable` collators.
        /// </summary>
        get_license = 2,
        
        /// <summary>
        /// >> onboard
        /// Register this account as a candidate for collators for next sessions.
        /// The account must already hold a license, and cannot offboard immediately during a session.
        /// 
        /// This call is not available to `Invulnerable` collators.
        /// </summary>
        onboard = 3,
        
        /// <summary>
        /// >> offboard
        /// Deregister `origin` as a collator candidate. Note that the collator can only leave on
        /// session change. The license to `onboard` later at any other time will remain.
        /// </summary>
        offboard = 4,
        
        /// <summary>
        /// >> release_license
        /// Forfeit `origin`'s own license. The `LicenseBond` will be unreserved immediately.
        /// 
        /// This call is not available to `Invulnerable` collators.
        /// </summary>
        release_license = 5,
        
        /// <summary>
        /// >> force_release_license
        /// Force deregister `origin` as a collator candidate as a governing authority, and revoke its license.
        /// Note that the collator can only leave on session change.
        /// The `LicenseBond` will be unreserved and returned immediately.
        /// 
        /// This call is, of course, not applicable to `Invulnerable` collators.
        /// </summary>
        force_release_license = 6,
    }
    
    /// <summary>
    /// >> 119 - Variant[pallet_collator_selection.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<Opal.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.add_invulnerable);
				AddTypeDecoder<Opal.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.remove_invulnerable);
				AddTypeDecoder<BaseVoid>(Call.get_license);
				AddTypeDecoder<BaseVoid>(Call.onboard);
				AddTypeDecoder<BaseVoid>(Call.offboard);
				AddTypeDecoder<BaseVoid>(Call.release_license);
				AddTypeDecoder<Opal.NetApi.Generated.Model.sp_core.crypto.AccountId32>(Call.force_release_license);
        }
    }
}
