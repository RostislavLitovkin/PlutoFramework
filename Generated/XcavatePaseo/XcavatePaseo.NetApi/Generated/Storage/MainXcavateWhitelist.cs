//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> XcavateWhitelistStorage
    /// </summary>
    public sealed class XcavateWhitelistStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XcavateWhitelistStorage Constructor
        /// </summary>
        public XcavateWhitelistStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateWhitelist", "AdminAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcavateWhitelist", "AccountRoles"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, XcavatePaseo.NetApi.Generated.Model.pallet_xcavate_whitelist.pallet.EnumRole>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> AdminAccountsParams
        ///  Mapping of the admin accounts.
        /// </summary>
        public static string AdminAccountsParams(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XcavateWhitelist", "AdminAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AdminAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string AdminAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AdminAccounts
        ///  Mapping of the admin accounts.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> AdminAccounts(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateWhitelistStorage.AdminAccountsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountRolesParams
        ///  Mapping of the accounts to the assigned roles.
        /// </summary>
        public static string AccountRolesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, XcavatePaseo.NetApi.Generated.Model.pallet_xcavate_whitelist.pallet.EnumRole> key)
        {
            return RequestGenerator.GetStorage("XcavateWhitelist", "AccountRoles", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountRolesDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountRolesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountRoles
        ///  Mapping of the accounts to the assigned roles.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> AccountRoles(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, XcavatePaseo.NetApi.Generated.Model.pallet_xcavate_whitelist.pallet.EnumRole> key, string blockhash, CancellationToken token)
        {
            string parameters = XcavateWhitelistStorage.AccountRolesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XcavateWhitelistCalls
    /// </summary>
    public sealed class XcavateWhitelistCalls
    {
        
        /// <summary>
        /// >> add_admin
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddAdmin(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(admin.Encode());
            return new Method(90, "XcavateWhitelist", 0, "add_admin", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_admin
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAdmin(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(admin.Encode());
            return new Method(90, "XcavateWhitelist", 1, "remove_admin", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> assign_role
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AssignRole(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 user, XcavatePaseo.NetApi.Generated.Model.pallet_xcavate_whitelist.pallet.EnumRole role)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(user.Encode());
            byteArray.AddRange(role.Encode());
            return new Method(90, "XcavateWhitelist", 2, "assign_role", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_role
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveRole(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 user, XcavatePaseo.NetApi.Generated.Model.pallet_xcavate_whitelist.pallet.EnumRole role)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(user.Encode());
            byteArray.AddRange(role.Encode());
            return new Method(90, "XcavateWhitelist", 3, "remove_role", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> XcavateWhitelistConstants
    /// </summary>
    public sealed class XcavateWhitelistConstants
    {
        
        /// <summary>
        /// >> MaxUsersInWhitelist
        ///  Max users allowed in the whitelist.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUsersInWhitelist()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
    }
    
    /// <summary>
    /// >> XcavateWhitelistErrors
    /// </summary>
    public enum XcavateWhitelistErrors
    {
        
        /// <summary>
        /// >> RoleAlreadyAssigned
        /// The role has already been assigned to the usser.
        /// </summary>
        RoleAlreadyAssigned,
        
        /// <summary>
        /// >> RoleNotAssigned
        /// The role has not been assigned to the user.
        /// </summary>
        RoleNotAssigned,
        
        /// <summary>
        /// >> AlreadyAdmin
        /// The acount is already registered as an admin.
        /// </summary>
        AlreadyAdmin,
        
        /// <summary>
        /// >> AccountNotAdmin
        /// The acount is not registered as an admin.
        /// </summary>
        AccountNotAdmin,
    }
}
