//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> OffchainWorkerStorage
    /// </summary>
    public sealed class OffchainWorkerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> OffchainWorkerStorage Constructor
        /// </summary>
        public OffchainWorkerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OffchainWorker", "OffchainWorkerTestEnabled"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OffchainWorker", "NextUnsignedAt"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> OffchainWorkerTestEnabledParams
        /// </summary>
        public static string OffchainWorkerTestEnabledParams()
        {
            return RequestGenerator.GetStorage("OffchainWorker", "OffchainWorkerTestEnabled", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OffchainWorkerTestEnabledDefault
        /// Default value as hex string
        /// </summary>
        public static string OffchainWorkerTestEnabledDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OffchainWorkerTestEnabled
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> OffchainWorkerTestEnabled(string blockhash, CancellationToken token)
        {
            string parameters = OffchainWorkerStorage.OffchainWorkerTestEnabledParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextUnsignedAtParams
        ///  Defines the block when next unsigned transaction will be accepted.
        /// 
        ///  To prevent spam of unsigned (and unpaid!) transactions on the network,
        ///  we only allow one transaction every `T::UnsignedInterval` blocks.
        ///  This storage entry defines when new transaction is going to be accepted.
        /// </summary>
        public static string NextUnsignedAtParams()
        {
            return RequestGenerator.GetStorage("OffchainWorker", "NextUnsignedAt", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextUnsignedAtDefault
        /// Default value as hex string
        /// </summary>
        public static string NextUnsignedAtDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextUnsignedAt
        ///  Defines the block when next unsigned transaction will be accepted.
        /// 
        ///  To prevent spam of unsigned (and unpaid!) transactions on the network,
        ///  we only allow one transaction every `T::UnsignedInterval` blocks.
        ///  This storage entry defines when new transaction is going to be accepted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextUnsignedAt(string blockhash, CancellationToken token)
        {
            string parameters = OffchainWorkerStorage.NextUnsignedAtParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> OffchainWorkerCalls
    /// </summary>
    public sealed class OffchainWorkerCalls
    {
        
        /// <summary>
        /// >> set_offchain_worker
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOffchainWorker(Substrate.NetApi.Model.Types.Primitive.Bool is_testing_enabled)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(is_testing_enabled.Encode());
            return new Method(120, "OffchainWorker", 0, "set_offchain_worker", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_event_unsigned
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitEventUnsigned(Substrate.NetApi.Model.Types.Primitive.U32 block_number)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(block_number.Encode());
            return new Method(120, "OffchainWorker", 1, "submit_event_unsigned", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> OffchainWorkerConstants
    /// </summary>
    public sealed class OffchainWorkerConstants
    {
        
        /// <summary>
        /// >> UnsignedInterval
        ///  Number of blocks of cooldown after unsigned transaction is included.
        /// 
        ///  This ensures that we only accept unsigned transactions once, every `UnsignedInterval`
        ///  blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UnsignedInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x06000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> OffchainWorkerErrors
    /// </summary>
    public enum OffchainWorkerErrors
    {
        
        /// <summary>
        /// >> OffchainWorkerNotEnabled
        /// </summary>
        OffchainWorkerNotEnabled,
    }
}
