//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> PropertyManagementStorage
    /// </summary>
    public sealed class PropertyManagementStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> PropertyManagementStorage Constructor
        /// </summary>
        public PropertyManagementStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "LettingStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "InvestorFunds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "LettingInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.LettingAgentInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "LettingAgentProposal"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.ProposedLettingAgent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "OngoingLettingAgentVoting"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyManagement", "UserLettingAgentVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT7)));
        }
        
        /// <summary>
        /// >> LettingStorageParams
        ///  Mapping from the real estate object to the letting agent.
        /// </summary>
        public static string LettingStorageParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "LettingStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LettingStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string LettingStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LettingStorage
        ///  Mapping from the real estate object to the letting agent.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> LettingStorage(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.LettingStorageParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InvestorFundsParams
        ///  Mapping from account to currently stored balance.
        /// </summary>
        public static string InvestorFundsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "InvestorFunds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> InvestorFundsDefault
        /// Default value as hex string
        /// </summary>
        public static string InvestorFundsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> InvestorFunds
        ///  Mapping from account to currently stored balance.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> InvestorFunds(Substrate.NetApi.Model.Types.Base.BaseTuple<XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.InvestorFundsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LettingInfoParams
        ///  Mapping from account to letting agent info
        /// </summary>
        public static string LettingInfoParams(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "LettingInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LettingInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string LettingInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LettingInfo
        ///  Mapping from account to letting agent info
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.LettingAgentInfo> LettingInfo(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.LettingInfoParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.LettingAgentInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LettingAgentProposalParams
        ///  Mapping of asset id to the ongoing letting agent proposal.
        /// </summary>
        public static string LettingAgentProposalParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "LettingAgentProposal", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LettingAgentProposalDefault
        /// Default value as hex string
        /// </summary>
        public static string LettingAgentProposalDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LettingAgentProposal
        ///  Mapping of asset id to the ongoing letting agent proposal.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.ProposedLettingAgent> LettingAgentProposal(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.LettingAgentProposalParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.ProposedLettingAgent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingLettingAgentVotingParams
        ///  Mapping of ongoing letting agent vote.
        /// </summary>
        public static string OngoingLettingAgentVotingParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "OngoingLettingAgentVoting", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingLettingAgentVotingDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingLettingAgentVotingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingLettingAgentVoting
        ///  Mapping of ongoing letting agent vote.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.VoteStats> OngoingLettingAgentVoting(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.OngoingLettingAgentVotingParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserLettingAgentVoteParams
        ///  Mapping of a asset id and account id to the vote of a user.
        /// </summary>
        public static string UserLettingAgentVoteParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyManagement", "UserLettingAgentVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserLettingAgentVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string UserLettingAgentVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserLettingAgentVote
        ///  Mapping of a asset id and account id to the vote of a user.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT7> UserLettingAgentVote(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyManagementStorage.UserLettingAgentVoteParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT7>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> PropertyManagementCalls
    /// </summary>
    public sealed class PropertyManagementCalls
    {
        
        /// <summary>
        /// >> add_letting_agent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLettingAgent(Substrate.NetApi.Model.Types.Primitive.U16 region, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            byteArray.AddRange(location.Encode());
            return new Method(94, "PropertyManagement", 0, "add_letting_agent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> letting_agent_propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LettingAgentPropose(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(94, "PropertyManagement", 3, "letting_agent_propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_letting_agent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnLettingAgent(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, XcavatePaseo.NetApi.Generated.Model.pallet_property_management.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(94, "PropertyManagement", 4, "vote_on_letting_agent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> finalize_letting_agent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FinalizeLettingAgent(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(94, "PropertyManagement", 5, "finalize_letting_agent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> distribute_income
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DistributeIncome(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U32 payment_asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(payment_asset.Encode());
            return new Method(94, "PropertyManagement", 6, "distribute_income", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_income
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimIncome(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U32 payment_asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(payment_asset.Encode());
            return new Method(94, "PropertyManagement", 7, "claim_income", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PropertyManagementConstants
    /// </summary>
    public sealed class PropertyManagementConstants
    {
        
        /// <summary>
        /// >> MarketplacePalletId
        ///  The property management's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId MarketplacePalletId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E66747863");
            return result;
        }
        
        /// <summary>
        /// >> LettingAgentDeposit
        ///  The minimum amount of a letting agent that has to be deposited.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 LettingAgentDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxProperties
        ///  The maximum amount of properties that can be assigned to a letting agent.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxProperties()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLettingAgents
        ///  The maximum amount of letting agents in a location.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLettingAgents()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLocations
        ///  The maximum amount of locations a letting agent can be assigned to.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLocations()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> AcceptedAssets
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Types.Base.Arr2U32 AcceptedAssets()
        {
            var result = new XcavatePaseo.NetApi.Generated.Types.Base.Arr2U32();
            result.Create("0x39050000C0070000");
            return result;
        }
        
        /// <summary>
        /// >> LettingAgentVotingTime
        ///  The amount of time given to vote for a lawyer proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LettingAgentVotingTime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> PropertyManagementErrors
    /// </summary>
    public enum PropertyManagementErrors
    {
        
        /// <summary>
        /// >> ConversionError
        /// Error by convertion to balance type.
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> DivisionError
        /// Error by dividing a number.
        /// </summary>
        DivisionError,
        
        /// <summary>
        /// >> MultiplyError
        /// Error by multiplying a number.
        /// </summary>
        MultiplyError,
        
        /// <summary>
        /// >> ArithmeticOverflow
        /// </summary>
        ArithmeticOverflow,
        
        /// <summary>
        /// >> ArithmeticUnderflow
        /// </summary>
        ArithmeticUnderflow,
        
        /// <summary>
        /// >> UserHasNoFundsStored
        /// The caller has no funds stored.
        /// </summary>
        UserHasNoFundsStored,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// The pallet has not enough funds.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> TooManyAssignedProperties
        /// The letting agent has already too many assigned properties.
        /// </summary>
        TooManyAssignedProperties,
        
        /// <summary>
        /// >> NoLettingAgentFound
        /// No letting agent could be selected.
        /// </summary>
        NoLettingAgentFound,
        
        /// <summary>
        /// >> RegionUnknown
        /// The region is not registered.
        /// </summary>
        RegionUnknown,
        
        /// <summary>
        /// >> TooManyLettingAgents
        /// The location has already the maximum amount of letting agents.
        /// </summary>
        TooManyLettingAgents,
        
        /// <summary>
        /// >> TooManyLocations
        /// The letting agent is already active in too many locations.
        /// </summary>
        TooManyLocations,
        
        /// <summary>
        /// >> NoPermission
        /// The caller is not authorized to call this extrinsic.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> LettingAgentAlreadySet
        /// The letting agent of this property is already set.
        /// </summary>
        LettingAgentAlreadySet,
        
        /// <summary>
        /// >> NoObjectFound
        /// The real estate object could not be found.
        /// </summary>
        NoObjectFound,
        
        /// <summary>
        /// >> AgentNotFound
        /// The account is not a letting agent of this location.
        /// </summary>
        AgentNotFound,
        
        /// <summary>
        /// >> LocationUnknown
        /// The location is not registered.
        /// </summary>
        LocationUnknown,
        
        /// <summary>
        /// >> LettingAgentInLocation
        /// The letting agent is already assigned to this location.
        /// </summary>
        LettingAgentInLocation,
        
        /// <summary>
        /// >> LettingAgentExists
        /// The letting agent is already registered.
        /// </summary>
        LettingAgentExists,
        
        /// <summary>
        /// >> AssetNotFound
        /// This asset has no token.
        /// </summary>
        AssetNotFound,
        
        /// <summary>
        /// >> PaymentAssetNotSupported
        /// This Asset is not supported for payment.
        /// </summary>
        PaymentAssetNotSupported,
        
        /// <summary>
        /// >> NoLettingAgentProposed
        /// No letting agent has been proposed for this property.
        /// </summary>
        NoLettingAgentProposed,
        
        /// <summary>
        /// >> VotingExpired
        /// The propal has expired.
        /// </summary>
        VotingExpired,
        
        /// <summary>
        /// >> UserNotWhitelisted
        /// User did not pass the kyc.
        /// </summary>
        UserNotWhitelisted,
        
        /// <summary>
        /// >> VotingStillOngoing
        /// The voting is still ongoing.
        /// </summary>
        VotingStillOngoing,
        
        /// <summary>
        /// >> LettingAgentProposalOngoing
        /// There is already a letting agent proposal ongoing.
        /// </summary>
        LettingAgentProposalOngoing,
        
        /// <summary>
        /// >> TooManyVoters
        /// There are already too many voters for this voting.
        /// </summary>
        TooManyVoters,
        
        /// <summary>
        /// >> AccountIsNotLettingAgent
        /// The account has not the role of a letting agent.
        /// </summary>
        AccountIsNotLettingAgent,
    }
}
