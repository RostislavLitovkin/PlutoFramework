//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> RealEstateAssetStorage
    /// </summary>
    public sealed class RealEstateAssetStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> RealEstateAssetStorage Constructor
        /// </summary>
        public RealEstateAssetStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RealEstateAsset", "NextNftId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RealEstateAsset", "NextAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RealEstateAsset", "PropertyAssetInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_real_estate_asset.pallet.PropertyAssetDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RealEstateAsset", "PropertyOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RealEstateAsset", "PropertyOwnerToken"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> NextNftIdParams
        ///  Id for the next nft in a collection.
        /// </summary>
        public static string NextNftIdParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("RealEstateAsset", "NextNftId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextNftIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextNftIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextNftId
        ///  Id for the next nft in a collection.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextNftId(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = RealEstateAssetStorage.NextNftIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextAssetIdParams
        ///  Id of the possible next asset that would be used for
        ///  Nft fractionalization.
        /// </summary>
        public static string NextAssetIdParams()
        {
            return RequestGenerator.GetStorage("RealEstateAsset", "NextAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextAssetIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextAssetId
        ///  Id of the possible next asset that would be used for
        ///  Nft fractionalization.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextAssetId(string blockhash, CancellationToken token)
        {
            string parameters = RealEstateAssetStorage.NextAssetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertyAssetInfoParams
        ///  Mapping of the assetid to the property details.
        /// </summary>
        public static string PropertyAssetInfoParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("RealEstateAsset", "PropertyAssetInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PropertyAssetInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertyAssetInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PropertyAssetInfo
        ///  Mapping of the assetid to the property details.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_real_estate_asset.pallet.PropertyAssetDetails> PropertyAssetInfo(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = RealEstateAssetStorage.PropertyAssetInfoParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_real_estate_asset.pallet.PropertyAssetDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertyOwnerParams
        ///  Mapping of the assetid to the vector of token holder.
        /// </summary>
        public static string PropertyOwnerParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("RealEstateAsset", "PropertyOwner", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PropertyOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertyOwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PropertyOwner
        ///  Mapping of the assetid to the vector of token holder.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39> PropertyOwner(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = RealEstateAssetStorage.PropertyOwnerParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertyOwnerTokenParams
        ///  Mapping of assetid and accountid to the amount of token an account is holding of the asset.
        /// </summary>
        public static string PropertyOwnerTokenParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("RealEstateAsset", "PropertyOwnerToken", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PropertyOwnerTokenDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertyOwnerTokenDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PropertyOwnerToken
        ///  Mapping of assetid and accountid to the amount of token an account is holding of the asset.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PropertyOwnerToken(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = RealEstateAssetStorage.PropertyOwnerTokenParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> RealEstateAssetCalls
    /// </summary>
    public sealed class RealEstateAssetCalls
    {
    }
    
    /// <summary>
    /// >> RealEstateAssetConstants
    /// </summary>
    public sealed class RealEstateAssetConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The marketplace's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E66747863");
            return result;
        }
        
        /// <summary>
        /// >> PropertyAccountFundingAmount
        ///  Amount to fund a property account.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 PropertyAccountFundingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPropertyToken
        ///  The maximum amount of token of a property.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPropertyToken()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFA000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> RealEstateAssetErrors
    /// </summary>
    public enum RealEstateAssetErrors
    {
        
        /// <summary>
        /// >> RegionUnknown
        /// This Region is not known.
        /// </summary>
        RegionUnknown,
        
        /// <summary>
        /// >> ArithmeticOverflow
        /// </summary>
        ArithmeticOverflow,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// The account doesn't have enough funds.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> PropertyAssetNotRegistered
        /// The property asset could not be found.
        /// </summary>
        PropertyAssetNotRegistered,
        
        /// <summary>
        /// >> NotEnoughToken
        /// The sender has not enough token.
        /// </summary>
        NotEnoughToken,
        
        /// <summary>
        /// >> InvalidIndex
        /// This index is not taken.
        /// </summary>
        InvalidIndex,
        
        /// <summary>
        /// >> TooManyTokenBuyer
        /// There are already too many token buyer.
        /// </summary>
        TooManyTokenBuyer,
        
        /// <summary>
        /// >> PropertyNotFound
        /// The property has not been registered.
        /// </summary>
        PropertyNotFound,
        
        /// <summary>
        /// >> SpvAlreadyCreated
        /// The SPV has already been created.
        /// </summary>
        SpvAlreadyCreated,
        
        /// <summary>
        /// >> SpvNotCreated
        /// The SPV has not been created.
        /// </summary>
        SpvNotCreated,
        
        /// <summary>
        /// >> PropertyNotFinalized
        /// The property has not been finalized yet.
        /// </summary>
        PropertyNotFinalized,
    }
}
