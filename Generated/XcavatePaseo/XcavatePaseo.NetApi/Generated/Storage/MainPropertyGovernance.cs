//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> PropertyGovernanceStorage
    /// </summary>
    public sealed class PropertyGovernanceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> PropertyGovernanceStorage Constructor
        /// </summary>
        public PropertyGovernanceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ProposalCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ChallengeCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "Proposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "SellProposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.SellProposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "Challenges"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Challenge)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "OngoingVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ProposalVoter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "UserProposalVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "OngoingChallengeVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ChallengeVoter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState>), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "UserChallengeVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ProposalRoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "ChallengeRoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PropertyGovernance", "SellPropertyRoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34)));
        }
        
        /// <summary>
        /// >> ProposalCountParams
        ///  Number of proposals that have been made.
        /// </summary>
        public static string ProposalCountParams()
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ProposalCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ProposalCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ProposalCount
        ///  Number of proposals that have been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ProposalCount(string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChallengeCountParams
        ///  Number of Challenges that have been made.
        /// </summary>
        public static string ChallengeCountParams()
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ChallengeCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ChallengeCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ChallengeCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ChallengeCount
        ///  Number of Challenges that have been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ChallengeCount(string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ChallengeCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalsParams
        ///  Proposals that have been made.
        /// </summary>
        public static string ProposalsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "Proposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Proposals
        ///  Proposals that have been made.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal> Proposals(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Proposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SellProposalsParams
        ///  Sell proposals that have been made.
        /// </summary>
        public static string SellProposalsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "SellProposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SellProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string SellProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SellProposals
        ///  Sell proposals that have been made.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.SellProposal> SellProposals(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.SellProposalsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.SellProposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChallengesParams
        ///  Mapping of challenge index to the challenge info.
        /// </summary>
        public static string ChallengesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "Challenges", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ChallengesDefault
        /// Default value as hex string
        /// </summary>
        public static string ChallengesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Challenges
        ///  Mapping of challenge index to the challenge info.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Challenge> Challenges(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ChallengesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.Challenge>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingVotesParams
        ///  Mapping of ongoing votes.
        /// </summary>
        public static string OngoingVotesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "OngoingVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingVotes
        ///  Mapping of ongoing votes.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats> OngoingVotes(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.OngoingVotesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalVoterParams
        ///  Mapping from proposal to vector of users who voted.
        /// </summary>
        public static string ProposalVoterParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ProposalVoter", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalVoterDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalVoterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalVoter
        ///  Mapping from proposal to vector of users who voted.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33> ProposalVoter(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalVoterParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserProposalVoteParams
        /// </summary>
        public static string UserProposalVoteParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "UserProposalVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserProposalVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string UserProposalVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserProposalVote
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote> UserProposalVote(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.UserProposalVoteParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingChallengeVotesParams
        ///  Mapping of ongoing votes about challenges.
        /// </summary>
        public static string OngoingChallengeVotesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState> key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "OngoingChallengeVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> OngoingChallengeVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingChallengeVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingChallengeVotes
        ///  Mapping of ongoing votes about challenges.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats> OngoingChallengeVotes(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState> key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.OngoingChallengeVotesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChallengeVoterParams
        ///  Mapping from challenge to vector of users who voted.
        /// </summary>
        public static string ChallengeVoterParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState> key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ChallengeVoter", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ChallengeVoterDefault
        /// Default value as hex string
        /// </summary>
        public static string ChallengeVoterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ChallengeVoter
        ///  Mapping from challenge to vector of users who voted.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33> ChallengeVoter(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumChallengeState> key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ChallengeVoterParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserChallengeVoteParams
        /// </summary>
        public static string UserChallengeVoteParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "UserChallengeVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserChallengeVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string UserChallengeVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserChallengeVote
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote> UserChallengeVote(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.UserChallengeVoteParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalRoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for proposal votings.
        /// </summary>
        public static string ProposalRoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ProposalRoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalRoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalRoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalRoundsExpiring
        ///  Stores the project keys and round types ending on a given block for proposal votings.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34> ProposalRoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ProposalRoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChallengeRoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for challenge votings.
        /// </summary>
        public static string ChallengeRoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "ChallengeRoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ChallengeRoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string ChallengeRoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ChallengeRoundsExpiring
        ///  Stores the project keys and round types ending on a given block for challenge votings.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34> ChallengeRoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.ChallengeRoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SellPropertyRoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for sell_property votings.
        /// </summary>
        public static string SellPropertyRoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("PropertyGovernance", "SellPropertyRoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SellPropertyRoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string SellPropertyRoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SellPropertyRoundsExpiring
        ///  Stores the project keys and round types ending on a given block for sell_property votings.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34> SellPropertyRoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = PropertyGovernanceStorage.SellPropertyRoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> PropertyGovernanceCalls
    /// </summary>
    public sealed class PropertyGovernanceCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Propose(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(data.Encode());
            return new Method(83, "PropertyGovernance", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> challenge_against_letting_agent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ChallengeAgainstLettingAgent(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(83, "PropertyGovernance", 1, "challenge_against_letting_agent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnProposal(Substrate.NetApi.Model.Types.Primitive.U32 proposal_id, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(83, "PropertyGovernance", 2, "vote_on_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_letting_agent_challenge
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnLettingAgentChallenge(Substrate.NetApi.Model.Types.Primitive.U32 challenge_id, XcavatePaseo.NetApi.Generated.Model.pallet_property_governance.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(challenge_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(83, "PropertyGovernance", 3, "vote_on_letting_agent_challenge", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PropertyGovernanceConstants
    /// </summary>
    public sealed class PropertyGovernanceConstants
    {
        
        /// <summary>
        /// >> MarketplacePalletId
        ///  The property governance's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId MarketplacePalletId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E66747863");
            return result;
        }
    }
    
    /// <summary>
    /// >> PropertyGovernanceErrors
    /// </summary>
    public enum PropertyGovernanceErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// The user is not a property owner and has no permission to propose.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> TooManyProposals
        /// There are already too many proposals in the ending block.
        /// </summary>
        TooManyProposals,
        
        /// <summary>
        /// >> NotOngoing
        /// The proposal is not ongoing.
        /// </summary>
        NotOngoing,
        
        /// <summary>
        /// >> TooManyVotes
        /// Too many user voted already.
        /// </summary>
        TooManyVotes,
        
        /// <summary>
        /// >> NoAssetFound
        /// The assets details could not be found.
        /// </summary>
        NoAssetFound,
        
        /// <summary>
        /// >> NoLettingAgentFound
        /// There is no letting agent for this property.
        /// </summary>
        NoLettingAgentFound,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// The pallet has not enough funds.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> ConversionError
        /// Error during converting types.
        /// </summary>
        ConversionError,
    }
}
