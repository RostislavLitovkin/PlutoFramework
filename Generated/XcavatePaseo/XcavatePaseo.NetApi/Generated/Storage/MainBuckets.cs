//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BucketsStorage
    /// </summary>
    public sealed class BucketsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BucketsStorage Constructor
        /// </summary>
        public BucketsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Namespaces"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(XcavatePaseo.NetApi.Generated.Model.container_chain_template_simple_runtime.MetadataMock)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Buckets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Bucket)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Messages"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Message)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Contributors"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Admins"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Managers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "Tags"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Buckets", "NextBucketId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> NamespacesParams
        ///  Namespaces stored on chain
        /// 
        ///  It maps from any entity id (called namespace id) to the metadata of the namespace.
        /// </summary>
        public static string NamespacesParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Buckets", "Namespaces", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NamespacesDefault
        /// Default value as hex string
        /// </summary>
        public static string NamespacesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Namespaces
        ///  Namespaces stored on chain
        /// 
        ///  It maps from any entity id (called namespace id) to the metadata of the namespace.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.container_chain_template_simple_runtime.MetadataMock> Namespaces(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.NamespacesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.container_chain_template_simple_runtime.MetadataMock>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BucketsParams
        ///  Buckets stored on chain.
        /// 
        ///  Double storage map from namespace id to bucket id to the metadata of the bucket.
        /// </summary>
        public static string BucketsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Buckets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> BucketsDefault
        /// Default value as hex string
        /// </summary>
        public static string BucketsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Buckets
        ///  Buckets stored on chain.
        /// 
        ///  Double storage map from namespace id to bucket id to the metadata of the bucket.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Bucket> Buckets(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.BucketsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Bucket>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MessagesParams
        ///  Messages stored on chain.
        /// 
        ///  Double storage map from bucket id to message id to the metadata of the message.
        /// </summary>
        public static string MessagesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Messages", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> MessagesDefault
        /// Default value as hex string
        /// </summary>
        public static string MessagesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Messages
        ///  Messages stored on chain.
        /// 
        ///  Double storage map from bucket id to message id to the metadata of the message.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Message> Messages(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.MessagesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.Message>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContributorsParams
        ///  Contributors stored on chain.
        /// 
        ///  Double storage map from bucket id to contributor id to an empty tuple.
        ///  By using a double storage map, we can have multiple contributors for the same bucket.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all contributors for the bucket.
        /// </summary>
        public static string ContributorsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Contributors", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ContributorsDefault
        /// Default value as hex string
        /// </summary>
        public static string ContributorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Contributors
        ///  Contributors stored on chain.
        /// 
        ///  Double storage map from bucket id to contributor id to an empty tuple.
        ///  By using a double storage map, we can have multiple contributors for the same bucket.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all contributors for the bucket.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Contributors(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.ContributorsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AdminsParams
        ///  Admins stored on chain.
        /// 
        ///  Double storage map from bucket id to admin id to an empty tuple.
        ///  By using a double storage map, we can have multiple admins for the same bucket.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all admins for the bucket.
        /// </summary>
        public static string AdminsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Admins", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AdminsDefault
        /// Default value as hex string
        /// </summary>
        public static string AdminsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Admins
        ///  Admins stored on chain.
        /// 
        ///  Double storage map from bucket id to admin id to an empty tuple.
        ///  By using a double storage map, we can have multiple admins for the same bucket.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all admins for the bucket.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Admins(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.AdminsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ManagersParams
        ///  Managers stored on chain.
        /// 
        ///  Double storage map from namespace id to manager id to an empty tuple.
        ///  By using a double storage map, we can have multiple managers for the same namespace.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all managers for the namespace.
        /// </summary>
        public static string ManagersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Managers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ManagersDefault
        /// Default value as hex string
        /// </summary>
        public static string ManagersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Managers
        ///  Managers stored on chain.
        /// 
        ///  Double storage map from namespace id to manager id to an empty tuple.
        ///  By using a double storage map, we can have multiple managers for the same namespace.
        ///  The double storage map allows efficient look ups. By using a simple storage map, we would
        ///  have to iterate over all managers for the namespace.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Managers(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.ManagersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TagsParams
        ///  Tags stored on chain.
        /// 
        ///  Tags are only available for a specific bucket.
        /// </summary>
        public static string TagsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> key)
        {
            return RequestGenerator.GetStorage("Buckets", "Tags", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TagsDefault
        /// Default value as hex string
        /// </summary>
        public static string TagsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Tags
        ///  Tags stored on chain.
        /// 
        ///  Tags are only available for a specific bucket.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Tags(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> key, string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.TagsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextBucketIdParams
        ///  The next namespace id to be used.
        /// </summary>
        public static string NextBucketIdParams()
        {
            return RequestGenerator.GetStorage("Buckets", "NextBucketId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextBucketIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextBucketIdDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> NextBucketId
        ///  The next namespace id to be used.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextBucketId(string blockhash, CancellationToken token)
        {
            string parameters = BucketsStorage.NextBucketIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BucketsCalls
    /// </summary>
    public sealed class BucketsCalls
    {
        
        /// <summary>
        /// >> create_namespace
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateNamespace(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, XcavatePaseo.NetApi.Generated.Model.container_chain_template_simple_runtime.MetadataInputMock metadata_input)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(metadata_input.Encode());
            return new Method(84, "Buckets", 0, "create_namespace", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_contributor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddContributor(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 contributor)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(contributor.Encode());
            return new Method(84, "Buckets", 1, "add_contributor", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_contributor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveContributor(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 contributor)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(contributor.Encode());
            return new Method(84, "Buckets", 2, "remove_contributor", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_admin
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddAdmin(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(admin.Encode());
            return new Method(84, "Buckets", 3, "add_admin", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_admin
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAdmin(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(admin.Encode());
            return new Method(84, "Buckets", 4, "remove_admin", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_manager
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddManager(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 new_manager)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(new_manager.Encode());
            return new Method(84, "Buckets", 5, "add_manager", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_manager
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveManager(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 old_manager)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(old_manager.Encode());
            return new Method(84, "Buckets", 6, "remove_manager", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_bucket
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateBucket(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, XcavatePaseo.NetApi.Generated.Model.container_chain_template_simple_runtime.MetadataInputMock metadata_input)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(metadata_input.Encode());
            return new Method(84, "Buckets", 7, "create_bucket", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pause_writing
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PauseWriting(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            return new Method(84, "Buckets", 8, "pause_writing", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_writing
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResumeWriting(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, Substrate.NetApi.Model.Types.Primitive.U128 new_encryption_key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(new_encryption_key.Encode());
            return new Method(84, "Buckets", 9, "resume_writing", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_tag
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateTag(Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 new_tag)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(new_tag.Encode());
            return new Method(84, "Buckets", 10, "create_tag", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rotate_key
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RotateKey(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, Substrate.NetApi.Model.Types.Primitive.U128 new_encryption_key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(new_encryption_key.Encode());
            return new Method(84, "Buckets", 11, "rotate_key", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> write
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Write(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, XcavatePaseo.NetApi.Generated.Model.pallet_bucket.types.MessageInput message_input)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(message_input.Encode());
            return new Method(84, "Buckets", 12, "write", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_remove_namespace
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRemoveNamespace(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            return new Method(84, "Buckets", 13, "force_remove_namespace", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_remove_bucket
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRemoveBucket(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, Substrate.NetApi.Model.Types.Primitive.U128 bucket_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(bucket_id.Encode());
            return new Method(84, "Buckets", 14, "force_remove_bucket", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_remove_message
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRemoveMessage(Substrate.NetApi.Model.Types.Primitive.U128 bucket_id, Substrate.NetApi.Model.Types.Primitive.U128 message_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bucket_id.Encode());
            byteArray.AddRange(message_id.Encode());
            return new Method(84, "Buckets", 15, "force_remove_message", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_add_manager
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceAddManager(Substrate.NetApi.Model.Types.Primitive.U128 namespace_id, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 manager)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(namespace_id.Encode());
            byteArray.AddRange(manager.Encode());
            return new Method(84, "Buckets", 16, "force_add_manager", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BucketsConstants
    /// </summary>
    public sealed class BucketsConstants
    {
        
        /// <summary>
        /// >> FeeNamespace
        ///  The fee of the namespace.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FeeNamespace()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00CA9A3B000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> FeeBucket
        ///  The fee of the Bucket.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FeeBucket()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00CA9A3B000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> FeeMessage
        ///  The fee of the Message.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FeeMessage()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00CA9A3B000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> FeeTag
        ///  The fee of the Tag.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FeeTag()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00CA9A3B000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStringInputLengthTag
        ///  The max length of the string input. Used for Tags.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStringInputLengthTag()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC8000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BucketsErrors
    /// </summary>
    public enum BucketsErrors
    {
        
        /// <summary>
        /// >> NamespaceAlreadyExists
        /// The requested namespace already exists.
        /// </summary>
        NamespaceAlreadyExists,
        
        /// <summary>
        /// >> UnknownNamespace
        /// The requested namespace does not exist.
        /// </summary>
        UnknownNamespace,
        
        /// <summary>
        /// >> UnknownBucket
        /// The bucket does not exist.
        /// </summary>
        UnknownBucket,
        
        /// <summary>
        /// >> BucketIsLocked
        /// The bucket is locked.
        /// </summary>
        BucketIsLocked,
        
        /// <summary>
        /// >> UnknownMessage
        /// The requested message is unknown.
        /// </summary>
        UnknownMessage,
        
        /// <summary>
        /// >> DanglingBuckets
        /// There are dangling buckets for the namespace.
        /// </summary>
        DanglingBuckets,
        
        /// <summary>
        /// >> DanglingMessages
        /// There are dangling messages for the bucket.
        /// </summary>
        DanglingMessages,
        
        /// <summary>
        /// >> NotManager
        /// The origin is not authorized to perform the manager action for the namespace.
        /// </summary>
        NotManager,
        
        /// <summary>
        /// >> NotContributor
        /// The contributor does not exist for the requested bucket.
        /// </summary>
        NotContributor,
        
        /// <summary>
        /// >> NotAdmin
        /// The origin is not authorized to perform the manager action for the bucket.
        /// </summary>
        NotAdmin,
        
        /// <summary>
        /// >> UnknownTag
        /// The given tag does not exist.
        /// </summary>
        UnknownTag,
        
        /// <summary>
        /// >> UnableToPayFees
        /// The account is unable to pay the fees.
        /// </summary>
        UnableToPayFees,
        
        /// <summary>
        /// >> DanglingContributors
        /// There are dangling contributors
        /// </summary>
        DanglingContributors,
        
        /// <summary>
        /// >> DanglingAdmins
        /// There are dangling admins
        /// </summary>
        DanglingAdmins,
        
        /// <summary>
        /// >> DanglingManagers
        /// There are dangling managers
        /// </summary>
        DanglingManagers,
    }
}
