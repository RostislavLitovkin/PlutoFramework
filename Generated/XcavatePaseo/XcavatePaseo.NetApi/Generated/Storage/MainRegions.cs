//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace XcavatePaseo.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> RegionsStorage
    /// </summary>
    public sealed class RegionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> RegionsStorage Constructor
        /// </summary>
        public RegionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "LastRegionProposalBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "ProposedRegionIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionProposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionProposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "OngoingRegionProposalVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "UserRegionVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionAuctions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionReplacementAuctions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionDetails"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "LocationRegistration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionOwnerProposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RemoveRegionOwnerProposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "OngoingRegionOwnerProposalVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "UserRegionOwnerVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RegionOwnerRoundsExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "ReplacementAuctionExpiring"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Regions", "RealEstateLawyer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.LawyerInfo)));
        }
        
        /// <summary>
        /// >> LastRegionProposalBlockParams
        ///  Block number of the last region proposal made.
        /// </summary>
        public static string LastRegionProposalBlockParams()
        {
            return RequestGenerator.GetStorage("Regions", "LastRegionProposalBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastRegionProposalBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string LastRegionProposalBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LastRegionProposalBlock
        ///  Block number of the last region proposal made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastRegionProposalBlock(string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.LastRegionProposalBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposedRegionIdsParams
        ///  Currently proposed region IDs.
        /// </summary>
        public static string ProposedRegionIdsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "ProposedRegionIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposedRegionIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposedRegionIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposedRegionIds
        ///  Currently proposed region IDs.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ProposedRegionIds(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.ProposedRegionIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionProposalsParams
        ///  Active region proposals by region ID.
        /// </summary>
        public static string RegionProposalsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionProposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionProposals
        ///  Active region proposals by region ID.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionProposal> RegionProposals(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionProposalsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionProposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingRegionProposalVotesParams
        ///  Voting statistics for ongoing proposals by region ID.
        /// </summary>
        public static string OngoingRegionProposalVotesParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "OngoingRegionProposalVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingRegionProposalVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingRegionProposalVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingRegionProposalVotes
        ///  Voting statistics for ongoing proposals by region ID.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats> OngoingRegionProposalVotes(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.OngoingRegionProposalVotesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserRegionVoteParams
        ///  User votes on region proposals.
        /// </summary>
        public static string UserRegionVoteParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "UserRegionVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserRegionVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string UserRegionVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserRegionVote
        ///  User votes on region proposals.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3> UserRegionVote(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.UserRegionVoteParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionAuctionsParams
        ///  Active region auctions.
        /// </summary>
        public static string RegionAuctionsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionAuctions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionAuctionsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionAuctionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionAuctions
        ///  Active region auctions.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction> RegionAuctions(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionAuctionsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionReplacementAuctionsParams
        ///  Replacement auctions for regions.
        /// </summary>
        public static string RegionReplacementAuctionsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionReplacementAuctions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionReplacementAuctionsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionReplacementAuctionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionReplacementAuctions
        ///  Replacement auctions for regions.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction> RegionReplacementAuctions(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionReplacementAuctionsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionAuction>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionDetailsParams
        ///  Mapping of region to the region information.
        /// </summary>
        public static string RegionDetailsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionDetails", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionDetailsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionDetailsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionDetails
        ///  Mapping of region to the region information.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionInfo> RegionDetails(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionDetailsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RegionInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LocationRegistrationParams
        ///  True if a location is registered.
        /// </summary>
        public static string LocationRegistrationParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> key)
        {
            return RequestGenerator.GetStorage("Regions", "LocationRegistration", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LocationRegistrationDefault
        /// Default value as hex string
        /// </summary>
        public static string LocationRegistrationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocationRegistration
        ///  True if a location is registered.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> LocationRegistration(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.LocationRegistrationParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionOwnerProposalsParams
        ///  Mapping from Region ID to a proposal to remove the region owner.
        /// </summary>
        public static string RegionOwnerProposalsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionOwnerProposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionOwnerProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionOwnerProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionOwnerProposals
        ///  Mapping from Region ID to a proposal to remove the region owner.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RemoveRegionOwnerProposal> RegionOwnerProposals(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionOwnerProposalsParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.RemoveRegionOwnerProposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingRegionOwnerProposalVotesParams
        /// </summary>
        public static string OngoingRegionOwnerProposalVotesParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "OngoingRegionOwnerProposalVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingRegionOwnerProposalVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingRegionOwnerProposalVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingRegionOwnerProposalVotes
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats> OngoingRegionOwnerProposalVotes(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.OngoingRegionOwnerProposalVotesParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.VoteStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserRegionOwnerVoteParams
        /// </summary>
        public static string UserRegionOwnerVoteParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Regions", "UserRegionOwnerVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserRegionOwnerVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string UserRegionOwnerVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserRegionOwnerVote
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3> UserRegionOwnerVote(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.UserRegionOwnerVoteParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionOwnerRoundsExpiringParams
        ///  Stores the project keys and round types ending on a given block for region owner removal votings.
        /// </summary>
        public static string RegionOwnerRoundsExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Regions", "RegionOwnerRoundsExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionOwnerRoundsExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionOwnerRoundsExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegionOwnerRoundsExpiring
        ///  Stores the project keys and round types ending on a given block for region owner removal votings.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> RegionOwnerRoundsExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RegionOwnerRoundsExpiringParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReplacementAuctionExpiringParams
        ///  Stores the project keys and round types ending on a given block for region owner removal votings.
        /// </summary>
        public static string ReplacementAuctionExpiringParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Regions", "ReplacementAuctionExpiring", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReplacementAuctionExpiringDefault
        /// Default value as hex string
        /// </summary>
        public static string ReplacementAuctionExpiringDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReplacementAuctionExpiring
        ///  Stores the project keys and round types ending on a given block for region owner removal votings.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> ReplacementAuctionExpiring(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.ReplacementAuctionExpiringParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RealEstateLawyerParams
        ///  !!!!To be removed!!!!
        ///  Stores in which region a lawyer is active.
        /// </summary>
        public static string RealEstateLawyerParams(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Regions", "RealEstateLawyer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RealEstateLawyerDefault
        /// Default value as hex string
        /// </summary>
        public static string RealEstateLawyerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RealEstateLawyer
        ///  !!!!To be removed!!!!
        ///  Stores in which region a lawyer is active.
        /// </summary>
        public async Task<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.LawyerInfo> RealEstateLawyer(XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = RegionsStorage.RealEstateLawyerParams(key);
            var result = await _client.GetStorageAsync<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.LawyerInfo>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> RegionsCalls
    /// </summary>
    public sealed class RegionsCalls
    {
        
        /// <summary>
        /// >> propose_new_region
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ProposeNewRegion(XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumRegionIdentifier region_identifier)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_identifier.Encode());
            return new Method(91, "Regions", 0, "propose_new_region", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_region_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnRegionProposal(Substrate.NetApi.Model.Types.Primitive.U16 region_id, XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(91, "Regions", 1, "vote_on_region_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bid_on_region
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BidOnRegion(Substrate.NetApi.Model.Types.Primitive.U16 region_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(91, "Regions", 2, "bid_on_region", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_new_region
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateNewRegion(Substrate.NetApi.Model.Types.Primitive.U16 region_id, Substrate.NetApi.Model.Types.Primitive.U32 listing_duration, XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Permill tax)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(listing_duration.Encode());
            byteArray.AddRange(tax.Encode());
            return new Method(91, "Regions", 3, "create_new_region", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> adjust_listing_duration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AdjustListingDuration(Substrate.NetApi.Model.Types.Primitive.U16 region_id, Substrate.NetApi.Model.Types.Primitive.U32 listing_duration)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(listing_duration.Encode());
            return new Method(91, "Regions", 4, "adjust_listing_duration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> adjust_region_tax
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AdjustRegionTax(Substrate.NetApi.Model.Types.Primitive.U16 region_id, XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Permill new_tax)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(new_tax.Encode());
            return new Method(91, "Regions", 5, "adjust_region_tax", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_new_location
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateNewLocation(Substrate.NetApi.Model.Types.Primitive.U16 region_id, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(location.Encode());
            return new Method(91, "Regions", 6, "create_new_location", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> propose_remove_regional_operator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ProposeRemoveRegionalOperator(Substrate.NetApi.Model.Types.Primitive.U16 region_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            return new Method(91, "Regions", 7, "propose_remove_regional_operator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote_on_remove_owner_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VoteOnRemoveOwnerProposal(Substrate.NetApi.Model.Types.Primitive.U16 region_id, XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(91, "Regions", 8, "vote_on_remove_owner_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bid_on_region_replacement
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BidOnRegionReplacement(Substrate.NetApi.Model.Types.Primitive.U16 region_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(91, "Regions", 9, "bid_on_region_replacement", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> initiate_region_owner_resignation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitiateRegionOwnerResignation(Substrate.NetApi.Model.Types.Primitive.U16 region_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            return new Method(91, "Regions", 10, "initiate_region_owner_resignation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_lawyer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterLawyer(Substrate.NetApi.Model.Types.Primitive.U16 region)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            return new Method(91, "Regions", 13, "register_lawyer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unregister_lawyer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnregisterLawyer(Substrate.NetApi.Model.Types.Primitive.U16 region)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region.Encode());
            return new Method(91, "Regions", 14, "unregister_lawyer", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> RegionsConstants
    /// </summary>
    public sealed class RegionsConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The marketplace's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E66747863");
            return result;
        }
        
        /// <summary>
        /// >> MaxListingDuration
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxListingDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80970600");
            return result;
        }
        
        /// <summary>
        /// >> PostcodeLimit
        ///  The maximum length of data stored in for post codes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PostcodeLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> LocationDeposit
        ///  A deposit for operating a location.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 LocationDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000C16FF28623000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RegionVotingTime
        ///  The amount of time give to vote for a new region.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionVotingTime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> RegionAuctionTime
        ///  The amount of time give to vote for a new region.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionAuctionTime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> RegionThreshold
        ///  Threshold that needs to be reached to let a region get created.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Percent RegionThreshold()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Percent();
            result.Create("0x4B");
            return result;
        }
        
        /// <summary>
        /// >> RegionProposalCooldown
        ///  Minimum number of blocks between two proposals.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionProposalCooldown()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x90010000");
            return result;
        }
        
        /// <summary>
        /// >> RegionOperatorVotingTime
        ///  The amount of time give to vote against a region operator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionOperatorVotingTime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxProposalsForBlock
        ///  The maximum amount of proposals per block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxProposalsForBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryId
        ///  The Trasury's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId TreasuryId()
        {
            var result = new XcavatePaseo.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F7472737279");
            return result;
        }
        
        /// <summary>
        /// >> RegionSlashingAmount
        ///  The minimum amount of a regional operator that will be slashed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RegionSlashingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RegionOwnerChangePeriod
        ///  The time period required between region owner change.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionOwnerChangePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
        
        /// <summary>
        /// >> RegionOwnerNoticePeriod
        ///  Delay after a region owner resigns before a new auction can begin.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegionOwnerNoticePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x90010000");
            return result;
        }
        
        /// <summary>
        /// >> RegionOwnerDisputeDeposit
        ///  Deposit amount for a remove regional operator proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RegionOwnerDisputeDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinimumRegionDeposit
        ///  Minimum deposit for a location.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumRegionDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00008A5D784563010000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RegionProposalDeposit
        ///  Deposit for a region proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RegionProposalDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080E03779C311000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinimumVotingAmount
        ///  Minimum voting amount.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumVotingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00407A10F35A00000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRegionVoters
        ///  The maximum amount of voters for a region.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRegionVoters()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFA000000");
            return result;
        }
        
        /// <summary>
        /// >> LawyerDeposit
        ///  A deposit for being active as a lawyer.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 LawyerDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000C16FF28623000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> RegionsErrors
    /// </summary>
    public enum RegionsErrors
    {
        
        /// <summary>
        /// >> UserNotWhitelisted
        /// User did not pass the kyc.
        /// </summary>
        UserNotWhitelisted,
        
        /// <summary>
        /// >> ListingDurationCantBeZero
        /// The duration of a listing can not be zero.
        /// </summary>
        ListingDurationCantBeZero,
        
        /// <summary>
        /// >> ListingDurationTooHigh
        /// Listing limit is set too high.
        /// </summary>
        ListingDurationTooHigh,
        
        /// <summary>
        /// >> ArithmeticOverflow
        /// </summary>
        ArithmeticOverflow,
        
        /// <summary>
        /// >> ArithmeticUnderflow
        /// </summary>
        ArithmeticUnderflow,
        
        /// <summary>
        /// >> RegionUnknown
        /// This Region is not known.
        /// </summary>
        RegionUnknown,
        
        /// <summary>
        /// >> NoPermission
        /// No sufficient permission.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> LocationRegistered
        /// The location is already registered.
        /// </summary>
        LocationRegistered,
        
        /// <summary>
        /// >> NotOngoing
        /// The proposal is not ongoing.
        /// </summary>
        NotOngoing,
        
        /// <summary>
        /// >> NoOngoingAuction
        /// There is no auction to bid on.
        /// </summary>
        NoOngoingAuction,
        
        /// <summary>
        /// >> BidTooLow
        /// The bid is lower than the current highest bid.
        /// </summary>
        BidTooLow,
        
        /// <summary>
        /// >> BidBelowMinimum
        /// The bid is below the minimum.
        /// </summary>
        BidBelowMinimum,
        
        /// <summary>
        /// >> VotingStillOngoing
        /// The voting has not ended yet.
        /// </summary>
        VotingStillOngoing,
        
        /// <summary>
        /// >> NoAuction
        /// No Auction found.
        /// </summary>
        NoAuction,
        
        /// <summary>
        /// >> AuctionNotFinished
        /// Auction is still ongoing.
        /// </summary>
        AuctionNotFinished,
        
        /// <summary>
        /// >> RegionProposalCooldownActive
        /// Cant propose a new regions since the cooldown is still active.
        /// </summary>
        RegionProposalCooldownActive,
        
        /// <summary>
        /// >> ProposalExpired
        /// The proposa has already expired.
        /// </summary>
        ProposalExpired,
        
        /// <summary>
        /// >> BidCannotBeZero
        /// Bid amount can not be zero.
        /// </summary>
        BidCannotBeZero,
        
        /// <summary>
        /// >> AlreadyRegionOperator
        /// This account is already registers as a region operator.
        /// </summary>
        AlreadyRegionOperator,
        
        /// <summary>
        /// >> NoRegionalOperator
        /// This account is not a regional operator.
        /// </summary>
        NoRegionalOperator,
        
        /// <summary>
        /// >> UserNotRegionalOperator
        /// The user is not a regional operator.
        /// </summary>
        UserNotRegionalOperator,
        
        /// <summary>
        /// >> ProposalAlreadyOngoing
        /// There is alerady a proposal ongoing for this region.
        /// </summary>
        ProposalAlreadyOngoing,
        
        /// <summary>
        /// >> TooManyProposals
        /// There are already too many proposals in the ending block.
        /// </summary>
        TooManyProposals,
        
        /// <summary>
        /// >> RegionOwnerCantBeChanged
        /// Region owner cant be changed at the moment.
        /// </summary>
        RegionOwnerCantBeChanged,
        
        /// <summary>
        /// >> TooManyAuctions
        /// There are already too many auctions in the ending block.
        /// </summary>
        TooManyAuctions,
        
        /// <summary>
        /// >> NotRegionOwner
        /// Caller is not the region owner.
        /// </summary>
        NotRegionOwner,
        
        /// <summary>
        /// >> OwnerChangeAlreadyScheduled
        /// Owner would change before resignation period would be over.
        /// </summary>
        OwnerChangeAlreadyScheduled,
        
        /// <summary>
        /// >> ProposalNotFound
        /// The proposal could not be found.
        /// </summary>
        ProposalNotFound,
        
        /// <summary>
        /// >> RegionAlreadyCreated
        /// The region has already been created.
        /// </summary>
        RegionAlreadyCreated,
        
        /// <summary>
        /// >> RegionProposalAlreadyExists
        /// This region has an ongoing proposal.
        /// </summary>
        RegionProposalAlreadyExists,
        
        /// <summary>
        /// >> NotEnoughTokenToVote
        /// The caller does not have enough token to vote.
        /// </summary>
        NotEnoughTokenToVote,
        
        /// <summary>
        /// >> RegionHasNoWinningBidder
        /// The auction does not have an winning bidder.
        /// </summary>
        RegionHasNoWinningBidder,
        
        /// <summary>
        /// >> LawyerAlreadyRegistered
        /// The lawyer has already been registered.
        /// </summary>
        LawyerAlreadyRegistered,
        
        /// <summary>
        /// >> TooManyVoters
        /// There are already too many voters for this voting.
        /// </summary>
        TooManyVoters,
        
        /// <summary>
        /// >> AccountNotLawyer
        /// The account can has not lawyer permission.
        /// </summary>
        AccountNotLawyer,
        
        /// <summary>
        /// >> LawyerNotRegistered
        /// Lawyer is not registered.
        /// </summary>
        LawyerNotRegistered,
        
        /// <summary>
        /// >> LawyerStillActive
        /// The lawyer is still active in some cases.
        /// </summary>
        LawyerStillActive,
    }
}
