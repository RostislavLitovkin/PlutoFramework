//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_new_region
        /// Creates a new region for the marketplace.
        /// This function calls the nfts-pallet to create a new collection.
        /// 
        /// The origin must be the LocationOrigin.
        /// 
        /// Parameters:
        /// - `listing_duration`: Duration of a listing in this region.
        /// 
        /// Emits `RegionCreated` event when succesfful.
        /// </summary>
        create_new_region = 0,
        
        /// <summary>
        /// >> adjust_listing_duration
        /// </summary>
        adjust_listing_duration = 30,
        
        /// <summary>
        /// >> adjust_region_tax
        /// </summary>
        adjust_region_tax = 31,
        
        /// <summary>
        /// >> propose_region_takeover
        /// </summary>
        propose_region_takeover = 32,
        
        /// <summary>
        /// >> handle_takeover
        /// </summary>
        handle_takeover = 33,
        
        /// <summary>
        /// >> cancel_region_takeover
        /// </summary>
        cancel_region_takeover = 34,
        
        /// <summary>
        /// >> create_new_location
        /// Creates a new location for a region.
        /// 
        /// The origin must be the LocationOrigin.
        /// 
        /// Parameters:
        /// - `region`: The region where the new location should be created.
        /// - `location`: The postcode of the new location.
        /// 
        /// Emits `LocationCreated` event when succesfful.
        /// </summary>
        create_new_location = 1,
        
        /// <summary>
        /// >> list_object
        /// List a real estate object. A new nft gets minted.
        /// This function calls the nfts-pallet to mint a new nft and sets the Metadata.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region`: The region where the object is located.
        /// - `location`: The location where the object is located.
        /// - `token_price`: The price of a single token.
        /// - `token_amount`: The amount of tokens for a object.
        /// - `data`: The Metadata of the nft.
        /// 
        /// Emits `ObjectListed` event when succesfful
        /// </summary>
        list_object = 2,
        
        /// <summary>
        /// >> buy_token
        /// Buy listed token from the marketplace.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy token from.
        /// - `amount`: The amount of token that the investor wants to buy.
        /// - `payment_asset`: Asset in which the investor wants to pay.
        /// 
        /// Emits `PropertyTokenBought` event when succesfful.
        /// </summary>
        buy_token = 3,
        
        /// <summary>
        /// >> relist_token
        /// Relist token on the marketplace.
        /// The nft must be registered on the marketplace.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region`: The region where the object is located.
        /// - `item_id`: The item id of the nft.
        /// - `token_price`: The price of a single token.
        /// - `amount`: The amount of token of the real estate object that should be listed.
        /// 
        /// Emits `TokenRelisted` event when succesfful
        /// </summary>
        relist_token = 4,
        
        /// <summary>
        /// >> buy_relisted_token
        /// Buy token from the marketplace.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// - `amount`: The amount of token the investor wants to buy.
        /// - `payment_asset`: Asset in which the investor wants to pay.
        /// 
        /// Emits `RelistedTokenBought` event when succesfful.
        /// </summary>
        buy_relisted_token = 5,
        
        /// <summary>
        /// >> cancel_buy
        /// Lets a investor cancel the property token purchase.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// 
        /// Emits `BuyCancelled` event when succesfful.
        /// </summary>
        cancel_buy = 6,
        
        /// <summary>
        /// >> make_offer
        /// Created an offer for a token listing.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// - `offer_price`: The offer price for token that are offered.
        /// - `amount`: The amount of token that the investor wants to buy.
        /// - `payment_asset`: Asset in which the investor wants to pay.
        /// 
        /// Emits `OfferCreated` event when succesfful.
        /// </summary>
        make_offer = 7,
        
        /// <summary>
        /// >> handle_offer
        /// Lets the investor handle an offer.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// - `offeror`: AccountId of the person that the seller wants to handle the offer from.
        /// - `offer`: Enum for offer which is either Accept or Reject.
        /// 
        /// Emits `OfferAccepted` event when offer gets accepted succesffully.
        /// Emits `OfferRejected` event when offer gets rejected succesffully.
        /// </summary>
        handle_offer = 8,
        
        /// <summary>
        /// >> cancel_offer
        /// Lets the investor cancel an offer.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// 
        /// Emits `OfferCancelled` event when succesfful.
        /// </summary>
        cancel_offer = 9,
        
        /// <summary>
        /// >> withdraw_funds
        /// Lets the investor withdraw his funds after a property deal was unsuccessful.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// 
        /// Emits `RejectedFundsWithdrawn` event when succesfful.
        /// </summary>
        withdraw_funds = 10,
        
        /// <summary>
        /// >> refund_expired
        /// Lets the investor unfreeze his funds after a property listing expired.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the investor wants to buy from.
        /// 
        /// Emits `ExpiredFundsWithdrawn` event when succesfful.
        /// </summary>
        refund_expired = 11,
        
        /// <summary>
        /// >> reclaim_unsold
        /// </summary>
        reclaim_unsold = 12,
        
        /// <summary>
        /// >> upgrade_listing
        /// Upgrade the price from a listing.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the seller wants to update.
        /// - `new_price`: The new price of the nft.
        /// 
        /// Emits `ListingUpdated` event when succesfful.
        /// </summary>
        upgrade_listing = 13,
        
        /// <summary>
        /// >> upgrade_object
        /// Upgrade the price from a listed object.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the seller wants to update.
        /// - `new_price`: The new price of the object.
        /// 
        /// Emits `ObjectUpdated` event when succesfful.
        /// </summary>
        upgrade_object = 14,
        
        /// <summary>
        /// >> delist_token
        /// Delist the choosen listing from the marketplace.
        /// Works only for relisted token.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing that the seller wants to delist.
        /// 
        /// Emits `ListingDelisted` event when succesfful.
        /// </summary>
        delist_token = 15,
        
        /// <summary>
        /// >> register_lawyer
        /// Registers a new lawyer.
        /// 
        /// The origin must be the LocationOrigin.
        /// 
        /// Parameters:
        /// - `lawyer`: The lawyer that should be registered.
        /// 
        /// Emits `LawyerRegistered` event when succesfful.
        /// </summary>
        register_lawyer = 16,
        
        /// <summary>
        /// >> lawyer_claim_property
        /// Lets a lawyer claim a property to handle the legal work.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing from the property.
        /// - `legal_side`: The side that the lawyer wants to represent.
        /// - `costs`: The costs thats the lawyer demands for his work.
        /// 
        /// Emits `LawyerClaimedProperty` event when succesfful.
        /// </summary>
        lawyer_claim_property = 17,
        
        /// <summary>
        /// >> remove_from_case
        /// Lets a lawyer step back from a case.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing from the property.
        /// 
        /// Emits `LawyerRemovedFromCase` event when succesfful.
        /// </summary>
        remove_from_case = 18,
        
        /// <summary>
        /// >> lawyer_confirm_documents
        /// Lets a lawyer confirm a legal case.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `listing_id`: The listing from the property.
        /// - `approve`: Approves or Rejects the case.
        /// 
        /// Emits `DocumentsConfirmed` event when succesfful.
        /// </summary>
        lawyer_confirm_documents = 19,
        
        /// <summary>
        /// >> send_property_token
        /// Lets the sender send property token to another account.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `asset_id`: The asset id of the property.
        /// - `receiver`: AccountId of the person that the seller wants to handle the offer from.
        /// - `token_amount`: The amount of token the sender wants to send.
        /// 
        /// Emits `DocumentsConfirmed` event when succesfful.
        /// </summary>
        send_property_token = 20,
    }
    
    /// <summary>
    /// >> 367 - Variant[pallet_nft_marketplace.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.create_new_region);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.adjust_listing_duration);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.adjust_region_tax);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.propose_region_takeover);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.types.EnumTakeoverAction>>(Call.handle_takeover);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.cancel_region_takeover);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9>>(Call.create_new_location);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.list_object);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.buy_token);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.relist_token);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.buy_relisted_token);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.cancel_buy);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.make_offer);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.types.EnumOffer>>(Call.handle_offer);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.cancel_offer);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.withdraw_funds);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.refund_expired);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.reclaim_unsold);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.upgrade_listing);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.upgrade_object);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.delist_token);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(Call.register_lawyer);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.pallet_nft_marketplace.types.EnumLegalProperty, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.lawyer_claim_property);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.remove_from_case);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.lawyer_confirm_documents);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.send_property_token);
        }
    }
}
