//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> propose_new_region
        /// Creates a proposal for a new region.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_identifier`: The id of the region the caller is proposing.
        /// 
        /// Emits `RegionProposed` event when succesfful.
        /// </summary>
        propose_new_region = 0,
        
        /// <summary>
        /// >> vote_on_region_proposal
        /// Lets a xcav holder vote on a proposal for a region.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: Id of the region.
        /// - `vote`: Must be either a Yes vote or a No vote.
        /// 
        /// Emits `VotedOnRegionProposal` event when succesfful.
        /// </summary>
        vote_on_region_proposal = 1,
        
        /// <summary>
        /// >> bid_on_region
        /// Lets a registered account bid on a region to become the regional operator.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: Id of the region.
        /// - `amount`: The amount that the caller is willing to bid and to have locked.
        /// 
        /// Emits `BidSuccessfullyPlaced` event when succesfful.
        /// </summary>
        bid_on_region = 2,
        
        /// <summary>
        /// >> create_new_region
        /// Creates a new region for the marketplace.
        /// This function calls the nfts-pallet to create a new collection.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: Id of the region.
        /// - `listing_duration`: Duration of a listing in this region.
        /// - `tax`: Tax percentage for selling a property in this region.
        /// 
        /// Emits `RegionCreated` event when succesfful.
        /// </summary>
        create_new_region = 3,
        
        /// <summary>
        /// >> adjust_listing_duration
        /// Region owner can adjust the listing duration.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: Region in where the listing duration should be changed.
        /// - `listing_duration`: New duration of a listing in this region.
        /// 
        /// Emits `ListingDurationChanged` event when succesfful.
        /// </summary>
        adjust_listing_duration = 4,
        
        /// <summary>
        /// >> adjust_region_tax
        /// Region owner can adjust the tax in a region.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: Region in where the tax should be changed.
        /// - `new_tax`: New tax for a property sell in this region.
        /// 
        /// Emits `RegionTaxChanged` event when succesfful.
        /// </summary>
        adjust_region_tax = 5,
        
        /// <summary>
        /// >> create_new_location
        /// Creates a new location for a region.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: The region where the new location should be created.
        /// - `location`: The postcode of the new location.
        /// 
        /// Emits `LocationCreated` event when succesfful.
        /// </summary>
        create_new_location = 6,
        
        /// <summary>
        /// >> propose_remove_regional_operator
        /// Creates proposal to remove a region owner.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: The region where the region owner should be removed.
        /// 
        /// Emits `RemoveRegionOwnerProposed` event when succesfful.
        /// </summary>
        propose_remove_regional_operator = 7,
        
        /// <summary>
        /// >> vote_on_remove_owner_proposal
        /// Vote on proposal to remove a region owner.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: The region where the region owner should be removed.
        /// - `vote`: Must be either a Yes vote or a No vote.
        /// 
        /// Emits `VotedOnRegionOwnerProposal` event when succesfful.
        /// </summary>
        vote_on_remove_owner_proposal = 8,
        
        /// <summary>
        /// >> bid_on_region_replacement
        /// Lets a registered account bid on a region to become the new regional operator.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: The region where the region owner should be removed.
        /// - `amount`: The amount that the caller is willing to bid and to have locked.
        /// 
        /// Emits `ReplacementBidSuccessfullyPlaced` event when succesfful.
        /// </summary>
        bid_on_region_replacement = 9,
        
        /// <summary>
        /// >> initiate_region_owner_resignation
        /// Lets a regional operator resign.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `region_id`: The region where the region wants to resign.
        /// 
        /// Emits `RegionOwnerResignationInitiated` event when succesfful.
        /// </summary>
        initiate_region_owner_resignation = 10,
        
        /// <summary>
        /// >> register_lawyer
        /// Registers a new lawyer.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `lawyer`: The lawyer that should be registered.
        /// 
        /// Emits `LawyerRegistered` event when succesfful.
        /// </summary>
        register_lawyer = 13,
        
        /// <summary>
        /// >> unregister_lawyer
        /// Unegisters a new lawyer.
        /// 
        /// The origin must be Signed and the sender must have sufficient funds free.
        /// 
        /// Parameters:
        /// - `lawyer`: The lawyer that should be runegistered.
        /// 
        /// Emits `LawyerUnregistered` event when succesfful.
        /// </summary>
        unregister_lawyer = 14,
    }
    
    /// <summary>
    /// >> 373 - Variant[pallet_regions.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumRegionIdentifier>(Call.propose_new_region);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumVote>>(Call.vote_on_region_proposal);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.bid_on_region);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32, XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(Call.create_new_region);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.adjust_listing_duration);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(Call.adjust_region_tax);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>>(Call.create_new_location);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U16>(Call.propose_remove_regional_operator);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, XcavatePaseo.NetApi.Generated.Model.pallet_regions.pallet.EnumVote>>(Call.vote_on_remove_owner_proposal);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.bid_on_region_replacement);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U16>(Call.initiate_region_owner_resignation);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U16>(Call.register_lawyer);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U16>(Call.unregister_lawyer);
        }
    }
}
