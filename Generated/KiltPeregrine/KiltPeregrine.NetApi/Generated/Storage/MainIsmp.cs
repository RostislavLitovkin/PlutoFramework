//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace KiltPeregrine.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> IsmpStorage
    /// </summary>
    public sealed class IsmpStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> IsmpStorage Constructor
        /// </summary>
        public IsmpStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "StateCommitments"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight), typeof(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateCommitment)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "ConsensusStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "ConsensusStateClient"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8), typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "UnbondingPeriod"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "ChallengePeriod"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "FrozenConsensusClients"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "LatestStateMachineHeight"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "ConsensusClientUpdateTime"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "StateMachineUpdateTime"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "Responded"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(KiltPeregrine.NetApi.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "Nonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Ismp", "ChildTrieRoot"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(KiltPeregrine.NetApi.Generated.Model.primitive_types.H256)));
        }
        
        /// <summary>
        /// >> StateCommitmentsParams
        ///  Holds a map of state machine heights to their verified state commitments. These state
        ///  commitments end up here after they are successfully verified by a `ConsensusClient`
        /// </summary>
        public static string StateCommitmentsParams(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight key)
        {
            return RequestGenerator.GetStorage("Ismp", "StateCommitments", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> StateCommitmentsDefault
        /// Default value as hex string
        /// </summary>
        public static string StateCommitmentsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> StateCommitments
        ///  Holds a map of state machine heights to their verified state commitments. These state
        ///  commitments end up here after they are successfully verified by a `ConsensusClient`
        /// </summary>
        public async Task<KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateCommitment> StateCommitments(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.StateCommitmentsParams(key);
            var result = await _client.GetStorageAsync<KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateCommitment>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ConsensusStatesParams
        ///  Holds a map of consensus state identifiers to their consensus state.
        /// </summary>
        public static string ConsensusStatesParams(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key)
        {
            return RequestGenerator.GetStorage("Ismp", "ConsensusStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ConsensusStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string ConsensusStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConsensusStates
        ///  Holds a map of consensus state identifiers to their consensus state.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> ConsensusStates(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.ConsensusStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ConsensusStateClientParams
        ///  A mapping of consensus state identifier to it's associated consensus client identifier
        /// </summary>
        public static string ConsensusStateClientParams(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key)
        {
            return RequestGenerator.GetStorage("Ismp", "ConsensusStateClient", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ConsensusStateClientDefault
        /// Default value as hex string
        /// </summary>
        public static string ConsensusStateClientDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConsensusStateClient
        ///  A mapping of consensus state identifier to it's associated consensus client identifier
        /// </summary>
        public async Task<KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8> ConsensusStateClient(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.ConsensusStateClientParams(key);
            var result = await _client.GetStorageAsync<KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnbondingPeriodParams
        ///  A mapping of consensus state identifiers to their unbonding periods
        /// </summary>
        public static string UnbondingPeriodParams(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key)
        {
            return RequestGenerator.GetStorage("Ismp", "UnbondingPeriod", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnbondingPeriodDefault
        /// Default value as hex string
        /// </summary>
        public static string UnbondingPeriodDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnbondingPeriod
        ///  A mapping of consensus state identifiers to their unbonding periods
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> UnbondingPeriod(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.UnbondingPeriodParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChallengePeriodParams
        ///  A mapping of state machine Ids to their challenge periods
        /// </summary>
        public static string ChallengePeriodParams(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId key)
        {
            return RequestGenerator.GetStorage("Ismp", "ChallengePeriod", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ChallengePeriodDefault
        /// Default value as hex string
        /// </summary>
        public static string ChallengePeriodDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ChallengePeriod
        ///  A mapping of state machine Ids to their challenge periods
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ChallengePeriod(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.ChallengePeriodParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FrozenConsensusClientsParams
        ///  Holds a map of consensus clients frozen due to byzantine
        ///  behaviour
        /// </summary>
        public static string FrozenConsensusClientsParams(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key)
        {
            return RequestGenerator.GetStorage("Ismp", "FrozenConsensusClients", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> FrozenConsensusClientsDefault
        /// Default value as hex string
        /// </summary>
        public static string FrozenConsensusClientsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FrozenConsensusClients
        ///  Holds a map of consensus clients frozen due to byzantine
        ///  behaviour
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> FrozenConsensusClients(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.FrozenConsensusClientsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LatestStateMachineHeightParams
        ///  The latest verified height for a state machine
        /// </summary>
        public static string LatestStateMachineHeightParams(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId key)
        {
            return RequestGenerator.GetStorage("Ismp", "LatestStateMachineHeight", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LatestStateMachineHeightDefault
        /// Default value as hex string
        /// </summary>
        public static string LatestStateMachineHeightDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LatestStateMachineHeight
        ///  The latest verified height for a state machine
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> LatestStateMachineHeight(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineId key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.LatestStateMachineHeightParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ConsensusClientUpdateTimeParams
        ///  Holds the timestamp at which a consensus client was recently updated.
        ///  Used in ensuring that the configured challenge period elapses.
        /// </summary>
        public static string ConsensusClientUpdateTimeParams(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key)
        {
            return RequestGenerator.GetStorage("Ismp", "ConsensusClientUpdateTime", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ConsensusClientUpdateTimeDefault
        /// Default value as hex string
        /// </summary>
        public static string ConsensusClientUpdateTimeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConsensusClientUpdateTime
        ///  Holds the timestamp at which a consensus client was recently updated.
        ///  Used in ensuring that the configured challenge period elapses.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ConsensusClientUpdateTime(KiltPeregrine.NetApi.Generated.Types.Base.Arr4U8 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.ConsensusClientUpdateTimeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> StateMachineUpdateTimeParams
        ///  Holds the timestamp at which a state machine height was updated.
        ///  Used in ensuring that the configured challenge period elapses.
        /// </summary>
        public static string StateMachineUpdateTimeParams(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight key)
        {
            return RequestGenerator.GetStorage("Ismp", "StateMachineUpdateTime", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> StateMachineUpdateTimeDefault
        /// Default value as hex string
        /// </summary>
        public static string StateMachineUpdateTimeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> StateMachineUpdateTime
        ///  Holds the timestamp at which a state machine height was updated.
        ///  Used in ensuring that the configured challenge period elapses.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> StateMachineUpdateTime(KiltPeregrine.NetApi.Generated.Model.ismp.consensus.StateMachineHeight key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.StateMachineUpdateTimeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RespondedParams
        ///  Tracks requests that have been responded to
        ///  The key is the request commitment
        /// </summary>
        public static string RespondedParams(KiltPeregrine.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Ismp", "Responded", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RespondedDefault
        /// Default value as hex string
        /// </summary>
        public static string RespondedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Responded
        ///  Tracks requests that have been responded to
        ///  The key is the request commitment
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> Responded(KiltPeregrine.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.RespondedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NonceParams
        ///  Latest nonce for messages sent from this chain
        /// </summary>
        public static string NonceParams()
        {
            return RequestGenerator.GetStorage("Ismp", "Nonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NonceDefault
        /// Default value as hex string
        /// </summary>
        public static string NonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Nonce
        ///  Latest nonce for messages sent from this chain
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Nonce(string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.NonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChildTrieRootParams
        ///  The child trie root of messages
        /// </summary>
        public static string ChildTrieRootParams()
        {
            return RequestGenerator.GetStorage("Ismp", "ChildTrieRoot", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ChildTrieRootDefault
        /// Default value as hex string
        /// </summary>
        public static string ChildTrieRootDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ChildTrieRoot
        ///  The child trie root of messages
        /// </summary>
        public async Task<KiltPeregrine.NetApi.Generated.Model.primitive_types.H256> ChildTrieRoot(string blockhash, CancellationToken token)
        {
            string parameters = IsmpStorage.ChildTrieRootParams();
            var result = await _client.GetStorageAsync<KiltPeregrine.NetApi.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> IsmpCalls
    /// </summary>
    public sealed class IsmpCalls
    {
        
        /// <summary>
        /// >> handle_unsigned
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HandleUnsigned(Substrate.NetApi.Model.Types.Base.BaseVec<KiltPeregrine.NetApi.Generated.Model.ismp.messaging.EnumMessage> messages)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(messages.Encode());
            return new Method(90, "Ismp", 0, "handle_unsigned", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_consensus_client
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateConsensusClient(KiltPeregrine.NetApi.Generated.Model.ismp.messaging.CreateConsensusState message)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message.Encode());
            return new Method(90, "Ismp", 2, "create_consensus_client", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_consensus_state
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateConsensusState(KiltPeregrine.NetApi.Generated.Model.pallet_ismp.utils.UpdateConsensusState message)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message.Encode());
            return new Method(90, "Ismp", 3, "update_consensus_state", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fund_message
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FundMessage(KiltPeregrine.NetApi.Generated.Model.pallet_ismp.utils.FundMessageParams message)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message.Encode());
            return new Method(90, "Ismp", 4, "fund_message", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> IsmpConstants
    /// </summary>
    public sealed class IsmpConstants
    {
    }
    
    /// <summary>
    /// >> IsmpErrors
    /// </summary>
    public enum IsmpErrors
    {
        
        /// <summary>
        /// >> InvalidMessage
        /// Invalid ISMP message
        /// </summary>
        InvalidMessage,
        
        /// <summary>
        /// >> MessageNotFound
        /// Requested message was not found
        /// </summary>
        MessageNotFound,
        
        /// <summary>
        /// >> ConsensusClientCreationFailed
        /// Encountered an error while creating the consensus client.
        /// </summary>
        ConsensusClientCreationFailed,
        
        /// <summary>
        /// >> UnbondingPeriodUpdateFailed
        /// Couldn't update unbonding period
        /// </summary>
        UnbondingPeriodUpdateFailed,
        
        /// <summary>
        /// >> ChallengePeriodUpdateFailed
        /// Couldn't update challenge period
        /// </summary>
        ChallengePeriodUpdateFailed,
    }
}
