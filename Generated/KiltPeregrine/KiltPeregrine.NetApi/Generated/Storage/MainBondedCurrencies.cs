//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace KiltPeregrine.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BondedCurrenciesStorage
    /// </summary>
    public sealed class BondedCurrenciesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BondedCurrenciesStorage Constructor
        /// </summary>
        public BondedCurrenciesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BondedCurrencies", "Pools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.PoolDetails)));
        }
        
        /// <summary>
        /// >> PoolsParams
        /// </summary>
        public static string PoolsParams(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BondedCurrencies", "Pools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Pools
        /// </summary>
        public async Task<KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.PoolDetails> Pools(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BondedCurrenciesStorage.PoolsParams(key);
            var result = await _client.GetStorageAsync<KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.PoolDetails>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BondedCurrenciesCalls
    /// </summary>
    public sealed class BondedCurrenciesCalls
    {
        
        /// <summary>
        /// >> create_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreatePool(KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.curves.EnumCurveInput curve, KiltPeregrine.NetApi.Generated.Model.staging_xcm.v4.location.Location collateral_id, KiltPeregrine.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26 currencies, KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.BondedCurrenciesSettings currencies_settings)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(curve.Encode());
            byteArray.AddRange(collateral_id.Encode());
            byteArray.AddRange(currencies.Encode());
            byteArray.AddRange(currencies_settings.Encode());
            return new Method(75, "BondedCurrencies", 0, "create_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_team
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetTeam(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.PoolManagingTeam team, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(team.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 1, "reset_team", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_manager
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetManager(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Base.BaseOpt<KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32> new_manager)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(new_manager.Encode());
            return new Method(75, "BondedCurrencies", 2, "reset_manager", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetLock(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, KiltPeregrine.NetApi.Generated.Model.pallet_bonded_coins.types.Locks @lock)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(@lock.Encode());
            return new Method(75, "BondedCurrencies", 3, "set_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unlock(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(75, "BondedCurrencies", 4, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_into
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MintInto(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_idx, KiltPeregrine.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress beneficiary, Substrate.NetApi.Model.Types.Primitive.U128 amount_to_mint, Substrate.NetApi.Model.Types.Primitive.U128 max_cost, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_idx.Encode());
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(amount_to_mint.Encode());
            byteArray.AddRange(max_cost.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 5, "mint_into", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> burn_into
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BurnInto(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_idx, KiltPeregrine.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress beneficiary, Substrate.NetApi.Model.Types.Primitive.U128 amount_to_burn, Substrate.NetApi.Model.Types.Primitive.U128 min_return, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_idx.Encode());
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(amount_to_burn.Encode());
            byteArray.AddRange(min_return.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 6, "burn_into", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> start_refund
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StartRefund(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 8, "start_refund", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_start_refund
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceStartRefund(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 9, "force_start_refund", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refund_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RefundAccount(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, KiltPeregrine.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account, Substrate.NetApi.Model.Types.Primitive.U32 asset_idx, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(asset_idx.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 10, "refund_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> start_destroy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StartDestroy(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 11, "start_destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_start_destroy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceStartDestroy(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 12, "force_start_destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> finish_destroy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FinishDestroy(KiltPeregrine.NetApi.Generated.Model.sp_core.crypto.AccountId32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 currency_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_count.Encode());
            return new Method(75, "BondedCurrencies", 13, "finish_destroy", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BondedCurrenciesConstants
    /// </summary>
    public sealed class BondedCurrenciesConstants
    {
        
        /// <summary>
        /// >> MaxCurrenciesPerPool
        ///  The maximum number of currencies allowed for a single pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCurrenciesPerPool()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStringInputLength
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStringInputLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDenomination
        ///  The maximum denomination that bonded currencies can use. This should
        ///  be configured so that
        ///  10^MaxDenomination < 2^CurveParameterType::frac_nbits()
        ///  as larger denominations could result in truncation.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxDenomination()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0F");
            return result;
        }
        
        /// <summary>
        /// >> DepositPerCurrency
        ///  The deposit required for each bonded currency.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DepositPerCurrency()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BaseDeposit
        ///  The base deposit required to create a new pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 BaseDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BondedCurrenciesErrors
    /// </summary>
    public enum BondedCurrenciesErrors
    {
        
        /// <summary>
        /// >> PoolUnknown
        /// The pool id is not currently registered.
        /// </summary>
        PoolUnknown,
        
        /// <summary>
        /// >> IndexOutOfBounds
        /// The pool has no associated bonded currency with the given index.
        /// </summary>
        IndexOutOfBounds,
        
        /// <summary>
        /// >> NothingToRefund
        /// The pool does not hold collateral to be refunded, or has no
        /// remaining supply of tokens to exchange. Call start_destroy to
        /// intiate teardown.
        /// </summary>
        NothingToRefund,
        
        /// <summary>
        /// >> NoPermission
        /// The user is not privileged to perform the requested operation.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> PoolNotLive
        /// The pool is deactivated (i.e., in destroying or refunding state) and
        /// not available for use.
        /// </summary>
        PoolNotLive,
        
        /// <summary>
        /// >> LivePool
        /// There are active accounts associated with this pool and thus it
        /// cannot be destroyed at this point.
        /// </summary>
        LivePool,
        
        /// <summary>
        /// >> NotRefunding
        /// This operation can only be made when the pool is in refunding state.
        /// </summary>
        NotRefunding,
        
        /// <summary>
        /// >> CurrencyCount
        /// The number of currencies linked to a pool exceeds the limit
        /// parameter. Thrown by transactions that require specifying the number
        /// of a pool's currencies in order to determine weight limits upfront.
        /// </summary>
        CurrencyCount,
        
        /// <summary>
        /// >> InvalidInput
        /// Raised if pool creation arguments are outside of the allowed value
        /// range.
        /// </summary>
        InvalidInput,
        
        /// <summary>
        /// >> Internal
        /// An internal error occurred. This should never happen.
        /// </summary>
        Internal,
        
        /// <summary>
        /// >> Slippage
        /// The collateral required for the minting operation exceeds the
        /// provided maximum cost or the released collateral in the burning
        /// operation is less than the minimum return.
        /// </summary>
        Slippage,
        
        /// <summary>
        /// >> ZeroCollateral
        /// The calculated collateral is zero.
        /// </summary>
        ZeroCollateral,
        
        /// <summary>
        /// >> ZeroBondedCurrency
        /// A pool has to contain at least one bonded currency.
        /// </summary>
        ZeroBondedCurrency,
    }
}
