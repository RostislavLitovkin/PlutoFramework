//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using PlutoWallet.Model.AjunaExt;
using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BifrostAssetRegistryStorage
    /// </summary>
    public sealed class BifrostAssetRegistryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BifrostAssetRegistryStorage Constructor
        /// </summary>
        public BifrostAssetRegistryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "NextForeignAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "NextTokenId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "CurrencyIdToLocations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "LocationToCurrencyIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation), typeof(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "CurrencyIdToWeights"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Generated.Model.sp_weights.weight_v2.Weight)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "AssetMetadatas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumAssetIds), typeof(Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "CurrencyMetadatas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata)));
        }
        
        /// <summary>
        /// >> NextForeignAssetIdParams
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        public static string NextForeignAssetIdParams()
        {
            return RequestGenerator.GetStorage("AssetRegistry", "NextForeignAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextForeignAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextForeignAssetIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextForeignAssetId
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextForeignAssetId(CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.NextForeignAssetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NextTokenIdParams
        ///  Next available TokenId ID.
        /// 
        ///  NextTokenId: TokenId
        /// </summary>
        public static string NextTokenIdParams()
        {
            return RequestGenerator.GetStorage("AssetRegistry", "NextTokenId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextTokenIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextTokenIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextTokenId
        ///  Next available TokenId ID.
        /// 
        ///  NextTokenId: TokenId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U8> NextTokenId(CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.NextTokenIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U8>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyIdToLocationsParams
        ///  The storages for MultiLocations.
        /// 
        ///  CurrencyIdToLocations: map CurrencyId => Option<MultiLocation>
        /// </summary>
        public static string CurrencyIdToLocationsParams(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "CurrencyIdToLocations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyIdToLocationsDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyIdToLocationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyIdToLocations
        ///  The storages for MultiLocations.
        /// 
        ///  CurrencyIdToLocations: map CurrencyId => Option<MultiLocation>
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> CurrencyIdToLocations(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.CurrencyIdToLocationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LocationToCurrencyIdsParams
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>
        /// </summary>
        public static string LocationToCurrencyIdsParams(Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "LocationToCurrencyIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LocationToCurrencyIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string LocationToCurrencyIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocationToCurrencyIds
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> LocationToCurrencyIds(Substrate.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation key, CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.LocationToCurrencyIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyIdToWeightsParams
        /// </summary>
        public static string CurrencyIdToWeightsParams(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "CurrencyIdToWeights", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyIdToWeightsDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyIdToWeightsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyIdToWeights
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.sp_weights.weight_v2.Weight> CurrencyIdToWeights(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.CurrencyIdToWeightsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.sp_weights.weight_v2.Weight>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetMetadatasParams
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        public static string AssetMetadatasParams(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumAssetIds key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "AssetMetadatas", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetMetadatasDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetMetadatasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetMetadatas
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata> AssetMetadatas(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumAssetIds key, CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.AssetMetadatasParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyMetadatasParams
        ///  The storages for AssetMetadata.
        /// 
        ///  CurrencyMetadatas: map CurrencyId => Option<AssetMetadata>
        /// </summary>
        public static string CurrencyMetadatasParams(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "CurrencyMetadatas", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyMetadatasDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyMetadatasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyMetadatas
        ///  The storages for AssetMetadata.
        /// 
        ///  CurrencyMetadatas: map CurrencyId => Option<AssetMetadata>
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata> CurrencyMetadatas(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, CancellationToken token)
        {
            string parameters = BifrostAssetRegistryStorage.CurrencyMetadatasParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata>(parameters, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AssetRegistryCalls
    /// </summary>
    public sealed class AssetRegistryCalls
    {
        
        /// <summary>
        /// >> register_native_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterNativeAsset(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Generated.Model.staging_xcm.EnumVersionedMultiLocation location, Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(metadata.Encode());
            return new Method(114, "AssetRegistry", 0, "register_native_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_native_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateNativeAsset(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Generated.Model.staging_xcm.EnumVersionedMultiLocation location, Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(metadata.Encode());
            return new Method(114, "AssetRegistry", 1, "update_native_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_token_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterTokenMetadata(Substrate.NetApi.Generated.Model.bifrost_asset_registry.pallet.AssetMetadata metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(metadata.Encode());
            return new Method(114, "AssetRegistry", 2, "register_token_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_vtoken_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterVtokenMetadata(Substrate.NetApi.Model.Types.Primitive.U8 token_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            return new Method(114, "AssetRegistry", 3, "register_vtoken_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_vstoken_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterVstokenMetadata(Substrate.NetApi.Model.Types.Primitive.U8 token_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            return new Method(114, "AssetRegistry", 4, "register_vstoken_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_vsbond_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterVsbondMetadata(Substrate.NetApi.Model.Types.Primitive.U8 token_id, Substrate.NetApi.Model.Types.Primitive.U32 para_id, Substrate.NetApi.Model.Types.Primitive.U32 first_slot, Substrate.NetApi.Model.Types.Primitive.U32 last_slot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(para_id.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            return new Method(114, "AssetRegistry", 5, "register_vsbond_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_multilocation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterMultilocation(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Generated.Model.staging_xcm.EnumVersionedMultiLocation location, Substrate.NetApi.Generated.Model.sp_weights.weight_v2.Weight weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(weight.Encode());
            return new Method(114, "AssetRegistry", 6, "register_multilocation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_set_multilocation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetMultilocation(Substrate.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Generated.Model.staging_xcm.EnumVersionedMultiLocation location, Substrate.NetApi.Generated.Model.sp_weights.weight_v2.Weight weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(weight.Encode());
            return new Method(114, "AssetRegistry", 7, "force_set_multilocation", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AssetRegistryConstants
    /// </summary>
    public sealed class AssetRegistryConstants
    {
    }
    
    /// <summary>
    /// >> AssetRegistryErrors
    /// </summary>
    public enum AssetRegistryErrors
    {
        
        /// <summary>
        /// >> BadLocation
        /// The given location could not be used (e.g. because it cannot be expressed in the
        /// desired version of XCM).
        /// </summary>
        BadLocation,
        
        /// <summary>
        /// >> MultiLocationExisted
        /// MultiLocation existed
        /// </summary>
        MultiLocationExisted,
        
        /// <summary>
        /// >> AssetIdNotExists
        /// AssetId not exists
        /// </summary>
        AssetIdNotExists,
        
        /// <summary>
        /// >> AssetIdExisted
        /// AssetId exists
        /// </summary>
        AssetIdExisted,
        
        /// <summary>
        /// >> CurrencyIdNotExists
        /// CurrencyId not exists
        /// </summary>
        CurrencyIdNotExists,
        
        /// <summary>
        /// >> CurrencyIdExisted
        /// CurrencyId exists
        /// </summary>
        CurrencyIdExisted,
    }
}
